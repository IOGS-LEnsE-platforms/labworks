
fir_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007330  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007510  08007510  00008510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007590  08007590  000090f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007590  08007590  00008590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007598  08007598  000090f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007598  08007598  00008598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800759c  0800759c  0000859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  080075a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200000f4  08007694  000090f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08007694  000097a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c756  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca6  00000000  00000000  0002587a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00029520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121c  00000000  00000000  0002acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023760  00000000  00000000  0002bef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf63  00000000  00000000  0004f654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2abe  00000000  00000000  0006c5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  0014f075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  0014f134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  00155cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d95  00000000  00000000  00155d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00156b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080074f8 	.word	0x080074f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f8 	.word	0x200000f8
 800021c:	080074f8 	.word	0x080074f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f006 f960 	bl	80068ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000654:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800065c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800067a:	f001 f9d5 	bl	8001a28 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000684:	f000 fbde 	bl	8000e44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000694:	f002 f93a 	bl	800290c <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800069e:	f000 fbd1 	bl	8000e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_ADC1_Init+0xf0>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	@ 0x7f
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_ADC1_Init+0xec>)
 80006c0:	f001 fbf4 	bl	8001eac <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ca:	f000 fbbb 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3730      	adds	r7, #48	@ 0x30
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000110 	.word	0x20000110
 80006dc:	04300002 	.word	0x04300002

080006e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	@ 0x68
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2244      	movs	r2, #68	@ 0x44
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f006 f8e2 	bl	80068ca <memset>
  if(adcHandle->Instance==ADC1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800070e:	d15f      	bne.n	80007d0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000716:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f82b 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800072c:	f000 fb8a 	bl	8000e44 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000734:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000736:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800073a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f003 f847 	bl	8003808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800077c:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_ADC_MspInit+0x100>)
 800077e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000782:	2205      	movs	r2, #5
 8000784:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800079a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007b6:	f002 fdb5 	bl	8003324 <HAL_DMA_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80007c0:	f000 fb40 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d0:	bf00      	nop
 80007d2:	3768      	adds	r7, #104	@ 0x68
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	2000017c 	.word	0x2000017c
 80007e0:	40020008 	.word	0x40020008

080007e4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2230      	movs	r2, #48	@ 0x30
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 f86a 	bl	80068ca <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_DAC1_Init+0x6c>)
 80007f8:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <MX_DAC1_Init+0x70>)
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <MX_DAC1_Init+0x6c>)
 80007fe:	f002 fa38 	bl	8002c72 <HAL_DAC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000808:	f000 fb1c 	bl	8000e44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800080c:	2302      	movs	r3, #2
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800081c:	230a      	movs	r3, #10
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_DAC1_Init+0x6c>)
 8000838:	f002 fb30 	bl	8002e9c <HAL_DAC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000842:	f000 faff 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200001dc 	.word	0x200001dc
 8000854:	50000800 	.word	0x50000800

08000858 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <HAL_DAC_MspInit+0xcc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d14f      	bne.n	800091a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800087a:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a24      	ldr	r2, [pc, #144]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008aa:	2310      	movs	r3, #16
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ae:	2303      	movs	r3, #3
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f002 ffa2 	bl	8003808 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <HAL_DAC_MspInit+0xd8>)
 80008c8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008d2:	2210      	movs	r2, #16
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008f0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008f4:	2220      	movs	r2, #32
 80008f6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000900:	f002 fd10 	bl	8003324 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800090a:	f000 fa9b 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	4a05      	ldr	r2, [pc, #20]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	@ 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	50000800 	.word	0x50000800
 8000928:	40021000 	.word	0x40021000
 800092c:	200001f0 	.word	0x200001f0
 8000930:	4002001c 	.word	0x4002001c

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_DMA_Init+0x60>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_DMA_Init+0x60>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6493      	str	r3, [r2, #72]	@ 0x48
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_DMA_Init+0x60>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_DMA_Init+0x60>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DMA_Init+0x60>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6493      	str	r3, [r2, #72]	@ 0x48
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_DMA_Init+0x60>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	200b      	movs	r0, #11
 8000970:	f002 f94b 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000974:	200b      	movs	r0, #11
 8000976:	f002 f962 	bl	8002c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200c      	movs	r0, #12
 8000980:	f002 f943 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000984:	200c      	movs	r0, #12
 8000986:	f002 f95a 	bl	8002c3e <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
/** Configure pins
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a51      	ldr	r2, [pc, #324]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b4f      	ldr	r3, [pc, #316]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	4b4c      	ldr	r3, [pc, #304]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a4b      	ldr	r2, [pc, #300]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b49      	ldr	r3, [pc, #292]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a45      	ldr	r2, [pc, #276]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a3f      	ldr	r2, [pc, #252]	@ (8000af8 <MX_GPIO_Init+0x160>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <MX_GPIO_Init+0x160>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8000a14:	4839      	ldr	r0, [pc, #228]	@ (8000afc <MX_GPIO_Init+0x164>)
 8000a16:	f003 f879 	bl	8003b0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4834      	ldr	r0, [pc, #208]	@ (8000b00 <MX_GPIO_Init+0x168>)
 8000a2e:	f002 feeb 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	482f      	ldr	r0, [pc, #188]	@ (8000b04 <MX_GPIO_Init+0x16c>)
 8000a48:	f002 fede 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 PA6 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10
 8000a4c:	f649 4362 	movw	r3, #40034	@ 0x9c62
 8000a50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a52:	2303      	movs	r3, #3
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f002 fed0 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f002 febf 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a8a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f002 feb0 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_GPIO_Init+0x164>)
 8000abc:	f002 fea4 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000ac0:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000ac4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <MX_GPIO_Init+0x164>)
 8000ada:	f002 fe95 	bl	8003808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2017      	movs	r0, #23
 8000ae4:	f002 f891 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae8:	2017      	movs	r0, #23
 8000aea:	f002 f8a8 	bl	8002c3e <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	@ 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400
 8000b00:	48001400 	.word	0x48001400
 8000b04:	48001800 	.word	0x48001800

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fcfd 	bl	800150c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f861 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f7ff ff3f 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1a:	f7ff ff0b 	bl	8000934 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b1e:	f7ff fd65 	bl	80005ec <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b22:	f7ff fe5f 	bl	80007e4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000b26:	f000 fad5 	bl	80010d4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000b2a:	f000 fb23 	bl	8001174 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  ADC_DAC_frequency_init();
 8000b2e:	f000 f953 	bl	8000dd8 <ADC_DAC_frequency_init>
  // Initialization of ADC and DAC
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, N);
 8000b32:	2220      	movs	r2, #32
 8000b34:	491e      	ldr	r1, [pc, #120]	@ (8000bb0 <main+0xa8>)
 8000b36:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <main+0xac>)
 8000b38:	f001 f8fa 	bl	8001d30 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, N, DAC_ALIGN_12B_R);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2320      	movs	r3, #32
 8000b42:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <main+0xb0>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	481d      	ldr	r0, [pc, #116]	@ (8000bbc <main+0xb4>)
 8000b48:	f002 f8b6 	bl	8002cb8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim7);
 8000b4c:	481c      	ldr	r0, [pc, #112]	@ (8000bc0 <main+0xb8>)
 8000b4e:	f004 f85d 	bl	8004c0c <HAL_TIM_Base_Start>
  arm_fir_init_f32(&filter1, FILTER_TAP_NUM, &filter_taps[0], &State[0], halfN);
 8000b52:	2310      	movs	r3, #16
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc4 <main+0xbc>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc8 <main+0xc0>)
 8000b5a:	211f      	movs	r1, #31
 8000b5c:	481b      	ldr	r0, [pc, #108]	@ (8000bcc <main+0xc4>)
 8000b5e:	f005 fb07 	bl	8006170 <arm_fir_init_f32>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fba6 	bl	80012b4 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0xc8>)
 8000b6a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <main+0xc8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <main+0xc8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <main+0xc8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <main+0xc8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000b88:	4911      	ldr	r1, [pc, #68]	@ (8000bd0 <main+0xc8>)
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fbf4 	bl	8001378 <BSP_COM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <main+0x92>
  {
    Error_Handler();
 8000b96:	f000 f955 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <main+0xcc>)
 8000b9c:	f005 fe40 	bl	8006820 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fbbd 	bl	8001320 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/* -- Sample board code to toggle leds ---- */
       BSP_LED_Toggle(LED_GREEN);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fbd0 	bl	800134c <BSP_LED_Toggle>
 8000bac:	e7fb      	b.n	8000ba6 <main+0x9e>
 8000bae:	bf00      	nop
 8000bb0:	20000260 	.word	0x20000260
 8000bb4:	20000110 	.word	0x20000110
 8000bb8:	200002e0 	.word	0x200002e0
 8000bbc:	200001dc 	.word	0x200001dc
 8000bc0:	20000574 	.word	0x20000574
 8000bc4:	2000046c 	.word	0x2000046c
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000460 	.word	0x20000460
 8000bd0:	20000250 	.word	0x20000250
 8000bd4:	08007510 	.word	0x08007510

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	@ 0x50
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2238      	movs	r2, #56	@ 0x38
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fe6f 	bl	80068ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f002 ffdc 	bl	8003bb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2340      	movs	r3, #64	@ 0x40
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c16:	2304      	movs	r3, #4
 8000c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c1a:	2355      	movs	r3, #85	@ 0x55
 8000c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f876 	bl	8003d20 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c3a:	f000 f903 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2303      	movs	r3, #3
 8000c44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2104      	movs	r1, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fb74 	bl	8004344 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c62:	f000 f8ef 	bl	8000e44 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// ISR for ADC and DAC conversion
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	for(int n=0; n<halfN; n++){ filt_in[n] = (float32_t) adc_buffer[n] - 2048; }
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e014      	b.n	8000ca8 <HAL_ADC_ConvHalfCpltCallback+0x38>
 8000c7e:	4a20      	ldr	r2, [pc, #128]	@ (8000d00 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000d04 <HAL_ADC_ConvHalfCpltCallback+0x94>
 8000c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	edc3 7a00 	vstr	s15, [r3]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	dde7      	ble.n	8000c7e <HAL_ADC_ConvHalfCpltCallback+0xe>
	arm_fir_f32(&filter1, filt_in_ptr, filt_out_ptr, halfN);
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	4816      	ldr	r0, [pc, #88]	@ (8000d14 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8000cba:	f005 fa67 	bl	800618c <arm_fir_f32>
	for(int n=0; n<halfN; n++){ dac_buffer[n] = (float32_t) filt_out[n] + 2048; }
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	e014      	b.n	8000cee <HAL_ADC_ConvHalfCpltCallback+0x7e>
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000d04 <HAL_ADC_ConvHalfCpltCallback+0x94>
 8000cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cdc:	ee17 1a90 	vmov	r1, s15
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	dde7      	ble.n	8000cc4 <HAL_ADC_ConvHalfCpltCallback+0x54>
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000260 	.word	0x20000260
 8000d04:	45000000 	.word	0x45000000
 8000d08:	20000360 	.word	0x20000360
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20000460 	.word	0x20000460
 8000d18:	200003e0 	.word	0x200003e0
 8000d1c:	200002e0 	.word	0x200002e0

08000d20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	for(int n=halfN; n<N; n++){ filt_in[n] = (float32_t) adc_buffer[n] - 2048; }
 8000d28:	2310      	movs	r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e014      	b.n	8000d58 <HAL_ADC_ConvCpltCallback+0x38>
 8000d2e:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000dbc <HAL_ADC_ConvCpltCallback+0x9c>
 8000d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d46:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b1f      	cmp	r3, #31
 8000d5c:	dde7      	ble.n	8000d2e <HAL_ADC_ConvCpltCallback+0xe>
	arm_fir_f32(&filter1, filt_in_ptr + halfN, filt_out_ptr + halfN, halfN);
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000d6e:	2310      	movs	r3, #16
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <HAL_ADC_ConvCpltCallback+0xac>)
 8000d72:	f005 fa0b 	bl	800618c <arm_fir_f32>
	for(int n=halfN; n<N; n++){ dac_buffer[n] = (float32_t) filt_out[n] + 2048; }
 8000d76:	2310      	movs	r3, #16
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	e014      	b.n	8000da6 <HAL_ADC_ConvCpltCallback+0x86>
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000dbc <HAL_ADC_ConvCpltCallback+0x9c>
 8000d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d94:	ee17 1a90 	vmov	r1, s15
 8000d98:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b1f      	cmp	r3, #31
 8000daa:	dde7      	ble.n	8000d7c <HAL_ADC_ConvCpltCallback+0x5c>
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000260 	.word	0x20000260
 8000dbc:	45000000 	.word	0x45000000
 8000dc0:	20000360 	.word	0x20000360
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000460 	.word	0x20000460
 8000dd0:	200003e0 	.word	0x200003e0
 8000dd4:	200002e0 	.word	0x200002e0

08000dd8 <ADC_DAC_frequency_init>:


void ADC_DAC_frequency_init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
  htim7.Instance = TIM7;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <ADC_DAC_frequency_init+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PSC;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000df0:	2210      	movs	r2, #16
 8000df2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = ARR;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000dfc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000e00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000e0a:	f003 fea7 	bl	8004b5c <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <ADC_DAC_frequency_init+0x40>
  {
    Error_Handler();
 8000e14:	f000 f816 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <ADC_DAC_frequency_init+0x64>)
 8000e26:	f004 fb07 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <ADC_DAC_frequency_init+0x5c>
  {
    Error_Handler();
 8000e30:	f000 f808 	bl	8000e44 <Error_Handler>
  }

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000574 	.word	0x20000574
 8000e40:	40001400 	.word	0x40001400

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e86:	f002 ff3b 	bl	8003d00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 fb5f 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <DMA1_Channel1_IRQHandler+0x10>)
 8000efe:	f002 fb34 	bl	800356a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000017c 	.word	0x2000017c

08000f0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <DMA1_Channel2_IRQHandler+0x10>)
 8000f12:	f002 fb2a 	bl	800356a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001f0 	.word	0x200001f0

08000f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f24:	2080      	movs	r0, #128	@ 0x80
 8000f26:	f002 fe23 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f2a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f2e:	f002 fe1f 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f36:	f002 fe1b 	bl	8003b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <TIM2_IRQHandler+0x10>)
 8000f46:	f003 fec3 	bl	8004cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000528 	.word	0x20000528

08000f54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <TIM7_IRQHandler+0x10>)
 8000f5a:	f003 feb9 	bl	8004cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000574 	.word	0x20000574

08000f68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fa3d 	bl	800143c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
  }
  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f005 fc78 	bl	8006968 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20008000 	.word	0x20008000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000524 	.word	0x20000524
 80010ac:	200007a8 	.word	0x200007a8

080010b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_TIM2_Init+0x9c>)
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 502;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <MX_TIM2_Init+0x9c>)
 80010fc:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001100:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <MX_TIM2_Init+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8520;
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <MX_TIM2_Init+0x9c>)
 800110a:	f242 1248 	movw	r2, #8520	@ 0x2148
 800110e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_TIM2_Init+0x9c>)
 8001112:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_TIM2_Init+0x9c>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111e:	4814      	ldr	r0, [pc, #80]	@ (8001170 <MX_TIM2_Init+0x9c>)
 8001120:	f003 fd1c 	bl	8004b5c <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800112a:	f7ff fe8b 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_TIM2_Init+0x9c>)
 800113c:	f003 ff18 	bl	8004f70 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001146:	f7ff fe7d 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <MX_TIM2_Init+0x9c>)
 8001158:	f004 f96e 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001162:	f7ff fe6f 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000528 	.word	0x20000528

08001174 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001186:	4a15      	ldr	r2, [pc, #84]	@ (80011dc <MX_TIM7_Init+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17-1;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_TIM7_Init+0x64>)
 800118c:	2210      	movs	r2, #16
 800118e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 109;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_TIM7_Init+0x64>)
 8001198:	226d      	movs	r2, #109	@ 0x6d
 800119a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_TIM7_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_TIM7_Init+0x64>)
 80011a4:	f003 fcda 	bl	8004b5c <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011ae:	f7ff fe49 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011b2:	2320      	movs	r3, #32
 80011b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MX_TIM7_Init+0x64>)
 80011c0:	f004 f93a 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011ca:	f7ff fe3b 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000574 	.word	0x20000574
 80011dc:	40001400 	.word	0x40001400

080011e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f0:	d114      	bne.n	800121c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f001 fcfb 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001214:	201c      	movs	r0, #28
 8001216:	f001 fd12 	bl	8002c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800121a:	e018      	b.n	800124e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_TIM_Base_MspInit+0x7c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122a:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	6593      	str	r3, [r2, #88]	@ 0x58
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_TIM_Base_MspInit+0x78>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2037      	movs	r0, #55	@ 0x37
 8001244:	f001 fce1 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001248:	2037      	movs	r0, #55	@ 0x37
 800124a:	f001 fcf8 	bl	8002c3e <HAL_NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40001400 	.word	0x40001400

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001262:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ff24 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f005 fb71 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fc39 	bl	8000b08 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   r0, =_estack
 8001298:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80012a4:	080075a0 	.word	0x080075a0
  ldr r2, =_sbss
 80012a8:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80012ac:	200007a8 	.word	0x200007a8

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>
	...

080012b4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <BSP_LED_Init+0x64>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <BSP_LED_Init+0x64>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <BSP_LED_Init+0x64>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80012d6:	2320      	movs	r3, #32
 80012d8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <BSP_LED_Init+0x68>)
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fa87 	bl	8003808 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <BSP_LED_Init+0x68>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	2120      	movs	r1, #32
 8001304:	2200      	movs	r2, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f002 fc00 	bl	8003b0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	20000088 	.word	0x20000088

08001320 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a06      	ldr	r2, [pc, #24]	@ (8001348 <BSP_LED_On+0x28>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	2120      	movs	r1, #32
 8001334:	2201      	movs	r2, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fbe8 	bl	8003b0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000088 	.word	0x20000088

0800134c <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <BSP_LED_Toggle+0x28>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	2220      	movs	r2, #32
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fbea 	bl	8003b3c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000088 	.word	0x20000088

08001378 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d903      	bls.n	8001396 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800138e:	f06f 0301 	mvn.w	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e018      	b.n	80013c8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2294      	movs	r2, #148	@ 0x94
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <BSP_COM_Init+0x5c>)
 80013a0:	4413      	add	r3, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f866 	bl	8001474 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2294      	movs	r2, #148	@ 0x94
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <BSP_COM_Init+0x5c>)
 80013b2:	4413      	add	r3, r2
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f80e 	bl	80013d8 <MX_LPUART1_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80013c2:	f06f 0303 	mvn.w	r3, #3
 80013c6:	e000      	b.n	80013ca <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200005c0 	.word	0x200005c0

080013d8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_LPUART1_Init+0x60>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	220c      	movs	r2, #12
 80013f6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	895b      	ldrh	r3, [r3, #10]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	891b      	ldrh	r3, [r3, #8]
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	899b      	ldrh	r3, [r3, #12]
 8001418:	461a      	mov	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001424:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f004 f8ce 	bl	80055c8 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000008c 	.word	0x2000008c

0800143c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <__io_putchar+0x30>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	2394      	movs	r3, #148	@ 0x94
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <__io_putchar+0x34>)
 8001452:	1898      	adds	r0, r3, r2
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145a:	2201      	movs	r2, #1
 800145c:	f004 f90e 	bl	800567c <HAL_UART_Transmit>
  return ch;
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000654 	.word	0x20000654
 8001470:	200005c0 	.word	0x200005c0

08001474 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <COM1_MspInit+0x94>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <COM1_MspInit+0x94>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <COM1_MspInit+0x94>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <COM1_MspInit+0x94>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <COM1_MspInit+0x94>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <COM1_MspInit+0x94>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <COM1_MspInit+0x94>)
 80014ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b0:	4a15      	ldr	r2, [pc, #84]	@ (8001508 <COM1_MspInit+0x94>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <COM1_MspInit+0x94>)
 80014ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80014c4:	2304      	movs	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80014d4:	230c      	movs	r3, #12
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f002 f991 	bl	8003808 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80014e6:	2308      	movs	r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80014ee:	230c      	movs	r3, #12
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f002 f984 	bl	8003808 <HAL_GPIO_Init>
}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	@ 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f001 fb6c 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f80d 	bl	800153c <HAL_InitTick>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	e001      	b.n	8001532 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152e:	f7ff fc8f 	bl	8000e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001532:	79fb      	ldrb	r3, [r7, #7]

}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_InitTick+0x68>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d022      	beq.n	8001596 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_InitTick+0x6c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <HAL_InitTick+0x68>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800155c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb78 	bl	8002c5a <HAL_SYSTICK_Config>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10f      	bne.n	8001590 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b0f      	cmp	r3, #15
 8001574:	d809      	bhi.n	800158a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001576:	2200      	movs	r2, #0
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	f04f 30ff 	mov.w	r0, #4294967295
 800157e:	f001 fb44 	bl	8002c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_InitTick+0x70>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e007      	b.n	800159a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e004      	b.n	800159a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e001      	b.n	800159a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000094 	.word	0x20000094
 80015a8:	20000084 	.word	0x20000084
 80015ac:	20000090 	.word	0x20000090

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x1c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_IncTick+0x20>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	4a03      	ldr	r2, [pc, #12]	@ (80015cc <HAL_IncTick+0x1c>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000658 	.word	0x20000658
 80015d0:	20000094 	.word	0x20000094

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000658 	.word	0x20000658

080015ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3360      	adds	r3, #96	@ 0x60
 8001666:	461a      	mov	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <LL_ADC_SetOffset+0x44>)
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	4313      	orrs	r3, r2
 8001684:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	03fff000 	.word	0x03fff000

0800169c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3360      	adds	r3, #96	@ 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3360      	adds	r3, #96	@ 0x60
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016fe:	b480      	push	{r7}
 8001700:	b087      	sub	sp, #28
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3360      	adds	r3, #96	@ 0x60
 800170e:	461a      	mov	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	431a      	orrs	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3360      	adds	r3, #96	@ 0x60
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	615a      	str	r2, [r3, #20]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b087      	sub	sp, #28
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3330      	adds	r3, #48	@ 0x30
 80017c6:	461a      	mov	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	211f      	movs	r1, #31
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0e9b      	lsrs	r3, r3, #26
 80017ee:	f003 011f 	and.w	r1, r3, #31
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3314      	adds	r3, #20
 800181e:	461a      	mov	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	0e5b      	lsrs	r3, r3, #25
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	0d1b      	lsrs	r3, r3, #20
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2107      	movs	r1, #7
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	0d1b      	lsrs	r3, r3, #20
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	431a      	orrs	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0318 	and.w	r3, r3, #24
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001888:	40d9      	lsrs	r1, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	400b      	ands	r3, r1
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	0007ffff 	.word	0x0007ffff

080018ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 031f 	and.w	r3, r3, #31
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6093      	str	r3, [r2, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001900:	d101      	bne.n	8001906 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001950:	d101      	bne.n	8001956 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsEnabled+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsEnabled+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019c6:	f043 0204 	orr.w	r2, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d101      	bne.n	80019f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d101      	bne.n	8001a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e167      	b.n	8001d12 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7fe fe45 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff3f 	bl	80018ec <LL_ADC_IsDeepPowerDownEnabled>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff25 	bl	80018c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff5a 	bl	800193c <LL_ADC_IsInternalRegulatorEnabled>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff3e 	bl	8001914 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a98:	4ba0      	ldr	r3, [pc, #640]	@ (8001d1c <HAL_ADC_Init+0x2f4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	4aa0      	ldr	r2, [pc, #640]	@ (8001d20 <HAL_ADC_Init+0x2f8>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff3c 	bl	800193c <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff75 	bl	80019da <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8100 	bne.w	8001d00 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80fc 	bne.w	8001d00 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff35 	bl	800198c <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b2c:	f7ff ff2e 	bl	800198c <LL_ADC_IsEnabled>
 8001b30:	4604      	mov	r4, r0
 8001b32:	487c      	ldr	r0, [pc, #496]	@ (8001d24 <HAL_ADC_Init+0x2fc>)
 8001b34:	f7ff ff2a 	bl	800198c <LL_ADC_IsEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4323      	orrs	r3, r4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4878      	ldr	r0, [pc, #480]	@ (8001d28 <HAL_ADC_Init+0x300>)
 8001b48:	f7ff fd50 	bl	80015ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7f5b      	ldrb	r3, [r3, #29]
 8001b50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	045b      	lsls	r3, r3, #17
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b60      	ldr	r3, [pc, #384]	@ (8001d2c <HAL_ADC_Init+0x304>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff14 	bl	8001a00 <LL_ADC_INJ_IsConversionOngoing>
 8001bd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d16d      	bne.n	8001cbc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d16a      	bne.n	8001cbc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bf2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c02:	f023 0302 	bic.w	r3, r3, #2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d017      	beq.n	8001c48 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6911      	ldr	r1, [r2, #16]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c46:	e013      	b.n	8001c70 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c6c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d118      	bne.n	8001cac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	e007      	b.n	8001cbc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10c      	bne.n	8001cde <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f023 010f 	bic.w	r1, r3, #15
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cdc:	e007      	b.n	8001cee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 020f 	bic.w	r2, r2, #15
 8001cec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000084 	.word	0x20000084
 8001d20:	053e2d63 	.word	0x053e2d63
 8001d24:	50000100 	.word	0x50000100
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	fff04007 	.word	0xfff04007

08001d30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3c:	4851      	ldr	r0, [pc, #324]	@ (8001e84 <HAL_ADC_Start_DMA+0x154>)
 8001d3e:	f7ff fdb5 	bl	80018ac <LL_ADC_GetMultimode>
 8001d42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fe46 	bl	80019da <LL_ADC_REG_IsConversionOngoing>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 808f 	bne.w	8001e74 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_Start_DMA+0x34>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e08a      	b.n	8001e7a <HAL_ADC_Start_DMA+0x14a>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d002      	beq.n	8001d7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b09      	cmp	r3, #9
 8001d7c:	d173      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fc84 	bl	800268c <ADC_Enable>
 8001d84:	4603      	mov	r3, r0
 8001d86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d166      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a38      	ldr	r2, [pc, #224]	@ (8001e88 <HAL_ADC_Start_DMA+0x158>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d002      	beq.n	8001db2 <HAL_ADC_Start_DMA+0x82>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e001      	b.n	8001db6 <HAL_ADC_Start_DMA+0x86>
 8001db2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d002      	beq.n	8001dc4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f023 0206 	bic.w	r2, r3, #6
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	661a      	str	r2, [r3, #96]	@ 0x60
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	4a25      	ldr	r2, [pc, #148]	@ (8001e8c <HAL_ADC_Start_DMA+0x15c>)
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <HAL_ADC_Start_DMA+0x160>)
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <HAL_ADC_Start_DMA+0x164>)
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	221c      	movs	r2, #28
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0210 	orr.w	r2, r2, #16
 8001e26:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3340      	adds	r3, #64	@ 0x40
 8001e42:	4619      	mov	r1, r3
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f001 fb14 	bl	8003474 <HAL_DMA_Start_IT>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fdac 	bl	80019b2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e5a:	e00d      	b.n	8001e78 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001e64:	e008      	b.n	8001e78 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001e72:	e001      	b.n	8001e78 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
 8001e76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	50000300 	.word	0x50000300
 8001e88:	50000100 	.word	0x50000100
 8001e8c:	08002799 	.word	0x08002799
 8001e90:	08002871 	.word	0x08002871
 8001e94:	0800288d 	.word	0x0800288d

08001e98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0b6      	sub	sp, #216	@ 0xd8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x22>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e3c8      	b.n	8002660 <HAL_ADC_ConfigChannel+0x7b4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fd7d 	bl	80019da <LL_ADC_REG_IsConversionOngoing>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 83ad 	bne.w	8002642 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff fc5e 	bl	80017b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fd6b 	bl	80019da <LL_ADC_REG_IsConversionOngoing>
 8001f04:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fd77 	bl	8001a00 <LL_ADC_INJ_IsConversionOngoing>
 8001f12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 81d9 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 81d4 	bne.w	80022d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f32:	d10f      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fc65 	bl	800180e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc0c 	bl	800176a <LL_ADC_SetSamplingTimeCommonConfig>
 8001f52:	e00e      	b.n	8001f72 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fc54 	bl	800180e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fbfc 	bl	800176a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d022      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6919      	ldr	r1, [r3, #16]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001fa4:	f7ff fb56 	bl	8001654 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6919      	ldr	r1, [r3, #16]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f7ff fba2 	bl	80016fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x124>
 8001fca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x126>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7ff fbae 	bl	8001734 <LL_ADC_SetOffsetSaturation>
 8001fd8:	e17b      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fb5b 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x15a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb50 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	e01e      	b.n	8002044 <HAL_ADC_ConfigChannel+0x198>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fb45 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800202c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e004      	b.n	8002042 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1b0>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	e018      	b.n	800208e <HAL_ADC_ConfigChannel+0x1e2>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e004      	b.n	800208e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002084:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fb14 	bl	80016c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff faf8 	bl	800169c <LL_ADC_GetOffsetChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x220>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2101      	movs	r1, #1
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff faed 	bl	800169c <LL_ADC_GetOffsetChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	f003 021f 	and.w	r2, r3, #31
 80020ca:	e01e      	b.n	800210a <HAL_ADC_ConfigChannel+0x25e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fae2 	bl	800169c <LL_ADC_GetOffsetChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e004      	b.n	8002108 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80020fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x276>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	e018      	b.n	8002154 <HAL_ADC_ConfigChannel+0x2a8>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002136:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800213a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800213e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800214a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002154:	429a      	cmp	r2, r3
 8002156:	d106      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fab1 	bl	80016c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2102      	movs	r1, #2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fa95 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x2e6>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2102      	movs	r1, #2
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fa8a 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	e01e      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x324>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2102      	movs	r1, #2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fa7f 	bl	800169c <LL_ADC_GetOffsetChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e004      	b.n	80021ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80021c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x33c>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	e016      	b.n	8002216 <HAL_ADC_ConfigChannel+0x36a>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e004      	b.n	8002216 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800220c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002216:	429a      	cmp	r2, r3
 8002218:	d106      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	2102      	movs	r1, #2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fa50 	bl	80016c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2103      	movs	r1, #3
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fa34 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10a      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x3a8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2103      	movs	r1, #3
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa29 	bl	800169c <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	f003 021f 	and.w	r2, r3, #31
 8002252:	e017      	b.n	8002284 <HAL_ADC_ConfigChannel+0x3d8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2103      	movs	r1, #3
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fa1e 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800226c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800226e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800227a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3f0>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	e011      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x414>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80022b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d106      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2103      	movs	r1, #3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f9fb 	bl	80016c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb58 	bl	800198c <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 8140 	bne.w	8002564 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f7ff fab7 	bl	8001864 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a8f      	ldr	r2, [pc, #572]	@ (8002538 <HAL_ADC_ConfigChannel+0x68c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	f040 8131 	bne.w	8002564 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x47e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2b09      	cmp	r3, #9
 8002320:	bf94      	ite	ls
 8002322:	2301      	movls	r3, #1
 8002324:	2300      	movhi	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	e019      	b.n	800235e <HAL_ADC_ConfigChannel+0x4b2>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800233c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e003      	b.n	800234e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2b09      	cmp	r3, #9
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235e:	2b00      	cmp	r3, #0
 8002360:	d079      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_ADC_ConfigChannel+0x4d2>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	3301      	adds	r3, #1
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800237c:	e015      	b.n	80023aa <HAL_ADC_ConfigChannel+0x4fe>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800238c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800238e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e003      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800239a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	069b      	lsls	r3, r3, #26
 80023a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x51e>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	e017      	b.n	80023fa <HAL_ADC_ConfigChannel+0x54e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e003      	b.n	80023ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80023e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	ea42 0103 	orr.w	r1, r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x574>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	051b      	lsls	r3, r3, #20
 800241e:	e018      	b.n	8002452 <HAL_ADC_ConfigChannel+0x5a6>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800243c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	f003 021f 	and.w	r2, r3, #31
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002452:	430b      	orrs	r3, r1
 8002454:	e081      	b.n	800255a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x5c6>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	3301      	adds	r3, #1
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002470:	e015      	b.n	800249e <HAL_ADC_ConfigChannel+0x5f2>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	069b      	lsls	r3, r3, #26
 800249a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_ADC_ConfigChannel+0x612>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	e017      	b.n	80024ee <HAL_ADC_ConfigChannel+0x642>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	61fb      	str	r3, [r7, #28]
  return result;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	ea42 0103 	orr.w	r1, r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_ADC_ConfigChannel+0x66e>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	3301      	adds	r3, #1
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	051b      	lsls	r3, r3, #20
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002518:	e01e      	b.n	8002558 <HAL_ADC_ConfigChannel+0x6ac>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	613b      	str	r3, [r7, #16]
  return result;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002532:	2320      	movs	r3, #32
 8002534:	e006      	b.n	8002544 <HAL_ADC_ConfigChannel+0x698>
 8002536:	bf00      	nop
 8002538:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	051b      	lsls	r3, r3, #20
 8002554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002558:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255e:	4619      	mov	r1, r3
 8002560:	f7ff f955 	bl	800180e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <HAL_ADC_ConfigChannel+0x7bc>)
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d071      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002570:	483e      	ldr	r0, [pc, #248]	@ (800266c <HAL_ADC_ConfigChannel+0x7c0>)
 8002572:	f7ff f861 	bl	8001638 <LL_ADC_GetCommonPathInternalCh>
 8002576:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a3c      	ldr	r2, [pc, #240]	@ (8002670 <HAL_ADC_ConfigChannel+0x7c4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_ADC_ConfigChannel+0x6e2>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3a      	ldr	r2, [pc, #232]	@ (8002674 <HAL_ADC_ConfigChannel+0x7c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d127      	bne.n	80025de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800258e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d121      	bne.n	80025de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a2:	d157      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025ac:	4619      	mov	r1, r3
 80025ae:	482f      	ldr	r0, [pc, #188]	@ (800266c <HAL_ADC_ConfigChannel+0x7c0>)
 80025b0:	f7ff f82f 	bl	8001612 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <HAL_ADC_ConfigChannel+0x7cc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	4a30      	ldr	r2, [pc, #192]	@ (800267c <HAL_ADC_ConfigChannel+0x7d0>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f9      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025dc:	e03a      	b.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_ADC_ConfigChannel+0x7d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d113      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a22      	ldr	r2, [pc, #136]	@ (8002684 <HAL_ADC_ConfigChannel+0x7d8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02a      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002606:	4619      	mov	r1, r3
 8002608:	4818      	ldr	r0, [pc, #96]	@ (800266c <HAL_ADC_ConfigChannel+0x7c0>)
 800260a:	f7ff f802 	bl	8001612 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800260e:	e021      	b.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <HAL_ADC_ConfigChannel+0x7dc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11c      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800261a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <HAL_ADC_ConfigChannel+0x7d8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d011      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002638:	4619      	mov	r1, r3
 800263a:	480c      	ldr	r0, [pc, #48]	@ (800266c <HAL_ADC_ConfigChannel+0x7c0>)
 800263c:	f7fe ffe9 	bl	8001612 <LL_ADC_SetCommonPathInternalCh>
 8002640:	e008      	b.n	8002654 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800265c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002660:	4618      	mov	r0, r3
 8002662:	37d8      	adds	r7, #216	@ 0xd8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	80080000 	.word	0x80080000
 800266c:	50000300 	.word	0x50000300
 8002670:	c3210000 	.word	0xc3210000
 8002674:	90c00010 	.word	0x90c00010
 8002678:	20000084 	.word	0x20000084
 800267c:	053e2d63 	.word	0x053e2d63
 8002680:	c7520000 	.word	0xc7520000
 8002684:	50000100 	.word	0x50000100
 8002688:	cb840000 	.word	0xcb840000

0800268c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff f975 	bl	800198c <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d169      	bne.n	800277c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <ADC_Enable+0xfc>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e055      	b.n	800277e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f944 	bl	8001964 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026dc:	482b      	ldr	r0, [pc, #172]	@ (800278c <ADC_Enable+0x100>)
 80026de:	f7fe ffab 	bl	8001638 <LL_ADC_GetCommonPathInternalCh>
 80026e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026ec:	4b28      	ldr	r3, [pc, #160]	@ (8002790 <ADC_Enable+0x104>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <ADC_Enable+0x108>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002706:	e002      	b.n	800270e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3b01      	subs	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002714:	f7fe ff5e 	bl	80015d4 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271a:	e028      	b.n	800276e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f933 	bl	800198c <LL_ADC_IsEnabled>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d104      	bne.n	8002736 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f917 	bl	8001964 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002736:	f7fe ff4d 	bl	80015d4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d914      	bls.n	800276e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d00d      	beq.n	800276e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e007      	b.n	800277e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d1cf      	bne.n	800271c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	8000003f 	.word	0x8000003f
 800278c:	50000300 	.word	0x50000300
 8002790:	20000084 	.word	0x20000084
 8002794:	053e2d63 	.word	0x053e2d63

08002798 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d14b      	bne.n	800284a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d021      	beq.n	8002810 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe ffdd 	bl	8001790 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d032      	beq.n	8002842 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d12b      	bne.n	8002842 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11f      	bne.n	8002842 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800280e:	e018      	b.n	8002842 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d111      	bne.n	8002842 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7fe fa6c 	bl	8000d20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002848:	e00e      	b.n	8002868 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fb1e 	bl	8001e98 <HAL_ADC_ErrorCallback>
}
 800285c:	e004      	b.n	8002868 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7fe f9f6 	bl	8000c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028aa:	f043 0204 	orr.w	r2, r3, #4
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff faf0 	bl	8001e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <LL_ADC_IsEnabled>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <LL_ADC_IsEnabled+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <LL_ADC_IsEnabled+0x1a>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d101      	bne.n	80028fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b0a1      	sub	sp, #132	@ 0x84
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002926:	2302      	movs	r3, #2
 8002928:	e08b      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002932:	2300      	movs	r3, #0
 8002934:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002936:	2300      	movs	r3, #0
 8002938:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002942:	d102      	bne.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002944:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	e001      	b.n	800294e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e06a      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffb9 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8002974:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ffb3 	bl	80028e6 <LL_ADC_REG_IsConversionOngoing>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14c      	bne.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002988:	2b00      	cmp	r3, #0
 800298a:	d149      	bne.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800298e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d028      	beq.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029aa:	035b      	lsls	r3, r3, #13
 80029ac:	430b      	orrs	r3, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029b8:	f7ff ff82 	bl	80028c0 <LL_ADC_IsEnabled>
 80029bc:	4604      	mov	r4, r0
 80029be:	4823      	ldr	r0, [pc, #140]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029c0:	f7ff ff7e 	bl	80028c0 <LL_ADC_IsEnabled>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4323      	orrs	r3, r4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d133      	bne.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029d4:	f023 030f 	bic.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	431a      	orrs	r2, r3
 80029e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e8:	e024      	b.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029fa:	f7ff ff61 	bl	80028c0 <LL_ADC_IsEnabled>
 80029fe:	4604      	mov	r4, r0
 8002a00:	4812      	ldr	r0, [pc, #72]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a02:	f7ff ff5d 	bl	80028c0 <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4323      	orrs	r3, r4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d112      	bne.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a16:	f023 030f 	bic.w	r3, r3, #15
 8002a1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a1c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a1e:	e009      	b.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a32:	e000      	b.n	8002a36 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3784      	adds	r7, #132	@ 0x84
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	50000100 	.word	0x50000100
 8002a50:	50000300 	.word	0x50000300

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	db0b      	blt.n	8002ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <__NVIC_EnableIRQ+0x38>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2001      	movs	r0, #1
 8002ada:	fa00 f202 	lsl.w	r2, r0, r2
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000e100 	.word	0xe000e100

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	@ (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	@ (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	@ 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f7ff ff8e 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bde:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff29 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c18:	f7ff ff40 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff ff90 	bl	8002b48 <NVIC_EncodePriority>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff5f 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff33 	bl	8002ab8 <__NVIC_EnableIRQ>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffa4 	bl	8002bb0 <SysTick_Config>
 8002c68:	4603      	mov	r3, r0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e014      	b.n	8002cae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	791b      	ldrb	r3, [r3, #4]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fd fddf 	bl	8000858 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b2      	b.n	8002e36 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	795b      	ldrb	r3, [r3, #5]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_DAC_Start_DMA+0x24>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0ac      	b.n	8002e36 <HAL_DAC_Start_DMA+0x17e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d129      	bne.n	8002d42 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a53      	ldr	r2, [pc, #332]	@ (8002e40 <HAL_DAC_Start_DMA+0x188>)
 8002cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_DAC_Start_DMA+0x18c>)
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_DAC_Start_DMA+0x190>)
 8002d04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_DAC_Start_DMA+0x6c>
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d005      	beq.n	8002d2e <HAL_DAC_Start_DMA+0x76>
 8002d22:	e009      	b.n	8002d38 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	61bb      	str	r3, [r7, #24]
        break;
 8002d2c:	e033      	b.n	8002d96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	61bb      	str	r3, [r7, #24]
        break;
 8002d36:	e02e      	b.n	8002d96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e029      	b.n	8002d96 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a41      	ldr	r2, [pc, #260]	@ (8002e4c <HAL_DAC_Start_DMA+0x194>)
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	@ (8002e50 <HAL_DAC_Start_DMA+0x198>)
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a3f      	ldr	r2, [pc, #252]	@ (8002e54 <HAL_DAC_Start_DMA+0x19c>)
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_DAC_Start_DMA+0xc0>
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d005      	beq.n	8002d82 <HAL_DAC_Start_DMA+0xca>
 8002d76:	e009      	b.n	8002d8c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	61bb      	str	r3, [r7, #24]
        break;
 8002d80:	e009      	b.n	8002d96 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3318      	adds	r3, #24
 8002d88:	61bb      	str	r3, [r7, #24]
        break;
 8002d8a:	e004      	b.n	8002d96 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	331c      	adds	r3, #28
 8002d92:	61bb      	str	r3, [r7, #24]
        break;
 8002d94:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002daa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6898      	ldr	r0, [r3, #8]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f000 fb5d 	bl	8003474 <HAL_DMA_Start_IT>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e010      	b.n	8002de2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002dce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68d8      	ldr	r0, [r3, #12]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	f000 fb4b 	bl	8003474 <HAL_DMA_Start_IT>
 8002dde:	4603      	mov	r3, r0
 8002de0:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11c      	bne.n	8002e28 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e06:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <HAL_DAC_Start_DMA+0x1a0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <HAL_DAC_Start_DMA+0x1a4>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002e18:	e002      	b.n	8002e20 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f9      	bne.n	8002e1a <HAL_DAC_Start_DMA+0x162>
 8002e26:	e005      	b.n	8002e34 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f043 0204 	orr.w	r2, r3, #4
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08003211 	.word	0x08003211
 8002e44:	08003233 	.word	0x08003233
 8002e48:	0800324f 	.word	0x0800324f
 8002e4c:	080032b9 	.word	0x080032b9
 8002e50:	080032db 	.word	0x080032db
 8002e54:	080032f7 	.word	0x080032f7
 8002e58:	20000084 	.word	0x20000084
 8002e5c:	053e2d63 	.word	0x053e2d63

08002e60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	@ 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_DAC_ConfigChannel+0x1c>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e1a1      	b.n	8003200 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	795b      	ldrb	r3, [r3, #5]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_DAC_ConfigChannel+0x32>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e198      	b.n	8003200 <HAL_DAC_ConfigChannel+0x364>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d17a      	bne.n	8002fd8 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ee2:	f7fe fb77 	bl	80015d4 <HAL_GetTick>
 8002ee6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d13d      	bne.n	8002f6a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eee:	e018      	b.n	8002f22 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef0:	f7fe fb70 	bl	80015d4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d911      	bls.n	8002f22 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f043 0208 	orr.w	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e16e      	b.n	8003200 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1df      	bne.n	8002ef0 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f38:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f3a:	e020      	b.n	8002f7e <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f3c:	f7fe fb4a 	bl	80015d4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d90f      	bls.n	8002f6a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da0a      	bge.n	8002f6a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f043 0208 	orr.w	r2, r3, #8
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e14a      	b.n	8003200 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dbe3      	blt.n	8002f3c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	ea02 0103 	and.w	r1, r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	21ff      	movs	r1, #255	@ 0xff
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	ea02 0103 	and.w	r1, r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d11d      	bne.n	800301c <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	221f      	movs	r2, #31
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003010:	4313      	orrs	r3, r2
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003034:	4013      	ands	r3, r2
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d102      	bne.n	8003046 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	e00f      	b.n	8003066 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d102      	bne.n	8003054 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800304e:	2301      	movs	r3, #1
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	e008      	b.n	8003066 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800305c:	2301      	movs	r3, #1
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	e001      	b.n	8003066 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003062:	2300      	movs	r3, #0
 8003064:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	4013      	ands	r3, r2
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_DAC_ConfigChannel+0x1fe>
 8003094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003098:	e000      	b.n	800309c <HAL_DAC_ConfigChannel+0x200>
 800309a:	2300      	movs	r3, #0
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	4013      	ands	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	795b      	ldrb	r3, [r3, #5]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <HAL_DAC_ConfigChannel+0x22a>
 80030c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c4:	e000      	b.n	80030c8 <HAL_DAC_ConfigChannel+0x22c>
 80030c6:	2300      	movs	r3, #0
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d114      	bne.n	8003108 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80030de:	f001 facf 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80030e2:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4a48      	ldr	r2, [pc, #288]	@ (8003208 <HAL_DAC_ConfigChannel+0x36c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d904      	bls.n	80030f6 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	e00f      	b.n	8003116 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4a44      	ldr	r2, [pc, #272]	@ (800320c <HAL_DAC_ConfigChannel+0x370>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d90a      	bls.n	8003114 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	e006      	b.n	8003116 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	4313      	orrs	r3, r2
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
 8003112:	e000      	b.n	8003116 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003114:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	4313      	orrs	r3, r2
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43da      	mvns	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	400a      	ands	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003168:	4013      	ands	r3, r2
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	4313      	orrs	r3, r2
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	22c0      	movs	r2, #192	@ 0xc0
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	400a      	ands	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	ea02 0103 	and.w	r1, r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80031fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3728      	adds	r7, #40	@ 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	09896800 	.word	0x09896800
 800320c:	04c4b400 	.word	0x04c4b400

08003210 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fe1e 	bl	8002e60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	711a      	strb	r2, [r3, #4]
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fe17 	bl	8002e74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fe0d 	bl	8002e88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	711a      	strb	r2, [r3, #4]
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff ffd8 	bl	800327c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	711a      	strb	r2, [r3, #4]
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7ff ffd1 	bl	8003290 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff ffc7 	bl	80032a4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	711a      	strb	r2, [r3, #4]
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e08d      	b.n	8003452 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_DMA_Init+0x138>)
 800333e:	429a      	cmp	r2, r3
 8003340:	d80f      	bhi.n	8003362 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	4b45      	ldr	r3, [pc, #276]	@ (8003460 <HAL_DMA_Init+0x13c>)
 800334a:	4413      	add	r3, r2
 800334c:	4a45      	ldr	r2, [pc, #276]	@ (8003464 <HAL_DMA_Init+0x140>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	009a      	lsls	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a42      	ldr	r2, [pc, #264]	@ (8003468 <HAL_DMA_Init+0x144>)
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003360:	e00e      	b.n	8003380 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_DMA_Init+0x148>)
 800336a:	4413      	add	r3, r2
 800336c:	4a3d      	ldr	r2, [pc, #244]	@ (8003464 <HAL_DMA_Init+0x140>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	009a      	lsls	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a3c      	ldr	r2, [pc, #240]	@ (8003470 <HAL_DMA_Init+0x14c>)
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9b6 	bl	8003744 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e0:	d102      	bne.n	80033e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <HAL_DMA_Init+0x104>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d80c      	bhi.n	8003428 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9d6 	bl	80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e008      	b.n	800343a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40020407 	.word	0x40020407
 8003460:	bffdfff8 	.word	0xbffdfff8
 8003464:	cccccccd 	.word	0xcccccccd
 8003468:	40020000 	.word	0x40020000
 800346c:	bffdfbf8 	.word	0xbffdfbf8
 8003470:	40020400 	.word	0x40020400

08003474 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_DMA_Start_IT+0x20>
 8003490:	2302      	movs	r3, #2
 8003492:	e066      	b.n	8003562 <HAL_DMA_Start_IT+0xee>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d155      	bne.n	8003554 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f8fb 	bl	80036c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 020e 	orr.w	r2, r2, #14
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00f      	b.n	800350c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 020a 	orr.w	r2, r2, #10
 800350a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003528:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003540:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e005      	b.n	8003560 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2204      	movs	r2, #4
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d026      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x7a>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d021      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0204 	bic.w	r2, r2, #4
 80035bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2104      	movs	r1, #4
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d071      	beq.n	80036be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035e2:	e06c      	b.n	80036be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2202      	movs	r2, #2
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d02e      	beq.n	8003656 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d029      	beq.n	8003656 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10b      	bne.n	8003628 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 020a 	bic.w	r2, r2, #10
 800361e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	2102      	movs	r1, #2
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d038      	beq.n	80036be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003654:	e033      	b.n	80036be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2208      	movs	r2, #8
 8003660:	409a      	lsls	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d025      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 020e 	bic.w	r2, r2, #14
 8003682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
}
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d108      	bne.n	8003728 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003726:	e007      	b.n	8003738 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d802      	bhi.n	800375e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003758:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e001      	b.n	8003762 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800375e:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003760:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3b08      	subs	r3, #8
 800376e:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a0b      	ldr	r2, [pc, #44]	@ (80037bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800378e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40020407 	.word	0x40020407
 80037b0:	40020800 	.word	0x40020800
 80037b4:	40020820 	.word	0x40020820
 80037b8:	cccccccd 	.word	0xcccccccd
 80037bc:	40020880 	.word	0x40020880

080037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a08      	ldr	r2, [pc, #32]	@ (8003804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	1000823f 	.word	0x1000823f
 8003804:	40020940 	.word	0x40020940

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003816:	e15a      	b.n	8003ace <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 814c 	beq.w	8003ac8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d005      	beq.n	8003848 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003844:	2b02      	cmp	r3, #2
 8003846:	d130      	bne.n	80038aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800387e:	2201      	movs	r2, #1
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 0201 	and.w	r2, r3, #1
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d017      	beq.n	80038e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2203      	movs	r2, #3
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d123      	bne.n	800393a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	6939      	ldr	r1, [r7, #16]
 8003936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a6 	beq.w	8003ac8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aec <HAL_GPIO_Init+0x2e4>)
 800397e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003980:	4a5a      	ldr	r2, [pc, #360]	@ (8003aec <HAL_GPIO_Init+0x2e4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6613      	str	r3, [r2, #96]	@ 0x60
 8003988:	4b58      	ldr	r3, [pc, #352]	@ (8003aec <HAL_GPIO_Init+0x2e4>)
 800398a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003994:	4a56      	ldr	r2, [pc, #344]	@ (8003af0 <HAL_GPIO_Init+0x2e8>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3302      	adds	r3, #2
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039be:	d01f      	beq.n	8003a00 <HAL_GPIO_Init+0x1f8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a4c      	ldr	r2, [pc, #304]	@ (8003af4 <HAL_GPIO_Init+0x2ec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d019      	beq.n	80039fc <HAL_GPIO_Init+0x1f4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a4b      	ldr	r2, [pc, #300]	@ (8003af8 <HAL_GPIO_Init+0x2f0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_GPIO_Init+0x1f0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	@ (8003afc <HAL_GPIO_Init+0x2f4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00d      	beq.n	80039f4 <HAL_GPIO_Init+0x1ec>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a49      	ldr	r2, [pc, #292]	@ (8003b00 <HAL_GPIO_Init+0x2f8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <HAL_GPIO_Init+0x1e8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a48      	ldr	r2, [pc, #288]	@ (8003b04 <HAL_GPIO_Init+0x2fc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_GPIO_Init+0x1e4>
 80039e8:	2305      	movs	r3, #5
 80039ea:	e00a      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039ec:	2306      	movs	r3, #6
 80039ee:	e008      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039f0:	2304      	movs	r3, #4
 80039f2:	e006      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039f4:	2303      	movs	r3, #3
 80039f6:	e004      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e002      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_GPIO_Init+0x1fa>
 8003a00:	2300      	movs	r3, #0
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	f002 0203 	and.w	r2, r2, #3
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	4093      	lsls	r3, r2
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a12:	4937      	ldr	r1, [pc, #220]	@ (8003af0 <HAL_GPIO_Init+0x2e8>)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a20:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a6e:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a74:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a98:	4a1b      	ldr	r2, [pc, #108]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac2:	4a11      	ldr	r2, [pc, #68]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f ae9d 	bne.w	8003818 <HAL_GPIO_Init+0x10>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40010000 	.word	0x40010000
 8003af4:	48000400 	.word	0x48000400
 8003af8:	48000800 	.word	0x48000800
 8003afc:	48000c00 	.word	0x48000c00
 8003b00:	48001000 	.word	0x48001000
 8003b04:	48001400 	.word	0x48001400
 8003b08:	40010400 	.word	0x40010400

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	43d9      	mvns	r1, r3
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b86:	4a05      	ldr	r2, [pc, #20]	@ (8003b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f806 	bl	8003ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d141      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd2:	d131      	bne.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd4:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bda:	4a46      	ldr	r2, [pc, #280]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be4:	4b43      	ldr	r3, [pc, #268]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bec:	4a41      	ldr	r2, [pc, #260]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf4:	4b40      	ldr	r3, [pc, #256]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2232      	movs	r2, #50	@ 0x32
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	0c9b      	lsrs	r3, r3, #18
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0a:	e002      	b.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c12:	4b38      	ldr	r3, [pc, #224]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1e:	d102      	bne.n	8003c26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f2      	bne.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c26:	4b33      	ldr	r3, [pc, #204]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d158      	bne.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e057      	b.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c38:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c48:	e04d      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c50:	d141      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c52:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5e:	d131      	bne.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c60:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c66:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c78:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2232      	movs	r2, #50	@ 0x32
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c96:	e002      	b.n	8003c9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003caa:	d102      	bne.n	8003cb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f2      	bne.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbe:	d112      	bne.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e011      	b.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cd4:	e007      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ce4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	20000084 	.word	0x20000084
 8003cfc:	431bde83 	.word	0x431bde83

08003d00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d0e:	6093      	str	r3, [r2, #8]
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e2fe      	b.n	8004330 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d075      	beq.n	8003e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3e:	4b97      	ldr	r3, [pc, #604]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d48:	4b94      	ldr	r3, [pc, #592]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	d102      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3e>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d002      	beq.n	8003d64 <HAL_RCC_OscConfig+0x44>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d10b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	4b8d      	ldr	r3, [pc, #564]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d05b      	beq.n	8003e28 <HAL_RCC_OscConfig+0x108>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d157      	bne.n	8003e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e2d9      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d106      	bne.n	8003d94 <HAL_RCC_OscConfig+0x74>
 8003d86:	4b85      	ldr	r3, [pc, #532]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a84      	ldr	r2, [pc, #528]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e01d      	b.n	8003dd0 <HAL_RCC_OscConfig+0xb0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x98>
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7e      	ldr	r2, [pc, #504]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7b      	ldr	r2, [pc, #492]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0xb0>
 8003db8:	4b78      	ldr	r3, [pc, #480]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a77      	ldr	r2, [pc, #476]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b75      	ldr	r3, [pc, #468]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a74      	ldr	r2, [pc, #464]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fbfc 	bl	80015d4 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fd fbf8 	bl	80015d4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	@ 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e29e      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0xc0>
 8003dfe:	e014      	b.n	8003e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fbe8 	bl	80015d4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fd fbe4 	bl	80015d4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	@ 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e28a      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1a:	4b60      	ldr	r3, [pc, #384]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0xe8>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d075      	beq.n	8003f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b59      	ldr	r3, [pc, #356]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e40:	4b56      	ldr	r3, [pc, #344]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d102      	bne.n	8003e56 <HAL_RCC_OscConfig+0x136>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_OscConfig+0x13c>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11f      	bne.n	8003e9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_OscConfig+0x154>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e25d      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b49      	ldr	r3, [pc, #292]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	4946      	ldr	r1, [pc, #280]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e88:	4b45      	ldr	r3, [pc, #276]	@ (8003fa0 <HAL_RCC_OscConfig+0x280>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd fb55 	bl	800153c <HAL_InitTick>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d043      	beq.n	8003f20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e249      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fb90 	bl	80015d4 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb8:	f7fd fb8c 	bl	80015d4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e232      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eca:	4b34      	ldr	r3, [pc, #208]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed6:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	492d      	ldr	r1, [pc, #180]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	604b      	str	r3, [r1, #4]
 8003eea:	e01a      	b.n	8003f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eec:	4b2b      	ldr	r3, [pc, #172]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb6c 	bl	80015d4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd fb68 	bl	80015d4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e20e      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f12:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1e0>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d041      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01c      	beq.n	8003f70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fd fb45 	bl	80015d4 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fb41 	bl	80015d4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1e7      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ef      	beq.n	8003f4e <HAL_RCC_OscConfig+0x22e>
 8003f6e:	e020      	b.n	8003fb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f70:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f76:	4a09      	ldr	r2, [pc, #36]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fd fb28 	bl	80015d4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f86:	e00d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fd fb24 	bl	80015d4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d906      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1ca      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	20000090 	.word	0x20000090
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ea      	bne.n	8003f88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80a6 	beq.w	800410c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc4:	4b84      	ldr	r3, [pc, #528]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2b4>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2b6>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	4b7f      	ldr	r3, [pc, #508]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fde:	4a7e      	ldr	r2, [pc, #504]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff6:	4b79      	ldr	r3, [pc, #484]	@ (80041dc <HAL_RCC_OscConfig+0x4bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d118      	bne.n	8004034 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004002:	4b76      	ldr	r3, [pc, #472]	@ (80041dc <HAL_RCC_OscConfig+0x4bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a75      	ldr	r2, [pc, #468]	@ (80041dc <HAL_RCC_OscConfig+0x4bc>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7fd fae1 	bl	80015d4 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7fd fadd 	bl	80015d4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e183      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004028:	4b6c      	ldr	r3, [pc, #432]	@ (80041dc <HAL_RCC_OscConfig+0x4bc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <HAL_RCC_OscConfig+0x32e>
 800403c:	4b66      	ldr	r3, [pc, #408]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	4a65      	ldr	r2, [pc, #404]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800404c:	e024      	b.n	8004098 <HAL_RCC_OscConfig+0x378>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b05      	cmp	r3, #5
 8004054:	d110      	bne.n	8004078 <HAL_RCC_OscConfig+0x358>
 8004056:	4b60      	ldr	r3, [pc, #384]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	4a5e      	ldr	r2, [pc, #376]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004066:	4b5c      	ldr	r3, [pc, #368]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	4a5a      	ldr	r2, [pc, #360]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004076:	e00f      	b.n	8004098 <HAL_RCC_OscConfig+0x378>
 8004078:	4b57      	ldr	r3, [pc, #348]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407e:	4a56      	ldr	r2, [pc, #344]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004088:	4b53      	ldr	r3, [pc, #332]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	4a52      	ldr	r2, [pc, #328]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fd fa98 	bl	80015d4 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd fa94 	bl	80015d4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e138      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040be:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ed      	beq.n	80040a8 <HAL_RCC_OscConfig+0x388>
 80040cc:	e015      	b.n	80040fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fa81 	bl	80015d4 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fa7d 	bl	80015d4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e121      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ec:	4b3a      	ldr	r3, [pc, #232]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ed      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004100:	4b35      	ldr	r3, [pc, #212]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	4a34      	ldr	r2, [pc, #208]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03c      	beq.n	8004192 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01c      	beq.n	800415a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004120:	4b2d      	ldr	r3, [pc, #180]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004126:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fd fa50 	bl	80015d4 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004138:	f7fd fa4c 	bl	80015d4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0f2      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414a:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ef      	beq.n	8004138 <HAL_RCC_OscConfig+0x418>
 8004158:	e01b      	b.n	8004192 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004160:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fd fa33 	bl	80015d4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004172:	f7fd fa2f 	bl	80015d4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0d5      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004184:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 8004186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ef      	bne.n	8004172 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80c9 	beq.w	800432e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	f000 8083 	beq.w	80042b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d15e      	bne.n	8004270 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fd fa09 	bl	80015d4 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c4:	e00c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fd fa05 	bl	80015d4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d905      	bls.n	80041e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0ab      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e0:	4b55      	ldr	r3, [pc, #340]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ec      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ec:	4b52      	ldr	r3, [pc, #328]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4b52      	ldr	r3, [pc, #328]	@ (800433c <HAL_RCC_OscConfig+0x61c>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6a11      	ldr	r1, [r2, #32]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	4311      	orrs	r1, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004206:	0212      	lsls	r2, r2, #8
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0552      	lsls	r2, r2, #21
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800421a:	0852      	lsrs	r2, r2, #1
 800421c:	3a01      	subs	r2, #1
 800421e:	0652      	lsls	r2, r2, #25
 8004220:	4311      	orrs	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004226:	06d2      	lsls	r2, r2, #27
 8004228:	430a      	orrs	r2, r1
 800422a:	4943      	ldr	r1, [pc, #268]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 800422c:	4313      	orrs	r3, r2
 800422e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004230:	4b41      	ldr	r3, [pc, #260]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a40      	ldr	r2, [pc, #256]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800423a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800423c:	4b3e      	ldr	r3, [pc, #248]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a3d      	ldr	r2, [pc, #244]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd f9c4 	bl	80015d4 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004250:	f7fd f9c0 	bl	80015d4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e066      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004262:	4b35      	ldr	r3, [pc, #212]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x530>
 800426e:	e05e      	b.n	800432e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd f9aa 	bl	80015d4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd f9a6 	bl	80015d4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e04c      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004296:	4b28      	ldr	r3, [pc, #160]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042a2:	4b25      	ldr	r3, [pc, #148]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	4924      	ldr	r1, [pc, #144]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 80042a8:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <HAL_RCC_OscConfig+0x620>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	60cb      	str	r3, [r1, #12]
 80042ae:	e03e      	b.n	800432e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e039      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <HAL_RCC_OscConfig+0x618>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d12c      	bne.n	800432a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	3b01      	subs	r3, #1
 80042dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d123      	bne.n	800432a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d11b      	bne.n	800432a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d113      	bne.n	800432a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d109      	bne.n	800432a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d001      	beq.n	800432e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	019f800c 	.word	0x019f800c
 8004340:	feeefffc 	.word	0xfeeefffc

08004344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e11e      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800435c:	4b91      	ldr	r3, [pc, #580]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d910      	bls.n	800438c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b8e      	ldr	r3, [pc, #568]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	498c      	ldr	r1, [pc, #560]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b8a      	ldr	r3, [pc, #552]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e106      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d073      	beq.n	8004480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d129      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a0:	4b81      	ldr	r3, [pc, #516]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0f4      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043b0:	f000 f99e 	bl	80046f0 <RCC_GetSysClockFreqFromPLLSource>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4a7c      	ldr	r2, [pc, #496]	@ (80045ac <HAL_RCC_ClockConfig+0x268>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d93f      	bls.n	800443e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043be:	4b7a      	ldr	r3, [pc, #488]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d033      	beq.n	800443e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d12f      	bne.n	800443e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043de:	4b72      	ldr	r3, [pc, #456]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e6:	4a70      	ldr	r2, [pc, #448]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80043e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e024      	b.n	800443e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fc:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0c6      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800440c:	4b66      	ldr	r3, [pc, #408]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0be      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800441c:	f000 f8ce 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4a61      	ldr	r2, [pc, #388]	@ (80045ac <HAL_RCC_ClockConfig+0x268>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d909      	bls.n	800443e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800442a:	4b5f      	ldr	r3, [pc, #380]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004432:	4a5d      	ldr	r2, [pc, #372]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 8004434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b5a      	ldr	r3, [pc, #360]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4957      	ldr	r1, [pc, #348]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd f8c0 	bl	80015d4 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fd f8bc 	bl	80015d4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e095      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b4e      	ldr	r3, [pc, #312]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d023      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b43      	ldr	r3, [pc, #268]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a42      	ldr	r2, [pc, #264]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800449e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044b0:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044b8:	4a3b      	ldr	r2, [pc, #236]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4936      	ldr	r1, [pc, #216]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044da:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 80044e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e6:	4b2f      	ldr	r3, [pc, #188]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d21d      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 020f 	bic.w	r2, r3, #15
 80044fc:	4929      	ldr	r1, [pc, #164]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004504:	f7fd f866 	bl	80015d4 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fd f862 	bl	80015d4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e03b      	b.n	800459a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_RCC_ClockConfig+0x260>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d1ed      	bne.n	800450c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4917      	ldr	r1, [pc, #92]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455a:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	490f      	ldr	r1, [pc, #60]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800456e:	f000 f825 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004572:	4602      	mov	r2, r0
 8004574:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <HAL_RCC_ClockConfig+0x264>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	490c      	ldr	r1, [pc, #48]	@ (80045b0 <HAL_RCC_ClockConfig+0x26c>)
 8004580:	5ccb      	ldrb	r3, [r1, r3]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <HAL_RCC_ClockConfig+0x270>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800458e:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <HAL_RCC_ClockConfig+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc ffd2 	bl	800153c <HAL_InitTick>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
 80045ac:	04c4b400 	.word	0x04c4b400
 80045b0:	0800752c 	.word	0x0800752c
 80045b4:	20000084 	.word	0x20000084
 80045b8:	20000090 	.word	0x20000090

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	e047      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045d4:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e0:	4b26      	ldr	r3, [pc, #152]	@ (800467c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e03e      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d136      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	3301      	adds	r3, #1
 8004608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d10c      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004610:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	4a16      	ldr	r2, [pc, #88]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461a:	68d2      	ldr	r2, [r2, #12]
 800461c:	0a12      	lsrs	r2, r2, #8
 800461e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	617b      	str	r3, [r7, #20]
      break;
 8004628:	e00c      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800462a:	4a13      	ldr	r2, [pc, #76]	@ (8004678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	4a10      	ldr	r2, [pc, #64]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	0a12      	lsrs	r2, r2, #8
 8004638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
      break;
 8004642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	0e5b      	lsrs	r3, r3, #25
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	3301      	adds	r3, #1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e001      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004664:	693b      	ldr	r3, [r7, #16]
}
 8004666:	4618      	mov	r0, r3
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	@ (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000084 	.word	0x20000084

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	0800753c 	.word	0x0800753c

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046c8:	f7ff ffda 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	@ (80046ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	0800753c 	.word	0x0800753c

080046f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004700:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d10c      	bne.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	0a12      	lsrs	r2, r2, #8
 8004722:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	617b      	str	r3, [r7, #20]
    break;
 800472c:	e00c      	b.n	8004748 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800472e:	4a12      	ldr	r2, [pc, #72]	@ (8004778 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4a0e      	ldr	r2, [pc, #56]	@ (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	0a12      	lsrs	r2, r2, #8
 800473c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
    break;
 8004746:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	0e5b      	lsrs	r3, r3, #25
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004762:	687b      	ldr	r3, [r7, #4]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40021000 	.word	0x40021000
 8004774:	007a1200 	.word	0x007a1200
 8004778:	00f42400 	.word	0x00f42400

0800477c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004784:	2300      	movs	r3, #0
 8004786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004788:	2300      	movs	r3, #0
 800478a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8098 	beq.w	80048ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b43      	ldr	r3, [pc, #268]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	4a3f      	ldr	r2, [pc, #252]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047b6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c6:	4b3a      	ldr	r3, [pc, #232]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a39      	ldr	r2, [pc, #228]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d2:	f7fc feff 	bl	80015d4 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d8:	e009      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047da:	f7fc fefb 	bl	80015d4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d902      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	74fb      	strb	r3, [r7, #19]
        break;
 80047ec:	e005      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ee:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ef      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d159      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004800:	4b2a      	ldr	r3, [pc, #168]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01e      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d019      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800481c:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004826:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004828:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004838:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004848:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485a:	f7fc febb 	bl	80015d4 <HAL_GetTick>
 800485e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004860:	e00b      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fc feb7 	bl	80015d4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d902      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	74fb      	strb	r3, [r7, #19]
            break;
 8004878:	e006      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ec      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10b      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800488e:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	4903      	ldr	r1, [pc, #12]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	74bb      	strb	r3, [r7, #18]
 80048aa:	e005      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b8:	7c7b      	ldrb	r3, [r7, #17]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048be:	4ba6      	ldr	r3, [pc, #664]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	4aa5      	ldr	r2, [pc, #660]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d6:	4ba0      	ldr	r3, [pc, #640]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	f023 0203 	bic.w	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	499c      	ldr	r1, [pc, #624]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f8:	4b97      	ldr	r3, [pc, #604]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 020c 	bic.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4994      	ldr	r1, [pc, #592]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800491a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	498b      	ldr	r1, [pc, #556]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800493c:	4b86      	ldr	r3, [pc, #536]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004942:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	4983      	ldr	r1, [pc, #524]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800495e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	497a      	ldr	r1, [pc, #488]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004980:	4b75      	ldr	r3, [pc, #468]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	4972      	ldr	r1, [pc, #456]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4969      	ldr	r1, [pc, #420]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c4:	4b64      	ldr	r3, [pc, #400]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4961      	ldr	r1, [pc, #388]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	4958      	ldr	r1, [pc, #352]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a08:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	4950      	ldr	r1, [pc, #320]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a28:	4b4b      	ldr	r3, [pc, #300]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a32:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a40:	4b45      	ldr	r3, [pc, #276]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	4942      	ldr	r1, [pc, #264]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a60:	4b3d      	ldr	r3, [pc, #244]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a6a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a78:	4b37      	ldr	r3, [pc, #220]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4934      	ldr	r1, [pc, #208]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab0:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	4926      	ldr	r1, [pc, #152]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ace:	d105      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad0:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ada:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	4918      	ldr	r1, [pc, #96]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b06:	d105      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a12      	ldr	r2, [pc, #72]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d015      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b20:	4b0d      	ldr	r3, [pc, #52]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	490a      	ldr	r1, [pc, #40]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e049      	b.n	8004c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc fb2c 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fb14 	bl	80051c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e042      	b.n	8004caa <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a21      	ldr	r2, [pc, #132]	@ (8004cb8 <HAL_TIM_Base_Start+0xac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	@ (8004cbc <HAL_TIM_Base_Start+0xb0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <HAL_TIM_Base_Start+0xb4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_TIM_Base_Start+0xb8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a19      	ldr	r2, [pc, #100]	@ (8004cc8 <HAL_TIM_Base_Start+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d115      	bne.n	8004c94 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <HAL_TIM_Base_Start+0xc0>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d015      	beq.n	8004ca6 <HAL_TIM_Base_Start+0x9a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d011      	beq.n	8004ca6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	00010007 	.word	0x00010007

08004cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0202 	mvn.w	r2, #2
 8004d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa36 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fa28 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa39 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0204 	mvn.w	r2, #4
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa10 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa02 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fa13 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d020      	beq.n	8004dcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0208 	mvn.w	r2, #8
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9ea 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9dc 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9ed 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d020      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01b      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0210 	mvn.w	r2, #16
 8004de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2208      	movs	r2, #8
 8004dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f9c4 	bl	800518c <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f9b6 	bl	8005178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f9c7 	bl	80051a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0201 	mvn.w	r2, #1
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f994 	bl	8005164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb73 	bl	8005550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb6b 	bl	8005564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00c      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f981 	bl	80051b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0220 	mvn.w	r2, #32
 8004ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fb33 	bl	800553c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb3f 	bl	8005578 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00c      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fb37 	bl	800558c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00c      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb2f 	bl	80055a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb27 	bl	80055b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_ConfigClockSource+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0de      	b.n	800514a <HAL_TIM_ConfigClockSource+0x1da>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004faa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a63      	ldr	r2, [pc, #396]	@ (8005154 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f000 80a9 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8004fcc:	4a61      	ldr	r2, [pc, #388]	@ (8005154 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f200 80ae 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fd4:	4a60      	ldr	r2, [pc, #384]	@ (8005158 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f000 80a1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8004fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8005158 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	f200 80a6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f000 8099 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8004fec:	4a5b      	ldr	r2, [pc, #364]	@ (800515c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f200 809e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8005160 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	f000 8091 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8004ffc:	4a58      	ldr	r2, [pc, #352]	@ (8005160 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	f200 8096 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005004:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005008:	f000 8089 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 800500c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005010:	f200 808e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d03e      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x128>
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501e:	f200 8087 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	f000 8086 	beq.w	8005136 <HAL_TIM_ConfigClockSource+0x1c6>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502e:	d87f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d01a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0xfa>
 8005034:	2b70      	cmp	r3, #112	@ 0x70
 8005036:	d87b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005038:	2b60      	cmp	r3, #96	@ 0x60
 800503a:	d050      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x16e>
 800503c:	2b60      	cmp	r3, #96	@ 0x60
 800503e:	d877      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005040:	2b50      	cmp	r3, #80	@ 0x50
 8005042:	d03c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x14e>
 8005044:	2b50      	cmp	r3, #80	@ 0x50
 8005046:	d873      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d058      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x18e>
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	d86f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d064      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8005054:	2b30      	cmp	r3, #48	@ 0x30
 8005056:	d86b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d060      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d867      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05c      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8005064:	2b10      	cmp	r3, #16
 8005066:	d05a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1ae>
 8005068:	e062      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	f000 f9bd 	bl	80053f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800508c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
      break;
 8005096:	e04f      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	f000 f9a6 	bl	80053f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ba:	609a      	str	r2, [r3, #8]
      break;
 80050bc:	e03c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 f918 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2150      	movs	r1, #80	@ 0x50
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f971 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 80050dc:	e02c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f937 	bl	800535e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2160      	movs	r1, #96	@ 0x60
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f961 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 80050fc:	e01c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f8f8 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	@ 0x40
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f951 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 800511c:	e00c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 f948 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 800512e:	e003      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	00100070 	.word	0x00100070
 8005158:	00100040 	.word	0x00100040
 800515c:	00100030 	.word	0x00100030
 8005160:	00100020 	.word	0x00100020

08005164 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3f      	ldr	r2, [pc, #252]	@ (80052e8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	@ (80052ec <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x38>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a3d      	ldr	r2, [pc, #244]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a30      	ldr	r2, [pc, #192]	@ (80052e8 <TIM_Base_SetConfig+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <TIM_Base_SetConfig+0x124>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <TIM_Base_SetConfig+0x12c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <TIM_Base_SetConfig+0x130>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x8a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <TIM_Base_SetConfig+0x134>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a16      	ldr	r2, [pc, #88]	@ (80052e4 <TIM_Base_SetConfig+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a17      	ldr	r2, [pc, #92]	@ (80052f0 <TIM_Base_SetConfig+0x128>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <TIM_Base_SetConfig+0x12c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a15      	ldr	r2, [pc, #84]	@ (80052f8 <TIM_Base_SetConfig+0x130>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xe8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a14      	ldr	r2, [pc, #80]	@ (80052fc <TIM_Base_SetConfig+0x134>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]
  }
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800

08005300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f023 0210 	bic.w	r2, r3, #16
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f043 0307 	orr.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	021a      	lsls	r2, r3, #8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	431a      	orrs	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e065      	b.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2b      	ldr	r2, [pc, #172]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800548a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800549c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c6:	d013      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a12      	ldr	r2, [pc, #72]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40014000 	.word	0x40014000

0800553c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e042      	b.n	8005660 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f83b 	bl	8005668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	@ 0x24
 80055f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb8c 	bl	8005d30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8bd 	bl	8005798 <UART_SetConfig>
 800561e:	4603      	mov	r3, r0
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e01b      	b.n	8005660 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc0b 	bl	8005e74 <UART_CheckIdleState>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	2b20      	cmp	r3, #32
 8005694:	d17b      	bne.n	800578e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_Transmit+0x26>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e074      	b.n	8005790 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2221      	movs	r2, #33	@ 0x21
 80056b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b6:	f7fb ff8d 	bl	80015d4 <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d4:	d108      	bne.n	80056e8 <HAL_UART_Transmit+0x6c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e003      	b.n	80056f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056f0:	e030      	b.n	8005754 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	@ 0x80
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fc63 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e03d      	b.n	8005790 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005728:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e007      	b.n	8005742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1c8      	bne.n	80056f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	2140      	movs	r1, #64	@ 0x40
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fc2c 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e006      	b.n	8005790 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b08c      	sub	sp, #48	@ 0x30
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	4313      	orrs	r3, r2
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4bab      	ldr	r3, [pc, #684]	@ (8005a74 <UART_SetConfig+0x2dc>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4aa0      	ldr	r2, [pc, #640]	@ (8005a78 <UART_SetConfig+0x2e0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005800:	4313      	orrs	r3, r2
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800580e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005818:	430b      	orrs	r3, r1
 800581a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	f023 010f 	bic.w	r1, r3, #15
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a91      	ldr	r2, [pc, #580]	@ (8005a7c <UART_SetConfig+0x2e4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d125      	bne.n	8005888 <UART_SetConfig+0xf0>
 800583c:	4b90      	ldr	r3, [pc, #576]	@ (8005a80 <UART_SetConfig+0x2e8>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d81a      	bhi.n	8005880 <UART_SetConfig+0xe8>
 800584a:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <UART_SetConfig+0xb8>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005861 	.word	0x08005861
 8005854:	08005871 	.word	0x08005871
 8005858:	08005869 	.word	0x08005869
 800585c:	08005879 	.word	0x08005879
 8005860:	2301      	movs	r3, #1
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e0d6      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005868:	2302      	movs	r3, #2
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e0d2      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005870:	2304      	movs	r3, #4
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e0ce      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005878:	2308      	movs	r3, #8
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e0ca      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005880:	2310      	movs	r3, #16
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005886:	e0c6      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a7d      	ldr	r2, [pc, #500]	@ (8005a84 <UART_SetConfig+0x2ec>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d138      	bne.n	8005904 <UART_SetConfig+0x16c>
 8005892:	4b7b      	ldr	r3, [pc, #492]	@ (8005a80 <UART_SetConfig+0x2e8>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b0c      	cmp	r3, #12
 800589e:	d82d      	bhi.n	80058fc <UART_SetConfig+0x164>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <UART_SetConfig+0x110>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058dd 	.word	0x080058dd
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	080058fd 	.word	0x080058fd
 80058b4:	080058fd 	.word	0x080058fd
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	080058fd 	.word	0x080058fd
 80058c0:	080058fd 	.word	0x080058fd
 80058c4:	080058fd 	.word	0x080058fd
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058fd 	.word	0x080058fd
 80058d0:	080058fd 	.word	0x080058fd
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	080058f5 	.word	0x080058f5
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e2:	e098      	b.n	8005a16 <UART_SetConfig+0x27e>
 80058e4:	2302      	movs	r3, #2
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e094      	b.n	8005a16 <UART_SetConfig+0x27e>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e090      	b.n	8005a16 <UART_SetConfig+0x27e>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e08c      	b.n	8005a16 <UART_SetConfig+0x27e>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005902:	e088      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a5f      	ldr	r2, [pc, #380]	@ (8005a88 <UART_SetConfig+0x2f0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d125      	bne.n	800595a <UART_SetConfig+0x1c2>
 800590e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a80 <UART_SetConfig+0x2e8>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005914:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005918:	2b30      	cmp	r3, #48	@ 0x30
 800591a:	d016      	beq.n	800594a <UART_SetConfig+0x1b2>
 800591c:	2b30      	cmp	r3, #48	@ 0x30
 800591e:	d818      	bhi.n	8005952 <UART_SetConfig+0x1ba>
 8005920:	2b20      	cmp	r3, #32
 8005922:	d00a      	beq.n	800593a <UART_SetConfig+0x1a2>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d814      	bhi.n	8005952 <UART_SetConfig+0x1ba>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <UART_SetConfig+0x19a>
 800592c:	2b10      	cmp	r3, #16
 800592e:	d008      	beq.n	8005942 <UART_SetConfig+0x1aa>
 8005930:	e00f      	b.n	8005952 <UART_SetConfig+0x1ba>
 8005932:	2300      	movs	r3, #0
 8005934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005938:	e06d      	b.n	8005a16 <UART_SetConfig+0x27e>
 800593a:	2302      	movs	r3, #2
 800593c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005940:	e069      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005942:	2304      	movs	r3, #4
 8005944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005948:	e065      	b.n	8005a16 <UART_SetConfig+0x27e>
 800594a:	2308      	movs	r3, #8
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005950:	e061      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005952:	2310      	movs	r3, #16
 8005954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005958:	e05d      	b.n	8005a16 <UART_SetConfig+0x27e>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a4b      	ldr	r2, [pc, #300]	@ (8005a8c <UART_SetConfig+0x2f4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d125      	bne.n	80059b0 <UART_SetConfig+0x218>
 8005964:	4b46      	ldr	r3, [pc, #280]	@ (8005a80 <UART_SetConfig+0x2e8>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800596e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005970:	d016      	beq.n	80059a0 <UART_SetConfig+0x208>
 8005972:	2bc0      	cmp	r3, #192	@ 0xc0
 8005974:	d818      	bhi.n	80059a8 <UART_SetConfig+0x210>
 8005976:	2b80      	cmp	r3, #128	@ 0x80
 8005978:	d00a      	beq.n	8005990 <UART_SetConfig+0x1f8>
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d814      	bhi.n	80059a8 <UART_SetConfig+0x210>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <UART_SetConfig+0x1f0>
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d008      	beq.n	8005998 <UART_SetConfig+0x200>
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x210>
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e042      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e03e      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e03a      	b.n	8005a16 <UART_SetConfig+0x27e>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e036      	b.n	8005a16 <UART_SetConfig+0x27e>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e032      	b.n	8005a16 <UART_SetConfig+0x27e>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a30      	ldr	r2, [pc, #192]	@ (8005a78 <UART_SetConfig+0x2e0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d12a      	bne.n	8005a10 <UART_SetConfig+0x278>
 80059ba:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <UART_SetConfig+0x2e8>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059c8:	d01a      	beq.n	8005a00 <UART_SetConfig+0x268>
 80059ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059ce:	d81b      	bhi.n	8005a08 <UART_SetConfig+0x270>
 80059d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d4:	d00c      	beq.n	80059f0 <UART_SetConfig+0x258>
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059da:	d815      	bhi.n	8005a08 <UART_SetConfig+0x270>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <UART_SetConfig+0x250>
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e4:	d008      	beq.n	80059f8 <UART_SetConfig+0x260>
 80059e6:	e00f      	b.n	8005a08 <UART_SetConfig+0x270>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ee:	e012      	b.n	8005a16 <UART_SetConfig+0x27e>
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f6:	e00e      	b.n	8005a16 <UART_SetConfig+0x27e>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fe:	e00a      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a06:	e006      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0e:	e002      	b.n	8005a16 <UART_SetConfig+0x27e>
 8005a10:	2310      	movs	r3, #16
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <UART_SetConfig+0x2e0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	f040 80a8 	bne.w	8005b72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d834      	bhi.n	8005a94 <UART_SetConfig+0x2fc>
 8005a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a30 <UART_SetConfig+0x298>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a95 	.word	0x08005a95
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005a63 	.word	0x08005a63
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005a95 	.word	0x08005a95
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a6b 	.word	0x08005a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fe fe20 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005a58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a5a:	e021      	b.n	8005aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <UART_SetConfig+0x2f8>)
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a60:	e01e      	b.n	8005aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a62:	f7fe fdab 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005a66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a68:	e01a      	b.n	8005aa0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a70:	e016      	b.n	8005aa0 <UART_SetConfig+0x308>
 8005a72:	bf00      	nop
 8005a74:	cfff69f3 	.word	0xcfff69f3
 8005a78:	40008000 	.word	0x40008000
 8005a7c:	40013800 	.word	0x40013800
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40004400 	.word	0x40004400
 8005a88:	40004800 	.word	0x40004800
 8005a8c:	40004c00 	.word	0x40004c00
 8005a90:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 812a 	beq.w	8005cfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	4a9e      	ldr	r2, [pc, #632]	@ (8005d28 <UART_SetConfig+0x590>)
 8005aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d305      	bcc.n	8005ad8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d903      	bls.n	8005ae0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ade:	e10d      	b.n	8005cfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	60fa      	str	r2, [r7, #12]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	4a8e      	ldr	r2, [pc, #568]	@ (8005d28 <UART_SetConfig+0x590>)
 8005aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2200      	movs	r2, #0
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b02:	f7fa fbdd 	bl	80002c0 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	020b      	lsls	r3, r1, #8
 8005b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b1c:	0202      	lsls	r2, r0, #8
 8005b1e:	6979      	ldr	r1, [r7, #20]
 8005b20:	6849      	ldr	r1, [r1, #4]
 8005b22:	0849      	lsrs	r1, r1, #1
 8005b24:	2000      	movs	r0, #0
 8005b26:	460c      	mov	r4, r1
 8005b28:	4605      	mov	r5, r0
 8005b2a:	eb12 0804 	adds.w	r8, r2, r4
 8005b2e:	eb43 0905 	adc.w	r9, r3, r5
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	469a      	mov	sl, r3
 8005b3a:	4693      	mov	fp, r2
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	465b      	mov	r3, fp
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b56:	d308      	bcc.n	8005b6a <UART_SetConfig+0x3d2>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b5e:	d204      	bcs.n	8005b6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	60da      	str	r2, [r3, #12]
 8005b68:	e0c8      	b.n	8005cfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b70:	e0c4      	b.n	8005cfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7a:	d167      	bne.n	8005c4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d828      	bhi.n	8005bd6 <UART_SetConfig+0x43e>
 8005b84:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x3f4>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bd7 	.word	0x08005bd7
 8005b9c:	08005bc7 	.word	0x08005bc7
 8005ba0:	08005bd7 	.word	0x08005bd7
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005bd7 	.word	0x08005bd7
 8005bac:	08005bcf 	.word	0x08005bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb0:	f7fe fd72 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bb6:	e014      	b.n	8005be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb8:	f7fe fd84 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bbe:	e010      	b.n	8005be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d2c <UART_SetConfig+0x594>)
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bc4:	e00d      	b.n	8005be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc6:	f7fe fcf9 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bcc:	e009      	b.n	8005be2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e005      	b.n	8005be2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8089 	beq.w	8005cfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	4a4e      	ldr	r2, [pc, #312]	@ (8005d28 <UART_SetConfig+0x590>)
 8005bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfc:	005a      	lsls	r2, r3, #1
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d916      	bls.n	8005c44 <UART_SetConfig+0x4ac>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d212      	bcs.n	8005c44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	8bfa      	ldrh	r2, [r7, #30]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e05b      	b.n	8005cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c4a:	e057      	b.n	8005cfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d828      	bhi.n	8005ca6 <UART_SetConfig+0x50e>
 8005c54:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <UART_SetConfig+0x4c4>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c89 	.word	0x08005c89
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005ca7 	.word	0x08005ca7
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005ca7 	.word	0x08005ca7
 8005c74:	08005ca7 	.word	0x08005ca7
 8005c78:	08005ca7 	.word	0x08005ca7
 8005c7c:	08005c9f 	.word	0x08005c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe fd0a 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c86:	e014      	b.n	8005cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fe fd1c 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c8e:	e010      	b.n	8005cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c90:	4b26      	ldr	r3, [pc, #152]	@ (8005d2c <UART_SetConfig+0x594>)
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c94:	e00d      	b.n	8005cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c96:	f7fe fc91 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c9c:	e009      	b.n	8005cb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ca4:	e005      	b.n	8005cb2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d021      	beq.n	8005cfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <UART_SetConfig+0x590>)
 8005cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	441a      	add	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d909      	bls.n	8005cf6 <UART_SetConfig+0x55e>
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce8:	d205      	bcs.n	8005cf6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	e002      	b.n	8005cfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3730      	adds	r7, #48	@ 0x30
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d26:	bf00      	nop
 8005d28:	08007544 	.word	0x08007544
 8005d2c:	00f42400 	.word	0x00f42400

08005d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e2e:	d10a      	bne.n	8005e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b098      	sub	sp, #96	@ 0x60
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e84:	f7fb fba6 	bl	80015d4 <HAL_GetTick>
 8005e88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d12f      	bne.n	8005ef8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f88e 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d022      	beq.n	8005ef8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e6      	bne.n	8005eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e063      	b.n	8005fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d149      	bne.n	8005f9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f857 	bl	8005fc8 <UART_WaitOnFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d03c      	beq.n	8005f9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e6      	bne.n	8005f20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f72:	61fa      	str	r2, [r7, #28]
 8005f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	69b9      	ldr	r1, [r7, #24]
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e012      	b.n	8005fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3758      	adds	r7, #88	@ 0x58
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd8:	e04f      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d04b      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fb faf7 	bl	80015d4 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e04e      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d037      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b80      	cmp	r3, #128	@ 0x80
 800600e:	d034      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b40      	cmp	r3, #64	@ 0x40
 8006014:	d031      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d110      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2208      	movs	r2, #8
 800602a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f838 	bl	80060a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2208      	movs	r2, #8
 8006036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e029      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006054:	d111      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800605e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f81e 	bl	80060a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e00f      	b.n	800609a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4013      	ands	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	bf0c      	ite	eq
 800608a:	2301      	moveq	r3, #1
 800608c:	2300      	movne	r3, #0
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	429a      	cmp	r2, r3
 8006096:	d0a0      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b095      	sub	sp, #84	@ 0x54
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e6      	bne.n	80060aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3308      	adds	r3, #8
 80060fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e3      	bne.n	80060dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d118      	bne.n	800614e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	60bb      	str	r3, [r7, #8]
   return(result);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 0310 	bic.w	r3, r3, #16
 8006130:	647b      	str	r3, [r7, #68]	@ 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6979      	ldr	r1, [r7, #20]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	613b      	str	r3, [r7, #16]
   return(result);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e6      	bne.n	800611c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006162:	bf00      	nop
 8006164:	3754      	adds	r7, #84	@ 0x54
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <arm_fir_init_f32>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	9d04      	ldr	r5, [sp, #16]
 8006174:	8001      	strh	r1, [r0, #0]
 8006176:	3d01      	subs	r5, #1
 8006178:	440d      	add	r5, r1
 800617a:	6082      	str	r2, [r0, #8]
 800617c:	4604      	mov	r4, r0
 800617e:	00aa      	lsls	r2, r5, #2
 8006180:	4618      	mov	r0, r3
 8006182:	2100      	movs	r1, #0
 8006184:	f000 fba1 	bl	80068ca <memset>
 8006188:	6060      	str	r0, [r4, #4]
 800618a:	bd38      	pop	{r3, r4, r5, pc}

0800618c <arm_fir_f32>:
 800618c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006190:	ed2d 8b10 	vpush	{d8-d15}
 8006194:	b08b      	sub	sp, #44	@ 0x2c
 8006196:	f8b0 c000 	ldrh.w	ip, [r0]
 800619a:	9003      	str	r0, [sp, #12]
 800619c:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 80061a0:	f10c 4080 	add.w	r0, ip, #1073741824	@ 0x40000000
 80061a4:	3801      	subs	r0, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 80061ac:	08db      	lsrs	r3, r3, #3
 80061ae:	9402      	str	r4, [sp, #8]
 80061b0:	9500      	str	r5, [sp, #0]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	f000 81f6 	beq.w	80065a4 <arm_fir_f32+0x418>
 80061b8:	469e      	mov	lr, r3
 80061ba:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80061be:	4620      	mov	r0, r4
 80061c0:	015e      	lsls	r6, r3, #5
 80061c2:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 80061c6:	3020      	adds	r0, #32
 80061c8:	9605      	str	r6, [sp, #20]
 80061ca:	9406      	str	r4, [sp, #24]
 80061cc:	f00c 0a07 	and.w	sl, ip, #7
 80061d0:	9007      	str	r0, [sp, #28]
 80061d2:	f109 0b1c 	add.w	fp, r9, #28
 80061d6:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80061da:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 80061de:	e9cd 1205 	strd	r1, r2, [sp, #20]
 80061e2:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 80061e6:	4650      	mov	r0, sl
 80061e8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80061ec:	f8cd c020 	str.w	ip, [sp, #32]
 80061f0:	f101 0620 	add.w	r6, r1, #32
 80061f4:	3520      	adds	r5, #32
 80061f6:	f102 0420 	add.w	r4, r2, #32
 80061fa:	469c      	mov	ip, r3
 80061fc:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8006200:	f845 3c20 	str.w	r3, [r5, #-32]
 8006204:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8006208:	f845 3c1c 	str.w	r3, [r5, #-28]
 800620c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8006210:	f845 3c18 	str.w	r3, [r5, #-24]
 8006214:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8006218:	f845 3c14 	str.w	r3, [r5, #-20]
 800621c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8006220:	f845 3c10 	str.w	r3, [r5, #-16]
 8006224:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006228:	f845 3c0c 	str.w	r3, [r5, #-12]
 800622c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006230:	f845 3c08 	str.w	r3, [r5, #-8]
 8006234:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006238:	f845 3c04 	str.w	r3, [r5, #-4]
 800623c:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8006240:	ed1b 1a06 	vldr	s2, [fp, #-24]	@ 0xffffffe8
 8006244:	ed5b 0a05 	vldr	s1, [fp, #-20]	@ 0xffffffec
 8006248:	ed1b 0a04 	vldr	s0, [fp, #-16]
 800624c:	ed1b 8a03 	vldr	s16, [fp, #-12]
 8006250:	ed5b 1a02 	vldr	s3, [fp, #-8]
 8006254:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8006258:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 80064e4 <arm_fir_f32+0x358>
 800625c:	465a      	mov	r2, fp
 800625e:	f1bc 0f00 	cmp.w	ip, #0
 8006262:	f000 8207 	beq.w	8006674 <arm_fir_f32+0x4e8>
 8006266:	f10b 0120 	add.w	r1, fp, #32
 800626a:	eef0 ba66 	vmov.f32	s23, s13
 800626e:	eeb0 6a66 	vmov.f32	s12, s13
 8006272:	eeb0 9a66 	vmov.f32	s18, s13
 8006276:	eef0 9a66 	vmov.f32	s19, s13
 800627a:	eeb0 aa66 	vmov.f32	s20, s13
 800627e:	eef0 aa66 	vmov.f32	s21, s13
 8006282:	eeb0 ba66 	vmov.f32	s22, s13
 8006286:	460a      	mov	r2, r1
 8006288:	4653      	mov	r3, sl
 800628a:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800628e:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8006292:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8006296:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800629a:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800629e:	ed53 ca04 	vldr	s25, [r3, #-16]
 80062a2:	ed53 2a03 	vldr	s5, [r3, #-12]
 80062a6:	ed13 4a02 	vldr	s8, [r3, #-8]
 80062aa:	ed13 5a01 	vldr	s10, [r3, #-4]
 80062ae:	ee67 fa02 	vmul.f32	s31, s14, s4
 80062b2:	ee27 da01 	vmul.f32	s26, s14, s2
 80062b6:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 80062ba:	ee27 ca20 	vmul.f32	s24, s14, s1
 80062be:	ee27 3a00 	vmul.f32	s6, s14, s0
 80062c2:	ee67 3a08 	vmul.f32	s7, s14, s16
 80062c6:	ee67 5a21 	vmul.f32	s11, s14, s3
 80062ca:	ee27 fa28 	vmul.f32	s30, s14, s17
 80062ce:	ee67 7a24 	vmul.f32	s15, s14, s9
 80062d2:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80062d6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80062da:	ee6e fa81 	vmul.f32	s31, s29, s2
 80062de:	ee2e daa0 	vmul.f32	s26, s29, s1
 80062e2:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80062e6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80062ea:	ee73 9a29 	vadd.f32	s19, s6, s19
 80062ee:	ee2e ca80 	vmul.f32	s24, s29, s0
 80062f2:	ee2e 3a88 	vmul.f32	s6, s29, s16
 80062f6:	ee33 9a89 	vadd.f32	s18, s7, s18
 80062fa:	ee35 6a86 	vadd.f32	s12, s11, s12
 80062fe:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 8006302:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8006306:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800630a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630e:	ee24 faae 	vmul.f32	s30, s9, s29
 8006312:	ee6e ea82 	vmul.f32	s29, s29, s4
 8006316:	ee2e 7a20 	vmul.f32	s14, s28, s1
 800631a:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800631e:	ed52 0a05 	vldr	s1, [r2, #-20]	@ 0xffffffec
 8006322:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8006326:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800632a:	ee2e da00 	vmul.f32	s26, s28, s0
 800632e:	ee2e ca08 	vmul.f32	s24, s28, s16
 8006332:	ee73 9a29 	vadd.f32	s19, s6, s19
 8006336:	ee33 9a89 	vadd.f32	s18, s7, s18
 800633a:	ee2e 3a21 	vmul.f32	s6, s28, s3
 800633e:	ee6e 3a28 	vmul.f32	s7, s28, s17
 8006342:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006346:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800634a:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800634e:	ee22 fa0e 	vmul.f32	s30, s4, s28
 8006352:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8006356:	ee2e ea01 	vmul.f32	s28, s28, s2
 800635a:	ee6d 6a80 	vmul.f32	s13, s27, s0
 800635e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8006362:	ed12 0a04 	vldr	s0, [r2, #-16]
 8006366:	ee2d da88 	vmul.f32	s26, s27, s16
 800636a:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800636e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8006372:	ee73 9a29 	vadd.f32	s19, s6, s19
 8006376:	ee2d caa1 	vmul.f32	s24, s27, s3
 800637a:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800637e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8006382:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006386:	ee64 3aad 	vmul.f32	s7, s9, s27
 800638a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800638e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8006392:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8006396:	ee21 fa2d 	vmul.f32	s30, s2, s27
 800639a:	ee6d daa0 	vmul.f32	s27, s27, s1
 800639e:	ee6c fa88 	vmul.f32	s31, s25, s16
 80063a2:	ee36 ba8b 	vadd.f32	s22, s13, s22
 80063a6:	ed12 8a03 	vldr	s16, [r2, #-12]
 80063aa:	ee3d da2a 	vadd.f32	s26, s26, s21
 80063ae:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80063b2:	ee6c aaa1 	vmul.f32	s21, s25, s3
 80063b6:	ee2c caa8 	vmul.f32	s24, s25, s17
 80063ba:	ee73 9a29 	vadd.f32	s19, s6, s19
 80063be:	ee33 9a89 	vadd.f32	s18, s7, s18
 80063c2:	ee24 3aac 	vmul.f32	s6, s9, s25
 80063c6:	ee62 3a2c 	vmul.f32	s7, s4, s25
 80063ca:	ee35 6a86 	vadd.f32	s12, s11, s12
 80063ce:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80063d2:	ee61 5a2c 	vmul.f32	s11, s2, s25
 80063d6:	ee20 faac 	vmul.f32	s30, s1, s25
 80063da:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80063de:	ee6c ca80 	vmul.f32	s25, s25, s0
 80063e2:	ee62 eaa1 	vmul.f32	s29, s5, s3
 80063e6:	ee3a da8d 	vadd.f32	s26, s21, s26
 80063ea:	ed52 1a02 	vldr	s3, [r2, #-8]
 80063ee:	ee62 aaa8 	vmul.f32	s21, s5, s17
 80063f2:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80063f6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80063fa:	ee73 9a29 	vadd.f32	s19, s6, s19
 80063fe:	ee24 caa2 	vmul.f32	s24, s9, s5
 8006402:	ee22 3a22 	vmul.f32	s6, s4, s5
 8006406:	ee33 9a89 	vadd.f32	s18, s7, s18
 800640a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800640e:	ee61 3a22 	vmul.f32	s7, s2, s5
 8006412:	ee60 5aa2 	vmul.f32	s11, s1, s5
 8006416:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800641a:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800641e:	ee20 fa22 	vmul.f32	s30, s0, s5
 8006422:	ee62 2a88 	vmul.f32	s5, s5, s16
 8006426:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800642a:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800642e:	ee24 ba28 	vmul.f32	s22, s8, s17
 8006432:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8006436:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800643a:	ee24 da84 	vmul.f32	s26, s9, s8
 800643e:	ee22 ca04 	vmul.f32	s24, s4, s8
 8006442:	ee73 9a29 	vadd.f32	s19, s6, s19
 8006446:	ee33 9a89 	vadd.f32	s18, s7, s18
 800644a:	ee21 3a04 	vmul.f32	s6, s2, s8
 800644e:	ee60 3a84 	vmul.f32	s7, s1, s8
 8006452:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006456:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800645a:	ee60 5a04 	vmul.f32	s11, s0, s8
 800645e:	ee28 7a04 	vmul.f32	s14, s16, s8
 8006462:	ee64 6a21 	vmul.f32	s13, s8, s3
 8006466:	ed52 8a01 	vldr	s17, [r2, #-4]
 800646a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800646e:	ee33 9a89 	vadd.f32	s18, s7, s18
 8006472:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006476:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800647a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800647e:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8006482:	ee64 4a85 	vmul.f32	s9, s9, s10
 8006486:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800648a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800648e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8006492:	ee61 2a05 	vmul.f32	s5, s2, s10
 8006496:	ee20 3a85 	vmul.f32	s6, s1, s10
 800649a:	ee60 3a05 	vmul.f32	s7, s0, s10
 800649e:	ee68 5a05 	vmul.f32	s11, s16, s10
 80064a2:	ee61 ba85 	vmul.f32	s23, s3, s10
 80064a6:	ee65 7a28 	vmul.f32	s15, s10, s17
 80064aa:	3320      	adds	r3, #32
 80064ac:	429f      	cmp	r7, r3
 80064ae:	ee34 ba8b 	vadd.f32	s22, s9, s22
 80064b2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80064b6:	ee32 aa8a 	vadd.f32	s20, s5, s20
 80064ba:	ee73 9a29 	vadd.f32	s19, s6, s19
 80064be:	ee33 9a89 	vadd.f32	s18, s7, s18
 80064c2:	ee35 6a86 	vadd.f32	s12, s11, s12
 80064c6:	ee7b ba87 	vadd.f32	s23, s23, s14
 80064ca:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80064ce:	f102 0220 	add.w	r2, r2, #32
 80064d2:	f47f aeda 	bne.w	800628a <arm_fir_f32+0xfe>
 80064d6:	eb0b 0208 	add.w	r2, fp, r8
 80064da:	46cb      	mov	fp, r9
 80064dc:	b3c0      	cbz	r0, 8006550 <arm_fir_f32+0x3c4>
 80064de:	4603      	mov	r3, r0
 80064e0:	e004      	b.n	80064ec <arm_fir_f32+0x360>
 80064e2:	bf00      	nop
 80064e4:	00000000 	.word	0x00000000
 80064e8:	eef0 8a65 	vmov.f32	s17, s11
 80064ec:	ecfb 7a01 	vldmia	fp!, {s15}
 80064f0:	ecf2 5a01 	vldmia	r2!, {s11}
 80064f4:	ee27 2a82 	vmul.f32	s4, s15, s4
 80064f8:	ee67 2a81 	vmul.f32	s5, s15, s2
 80064fc:	ee27 3aa0 	vmul.f32	s6, s15, s1
 8006500:	ee67 3a80 	vmul.f32	s7, s15, s0
 8006504:	ee27 4a88 	vmul.f32	s8, s15, s16
 8006508:	ee67 4aa1 	vmul.f32	s9, s15, s3
 800650c:	ee28 5aa7 	vmul.f32	s10, s17, s15
 8006510:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006514:	3b01      	subs	r3, #1
 8006516:	ee3b ba02 	vadd.f32	s22, s22, s4
 800651a:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800651e:	eeb0 2a41 	vmov.f32	s4, s2
 8006522:	ee3a aa03 	vadd.f32	s20, s20, s6
 8006526:	eeb0 1a60 	vmov.f32	s2, s1
 800652a:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800652e:	eef0 0a40 	vmov.f32	s1, s0
 8006532:	ee39 9a04 	vadd.f32	s18, s18, s8
 8006536:	eeb0 0a48 	vmov.f32	s0, s16
 800653a:	ee36 6a24 	vadd.f32	s12, s12, s9
 800653e:	eeb0 8a61 	vmov.f32	s16, s3
 8006542:	ee7b ba85 	vadd.f32	s23, s23, s10
 8006546:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800654a:	eef0 1a68 	vmov.f32	s3, s17
 800654e:	d1cb      	bne.n	80064e8 <arm_fir_f32+0x35c>
 8006550:	f1be 0e01 	subs.w	lr, lr, #1
 8006554:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 8006558:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800655c:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 8006560:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 8006564:	ed04 9a04 	vstr	s18, [r4, #-16]
 8006568:	ed04 6a03 	vstr	s12, [r4, #-12]
 800656c:	ed44 ba02 	vstr	s23, [r4, #-8]
 8006570:	ed44 6a01 	vstr	s13, [r4, #-4]
 8006574:	f106 0620 	add.w	r6, r6, #32
 8006578:	f105 0520 	add.w	r5, r5, #32
 800657c:	f104 0420 	add.w	r4, r4, #32
 8006580:	468b      	mov	fp, r1
 8006582:	f47f ae3b 	bne.w	80061fc <arm_fir_f32+0x70>
 8006586:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800658a:	e9dd c908 	ldrd	ip, r9, [sp, #32]
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	9800      	ldr	r0, [sp, #0]
 8006592:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8006596:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 800659a:	eb09 1943 	add.w	r9, r9, r3, lsl #5
 800659e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	f013 0607 	ands.w	r6, r3, #7
 80065aa:	d026      	beq.n	80065fa <arm_fir_f32+0x46e>
 80065ac:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80065b0:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80065b4:	4633      	mov	r3, r6
 80065b6:	9f00      	ldr	r7, [sp, #0]
 80065b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80065bc:	4666      	mov	r6, ip
 80065be:	464d      	mov	r5, r9
 80065c0:	469c      	mov	ip, r3
 80065c2:	f851 3b04 	ldr.w	r3, [r1], #4
 80065c6:	f847 3b04 	str.w	r3, [r7], #4
 80065ca:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 80064e4 <arm_fir_f32+0x358>
 80065ce:	b166      	cbz	r6, 80065ea <arm_fir_f32+0x45e>
 80065d0:	4633      	mov	r3, r6
 80065d2:	4644      	mov	r4, r8
 80065d4:	4628      	mov	r0, r5
 80065d6:	ecf0 7a01 	vldmia	r0!, {s15}
 80065da:	ecf4 6a01 	vldmia	r4!, {s13}
 80065de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80065e2:	3b01      	subs	r3, #1
 80065e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065e8:	d1f5      	bne.n	80065d6 <arm_fir_f32+0x44a>
 80065ea:	4561      	cmp	r1, ip
 80065ec:	eca2 7a01 	vstmia	r2!, {s14}
 80065f0:	f105 0504 	add.w	r5, r5, #4
 80065f4:	d1e5      	bne.n	80065c2 <arm_fir_f32+0x436>
 80065f6:	46b4      	mov	ip, r6
 80065f8:	44f1      	add	r9, lr
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006600:	ea5f 059c 	movs.w	r5, ip, lsr #2
 8006604:	685c      	ldr	r4, [r3, #4]
 8006606:	d01e      	beq.n	8006646 <arm_fir_f32+0x4ba>
 8006608:	f109 0210 	add.w	r2, r9, #16
 800660c:	f104 0310 	add.w	r3, r4, #16
 8006610:	4629      	mov	r1, r5
 8006612:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8006616:	f843 0c10 	str.w	r0, [r3, #-16]
 800661a:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800661e:	f843 0c0c 	str.w	r0, [r3, #-12]
 8006622:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8006626:	f843 0c08 	str.w	r0, [r3, #-8]
 800662a:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800662e:	f843 0c04 	str.w	r0, [r3, #-4]
 8006632:	3901      	subs	r1, #1
 8006634:	f102 0210 	add.w	r2, r2, #16
 8006638:	f103 0310 	add.w	r3, r3, #16
 800663c:	d1e9      	bne.n	8006612 <arm_fir_f32+0x486>
 800663e:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 8006642:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8006646:	f01c 0c03 	ands.w	ip, ip, #3
 800664a:	d00e      	beq.n	800666a <arm_fir_f32+0x4de>
 800664c:	f8d9 3000 	ldr.w	r3, [r9]
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	f1bc 0c01 	subs.w	ip, ip, #1
 8006656:	d008      	beq.n	800666a <arm_fir_f32+0x4de>
 8006658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800665c:	6063      	str	r3, [r4, #4]
 800665e:	f1bc 0f01 	cmp.w	ip, #1
 8006662:	bf1c      	itt	ne
 8006664:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8006668:	60a3      	strne	r3, [r4, #8]
 800666a:	b00b      	add	sp, #44	@ 0x2c
 800666c:	ecbd 8b10 	vpop	{d8-d15}
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006678:	eef0 ba66 	vmov.f32	s23, s13
 800667c:	eeb0 6a66 	vmov.f32	s12, s13
 8006680:	eeb0 9a66 	vmov.f32	s18, s13
 8006684:	eef0 9a66 	vmov.f32	s19, s13
 8006688:	eeb0 aa66 	vmov.f32	s20, s13
 800668c:	eef0 aa66 	vmov.f32	s21, s13
 8006690:	eeb0 ba66 	vmov.f32	s22, s13
 8006694:	f102 0120 	add.w	r1, r2, #32
 8006698:	e720      	b.n	80064dc <arm_fir_f32+0x350>
 800669a:	bf00      	nop

0800669c <std>:
 800669c:	2300      	movs	r3, #0
 800669e:	b510      	push	{r4, lr}
 80066a0:	4604      	mov	r4, r0
 80066a2:	e9c0 3300 	strd	r3, r3, [r0]
 80066a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066aa:	6083      	str	r3, [r0, #8]
 80066ac:	8181      	strh	r1, [r0, #12]
 80066ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80066b0:	81c2      	strh	r2, [r0, #14]
 80066b2:	6183      	str	r3, [r0, #24]
 80066b4:	4619      	mov	r1, r3
 80066b6:	2208      	movs	r2, #8
 80066b8:	305c      	adds	r0, #92	@ 0x5c
 80066ba:	f000 f906 	bl	80068ca <memset>
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <std+0x58>)
 80066c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80066c2:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <std+0x5c>)
 80066c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066c6:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <std+0x60>)
 80066c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x64>)
 80066cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <std+0x68>)
 80066d0:	6224      	str	r4, [r4, #32]
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d006      	beq.n	80066e4 <std+0x48>
 80066d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066da:	4294      	cmp	r4, r2
 80066dc:	d002      	beq.n	80066e4 <std+0x48>
 80066de:	33d0      	adds	r3, #208	@ 0xd0
 80066e0:	429c      	cmp	r4, r3
 80066e2:	d105      	bne.n	80066f0 <std+0x54>
 80066e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f000 b966 	b.w	80069bc <__retarget_lock_init_recursive>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	08006845 	.word	0x08006845
 80066f8:	08006867 	.word	0x08006867
 80066fc:	0800689f 	.word	0x0800689f
 8006700:	080068c3 	.word	0x080068c3
 8006704:	2000065c 	.word	0x2000065c

08006708 <stdio_exit_handler>:
 8006708:	4a02      	ldr	r2, [pc, #8]	@ (8006714 <stdio_exit_handler+0xc>)
 800670a:	4903      	ldr	r1, [pc, #12]	@ (8006718 <stdio_exit_handler+0x10>)
 800670c:	4803      	ldr	r0, [pc, #12]	@ (800671c <stdio_exit_handler+0x14>)
 800670e:	f000 b869 	b.w	80067e4 <_fwalk_sglue>
 8006712:	bf00      	nop
 8006714:	20000098 	.word	0x20000098
 8006718:	08007259 	.word	0x08007259
 800671c:	200000a8 	.word	0x200000a8

08006720 <cleanup_stdio>:
 8006720:	6841      	ldr	r1, [r0, #4]
 8006722:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <cleanup_stdio+0x34>)
 8006724:	4299      	cmp	r1, r3
 8006726:	b510      	push	{r4, lr}
 8006728:	4604      	mov	r4, r0
 800672a:	d001      	beq.n	8006730 <cleanup_stdio+0x10>
 800672c:	f000 fd94 	bl	8007258 <_fflush_r>
 8006730:	68a1      	ldr	r1, [r4, #8]
 8006732:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <cleanup_stdio+0x38>)
 8006734:	4299      	cmp	r1, r3
 8006736:	d002      	beq.n	800673e <cleanup_stdio+0x1e>
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fd8d 	bl	8007258 <_fflush_r>
 800673e:	68e1      	ldr	r1, [r4, #12]
 8006740:	4b06      	ldr	r3, [pc, #24]	@ (800675c <cleanup_stdio+0x3c>)
 8006742:	4299      	cmp	r1, r3
 8006744:	d004      	beq.n	8006750 <cleanup_stdio+0x30>
 8006746:	4620      	mov	r0, r4
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	f000 bd84 	b.w	8007258 <_fflush_r>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	2000065c 	.word	0x2000065c
 8006758:	200006c4 	.word	0x200006c4
 800675c:	2000072c 	.word	0x2000072c

08006760 <global_stdio_init.part.0>:
 8006760:	b510      	push	{r4, lr}
 8006762:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <global_stdio_init.part.0+0x30>)
 8006764:	4c0b      	ldr	r4, [pc, #44]	@ (8006794 <global_stdio_init.part.0+0x34>)
 8006766:	4a0c      	ldr	r2, [pc, #48]	@ (8006798 <global_stdio_init.part.0+0x38>)
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	4620      	mov	r0, r4
 800676c:	2200      	movs	r2, #0
 800676e:	2104      	movs	r1, #4
 8006770:	f7ff ff94 	bl	800669c <std>
 8006774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006778:	2201      	movs	r2, #1
 800677a:	2109      	movs	r1, #9
 800677c:	f7ff ff8e 	bl	800669c <std>
 8006780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006784:	2202      	movs	r2, #2
 8006786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800678a:	2112      	movs	r1, #18
 800678c:	f7ff bf86 	b.w	800669c <std>
 8006790:	20000794 	.word	0x20000794
 8006794:	2000065c 	.word	0x2000065c
 8006798:	08006709 	.word	0x08006709

0800679c <__sfp_lock_acquire>:
 800679c:	4801      	ldr	r0, [pc, #4]	@ (80067a4 <__sfp_lock_acquire+0x8>)
 800679e:	f000 b90e 	b.w	80069be <__retarget_lock_acquire_recursive>
 80067a2:	bf00      	nop
 80067a4:	2000079d 	.word	0x2000079d

080067a8 <__sfp_lock_release>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__sfp_lock_release+0x8>)
 80067aa:	f000 b909 	b.w	80069c0 <__retarget_lock_release_recursive>
 80067ae:	bf00      	nop
 80067b0:	2000079d 	.word	0x2000079d

080067b4 <__sinit>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4604      	mov	r4, r0
 80067b8:	f7ff fff0 	bl	800679c <__sfp_lock_acquire>
 80067bc:	6a23      	ldr	r3, [r4, #32]
 80067be:	b11b      	cbz	r3, 80067c8 <__sinit+0x14>
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f7ff bff0 	b.w	80067a8 <__sfp_lock_release>
 80067c8:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <__sinit+0x28>)
 80067ca:	6223      	str	r3, [r4, #32]
 80067cc:	4b04      	ldr	r3, [pc, #16]	@ (80067e0 <__sinit+0x2c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f5      	bne.n	80067c0 <__sinit+0xc>
 80067d4:	f7ff ffc4 	bl	8006760 <global_stdio_init.part.0>
 80067d8:	e7f2      	b.n	80067c0 <__sinit+0xc>
 80067da:	bf00      	nop
 80067dc:	08006721 	.word	0x08006721
 80067e0:	20000794 	.word	0x20000794

080067e4 <_fwalk_sglue>:
 80067e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e8:	4607      	mov	r7, r0
 80067ea:	4688      	mov	r8, r1
 80067ec:	4614      	mov	r4, r2
 80067ee:	2600      	movs	r6, #0
 80067f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067f4:	f1b9 0901 	subs.w	r9, r9, #1
 80067f8:	d505      	bpl.n	8006806 <_fwalk_sglue+0x22>
 80067fa:	6824      	ldr	r4, [r4, #0]
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	d1f7      	bne.n	80067f0 <_fwalk_sglue+0xc>
 8006800:	4630      	mov	r0, r6
 8006802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d907      	bls.n	800681c <_fwalk_sglue+0x38>
 800680c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006810:	3301      	adds	r3, #1
 8006812:	d003      	beq.n	800681c <_fwalk_sglue+0x38>
 8006814:	4629      	mov	r1, r5
 8006816:	4638      	mov	r0, r7
 8006818:	47c0      	blx	r8
 800681a:	4306      	orrs	r6, r0
 800681c:	3568      	adds	r5, #104	@ 0x68
 800681e:	e7e9      	b.n	80067f4 <_fwalk_sglue+0x10>

08006820 <iprintf>:
 8006820:	b40f      	push	{r0, r1, r2, r3}
 8006822:	b507      	push	{r0, r1, r2, lr}
 8006824:	4906      	ldr	r1, [pc, #24]	@ (8006840 <iprintf+0x20>)
 8006826:	ab04      	add	r3, sp, #16
 8006828:	6808      	ldr	r0, [r1, #0]
 800682a:	f853 2b04 	ldr.w	r2, [r3], #4
 800682e:	6881      	ldr	r1, [r0, #8]
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	f000 f9e9 	bl	8006c08 <_vfiprintf_r>
 8006836:	b003      	add	sp, #12
 8006838:	f85d eb04 	ldr.w	lr, [sp], #4
 800683c:	b004      	add	sp, #16
 800683e:	4770      	bx	lr
 8006840:	200000a4 	.word	0x200000a4

08006844 <__sread>:
 8006844:	b510      	push	{r4, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	f000 f868 	bl	8006920 <_read_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	bfab      	itete	ge
 8006854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006856:	89a3      	ldrhlt	r3, [r4, #12]
 8006858:	181b      	addge	r3, r3, r0
 800685a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800685e:	bfac      	ite	ge
 8006860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006862:	81a3      	strhlt	r3, [r4, #12]
 8006864:	bd10      	pop	{r4, pc}

08006866 <__swrite>:
 8006866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686a:	461f      	mov	r7, r3
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	05db      	lsls	r3, r3, #23
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	4616      	mov	r6, r2
 8006876:	d505      	bpl.n	8006884 <__swrite+0x1e>
 8006878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687c:	2302      	movs	r3, #2
 800687e:	2200      	movs	r2, #0
 8006880:	f000 f83c 	bl	80068fc <_lseek_r>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800688a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	4632      	mov	r2, r6
 8006892:	463b      	mov	r3, r7
 8006894:	4628      	mov	r0, r5
 8006896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800689a:	f000 b853 	b.w	8006944 <_write_r>

0800689e <__sseek>:
 800689e:	b510      	push	{r4, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a6:	f000 f829 	bl	80068fc <_lseek_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	bf15      	itete	ne
 80068b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068ba:	81a3      	strheq	r3, [r4, #12]
 80068bc:	bf18      	it	ne
 80068be:	81a3      	strhne	r3, [r4, #12]
 80068c0:	bd10      	pop	{r4, pc}

080068c2 <__sclose>:
 80068c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c6:	f000 b809 	b.w	80068dc <_close_r>

080068ca <memset>:
 80068ca:	4402      	add	r2, r0
 80068cc:	4603      	mov	r3, r0
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d100      	bne.n	80068d4 <memset+0xa>
 80068d2:	4770      	bx	lr
 80068d4:	f803 1b01 	strb.w	r1, [r3], #1
 80068d8:	e7f9      	b.n	80068ce <memset+0x4>
	...

080068dc <_close_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	@ (80068f8 <_close_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa fb77 	bl	8000fda <_close>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_close_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_close_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20000798 	.word	0x20000798

080068fc <_lseek_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	@ (800691c <_lseek_r+0x20>)
 8006900:	4604      	mov	r4, r0
 8006902:	4608      	mov	r0, r1
 8006904:	4611      	mov	r1, r2
 8006906:	2200      	movs	r2, #0
 8006908:	602a      	str	r2, [r5, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	f7fa fb8c 	bl	8001028 <_lseek>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_lseek_r+0x1e>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_lseek_r+0x1e>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20000798 	.word	0x20000798

08006920 <_read_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d07      	ldr	r5, [pc, #28]	@ (8006940 <_read_r+0x20>)
 8006924:	4604      	mov	r4, r0
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	2200      	movs	r2, #0
 800692c:	602a      	str	r2, [r5, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fa fb1a 	bl	8000f68 <_read>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_read_r+0x1e>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_read_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20000798 	.word	0x20000798

08006944 <_write_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d07      	ldr	r5, [pc, #28]	@ (8006964 <_write_r+0x20>)
 8006948:	4604      	mov	r4, r0
 800694a:	4608      	mov	r0, r1
 800694c:	4611      	mov	r1, r2
 800694e:	2200      	movs	r2, #0
 8006950:	602a      	str	r2, [r5, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f7fa fb25 	bl	8000fa2 <_write>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_write_r+0x1e>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_write_r+0x1e>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000798 	.word	0x20000798

08006968 <__errno>:
 8006968:	4b01      	ldr	r3, [pc, #4]	@ (8006970 <__errno+0x8>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	200000a4 	.word	0x200000a4

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	4d0d      	ldr	r5, [pc, #52]	@ (80069ac <__libc_init_array+0x38>)
 8006978:	4c0d      	ldr	r4, [pc, #52]	@ (80069b0 <__libc_init_array+0x3c>)
 800697a:	1b64      	subs	r4, r4, r5
 800697c:	10a4      	asrs	r4, r4, #2
 800697e:	2600      	movs	r6, #0
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	4d0b      	ldr	r5, [pc, #44]	@ (80069b4 <__libc_init_array+0x40>)
 8006986:	4c0c      	ldr	r4, [pc, #48]	@ (80069b8 <__libc_init_array+0x44>)
 8006988:	f000 fdb6 	bl	80074f8 <_init>
 800698c:	1b64      	subs	r4, r4, r5
 800698e:	10a4      	asrs	r4, r4, #2
 8006990:	2600      	movs	r6, #0
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	08007598 	.word	0x08007598
 80069b0:	08007598 	.word	0x08007598
 80069b4:	08007598 	.word	0x08007598
 80069b8:	0800759c 	.word	0x0800759c

080069bc <__retarget_lock_init_recursive>:
 80069bc:	4770      	bx	lr

080069be <__retarget_lock_acquire_recursive>:
 80069be:	4770      	bx	lr

080069c0 <__retarget_lock_release_recursive>:
 80069c0:	4770      	bx	lr
	...

080069c4 <_free_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4605      	mov	r5, r0
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d041      	beq.n	8006a50 <_free_r+0x8c>
 80069cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d0:	1f0c      	subs	r4, r1, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bfb8      	it	lt
 80069d6:	18e4      	addlt	r4, r4, r3
 80069d8:	f000 f8e0 	bl	8006b9c <__malloc_lock>
 80069dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a54 <_free_r+0x90>)
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	b933      	cbnz	r3, 80069f0 <_free_r+0x2c>
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	6014      	str	r4, [r2, #0]
 80069e6:	4628      	mov	r0, r5
 80069e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ec:	f000 b8dc 	b.w	8006ba8 <__malloc_unlock>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d908      	bls.n	8006a06 <_free_r+0x42>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	1821      	adds	r1, r4, r0
 80069f8:	428b      	cmp	r3, r1
 80069fa:	bf01      	itttt	eq
 80069fc:	6819      	ldreq	r1, [r3, #0]
 80069fe:	685b      	ldreq	r3, [r3, #4]
 8006a00:	1809      	addeq	r1, r1, r0
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	e7ed      	b.n	80069e2 <_free_r+0x1e>
 8006a06:	461a      	mov	r2, r3
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b10b      	cbz	r3, 8006a10 <_free_r+0x4c>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d9fa      	bls.n	8006a06 <_free_r+0x42>
 8006a10:	6811      	ldr	r1, [r2, #0]
 8006a12:	1850      	adds	r0, r2, r1
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d10b      	bne.n	8006a30 <_free_r+0x6c>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	4401      	add	r1, r0
 8006a1c:	1850      	adds	r0, r2, r1
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	6011      	str	r1, [r2, #0]
 8006a22:	d1e0      	bne.n	80069e6 <_free_r+0x22>
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	6053      	str	r3, [r2, #4]
 8006a2a:	4408      	add	r0, r1
 8006a2c:	6010      	str	r0, [r2, #0]
 8006a2e:	e7da      	b.n	80069e6 <_free_r+0x22>
 8006a30:	d902      	bls.n	8006a38 <_free_r+0x74>
 8006a32:	230c      	movs	r3, #12
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	e7d6      	b.n	80069e6 <_free_r+0x22>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	1821      	adds	r1, r4, r0
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	bf04      	itt	eq
 8006a40:	6819      	ldreq	r1, [r3, #0]
 8006a42:	685b      	ldreq	r3, [r3, #4]
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	bf04      	itt	eq
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	6054      	str	r4, [r2, #4]
 8006a4e:	e7ca      	b.n	80069e6 <_free_r+0x22>
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	200007a4 	.word	0x200007a4

08006a58 <sbrk_aligned>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a98 <sbrk_aligned+0x40>)
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	6831      	ldr	r1, [r6, #0]
 8006a60:	4605      	mov	r5, r0
 8006a62:	b911      	cbnz	r1, 8006a6a <sbrk_aligned+0x12>
 8006a64:	f000 fcb4 	bl	80073d0 <_sbrk_r>
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 fcaf 	bl	80073d0 <_sbrk_r>
 8006a72:	1c43      	adds	r3, r0, #1
 8006a74:	d103      	bne.n	8006a7e <sbrk_aligned+0x26>
 8006a76:	f04f 34ff 	mov.w	r4, #4294967295
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	bd70      	pop	{r4, r5, r6, pc}
 8006a7e:	1cc4      	adds	r4, r0, #3
 8006a80:	f024 0403 	bic.w	r4, r4, #3
 8006a84:	42a0      	cmp	r0, r4
 8006a86:	d0f8      	beq.n	8006a7a <sbrk_aligned+0x22>
 8006a88:	1a21      	subs	r1, r4, r0
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f000 fca0 	bl	80073d0 <_sbrk_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1f2      	bne.n	8006a7a <sbrk_aligned+0x22>
 8006a94:	e7ef      	b.n	8006a76 <sbrk_aligned+0x1e>
 8006a96:	bf00      	nop
 8006a98:	200007a0 	.word	0x200007a0

08006a9c <_malloc_r>:
 8006a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	1ccd      	adds	r5, r1, #3
 8006aa2:	f025 0503 	bic.w	r5, r5, #3
 8006aa6:	3508      	adds	r5, #8
 8006aa8:	2d0c      	cmp	r5, #12
 8006aaa:	bf38      	it	cc
 8006aac:	250c      	movcc	r5, #12
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	db01      	blt.n	8006ab8 <_malloc_r+0x1c>
 8006ab4:	42a9      	cmp	r1, r5
 8006ab6:	d904      	bls.n	8006ac2 <_malloc_r+0x26>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	2000      	movs	r0, #0
 8006abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b98 <_malloc_r+0xfc>
 8006ac6:	f000 f869 	bl	8006b9c <__malloc_lock>
 8006aca:	f8d8 3000 	ldr.w	r3, [r8]
 8006ace:	461c      	mov	r4, r3
 8006ad0:	bb44      	cbnz	r4, 8006b24 <_malloc_r+0x88>
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff ffbf 	bl	8006a58 <sbrk_aligned>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	4604      	mov	r4, r0
 8006ade:	d158      	bne.n	8006b92 <_malloc_r+0xf6>
 8006ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ae4:	4627      	mov	r7, r4
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	d143      	bne.n	8006b72 <_malloc_r+0xd6>
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	d04b      	beq.n	8006b86 <_malloc_r+0xea>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	4639      	mov	r1, r7
 8006af2:	4630      	mov	r0, r6
 8006af4:	eb04 0903 	add.w	r9, r4, r3
 8006af8:	f000 fc6a 	bl	80073d0 <_sbrk_r>
 8006afc:	4581      	cmp	r9, r0
 8006afe:	d142      	bne.n	8006b86 <_malloc_r+0xea>
 8006b00:	6821      	ldr	r1, [r4, #0]
 8006b02:	1a6d      	subs	r5, r5, r1
 8006b04:	4629      	mov	r1, r5
 8006b06:	4630      	mov	r0, r6
 8006b08:	f7ff ffa6 	bl	8006a58 <sbrk_aligned>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d03a      	beq.n	8006b86 <_malloc_r+0xea>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	442b      	add	r3, r5
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	bb62      	cbnz	r2, 8006b78 <_malloc_r+0xdc>
 8006b1e:	f8c8 7000 	str.w	r7, [r8]
 8006b22:	e00f      	b.n	8006b44 <_malloc_r+0xa8>
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	1b52      	subs	r2, r2, r5
 8006b28:	d420      	bmi.n	8006b6c <_malloc_r+0xd0>
 8006b2a:	2a0b      	cmp	r2, #11
 8006b2c:	d917      	bls.n	8006b5e <_malloc_r+0xc2>
 8006b2e:	1961      	adds	r1, r4, r5
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	6025      	str	r5, [r4, #0]
 8006b34:	bf18      	it	ne
 8006b36:	6059      	strne	r1, [r3, #4]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	bf08      	it	eq
 8006b3c:	f8c8 1000 	streq.w	r1, [r8]
 8006b40:	5162      	str	r2, [r4, r5]
 8006b42:	604b      	str	r3, [r1, #4]
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f82f 	bl	8006ba8 <__malloc_unlock>
 8006b4a:	f104 000b 	add.w	r0, r4, #11
 8006b4e:	1d23      	adds	r3, r4, #4
 8006b50:	f020 0007 	bic.w	r0, r0, #7
 8006b54:	1ac2      	subs	r2, r0, r3
 8006b56:	bf1c      	itt	ne
 8006b58:	1a1b      	subne	r3, r3, r0
 8006b5a:	50a3      	strne	r3, [r4, r2]
 8006b5c:	e7af      	b.n	8006abe <_malloc_r+0x22>
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	bf0c      	ite	eq
 8006b64:	f8c8 2000 	streq.w	r2, [r8]
 8006b68:	605a      	strne	r2, [r3, #4]
 8006b6a:	e7eb      	b.n	8006b44 <_malloc_r+0xa8>
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	6864      	ldr	r4, [r4, #4]
 8006b70:	e7ae      	b.n	8006ad0 <_malloc_r+0x34>
 8006b72:	463c      	mov	r4, r7
 8006b74:	687f      	ldr	r7, [r7, #4]
 8006b76:	e7b6      	b.n	8006ae6 <_malloc_r+0x4a>
 8006b78:	461a      	mov	r2, r3
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d1fb      	bne.n	8006b78 <_malloc_r+0xdc>
 8006b80:	2300      	movs	r3, #0
 8006b82:	6053      	str	r3, [r2, #4]
 8006b84:	e7de      	b.n	8006b44 <_malloc_r+0xa8>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f80c 	bl	8006ba8 <__malloc_unlock>
 8006b90:	e794      	b.n	8006abc <_malloc_r+0x20>
 8006b92:	6005      	str	r5, [r0, #0]
 8006b94:	e7d6      	b.n	8006b44 <_malloc_r+0xa8>
 8006b96:	bf00      	nop
 8006b98:	200007a4 	.word	0x200007a4

08006b9c <__malloc_lock>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	@ (8006ba4 <__malloc_lock+0x8>)
 8006b9e:	f7ff bf0e 	b.w	80069be <__retarget_lock_acquire_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	2000079c 	.word	0x2000079c

08006ba8 <__malloc_unlock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	@ (8006bb0 <__malloc_unlock+0x8>)
 8006baa:	f7ff bf09 	b.w	80069c0 <__retarget_lock_release_recursive>
 8006bae:	bf00      	nop
 8006bb0:	2000079c 	.word	0x2000079c

08006bb4 <__sfputc_r>:
 8006bb4:	6893      	ldr	r3, [r2, #8]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	b410      	push	{r4}
 8006bbc:	6093      	str	r3, [r2, #8]
 8006bbe:	da08      	bge.n	8006bd2 <__sfputc_r+0x1e>
 8006bc0:	6994      	ldr	r4, [r2, #24]
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	db01      	blt.n	8006bca <__sfputc_r+0x16>
 8006bc6:	290a      	cmp	r1, #10
 8006bc8:	d103      	bne.n	8006bd2 <__sfputc_r+0x1e>
 8006bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bce:	f000 bb6b 	b.w	80072a8 <__swbuf_r>
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	1c58      	adds	r0, r3, #1
 8006bd6:	6010      	str	r0, [r2, #0]
 8006bd8:	7019      	strb	r1, [r3, #0]
 8006bda:	4608      	mov	r0, r1
 8006bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <__sfputs_r>:
 8006be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	18d5      	adds	r5, r2, r3
 8006bec:	42ac      	cmp	r4, r5
 8006bee:	d101      	bne.n	8006bf4 <__sfputs_r+0x12>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e007      	b.n	8006c04 <__sfputs_r+0x22>
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	463a      	mov	r2, r7
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff ffda 	bl	8006bb4 <__sfputc_r>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d1f3      	bne.n	8006bec <__sfputs_r+0xa>
 8006c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c08 <_vfiprintf_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	b09d      	sub	sp, #116	@ 0x74
 8006c10:	4614      	mov	r4, r2
 8006c12:	4698      	mov	r8, r3
 8006c14:	4606      	mov	r6, r0
 8006c16:	b118      	cbz	r0, 8006c20 <_vfiprintf_r+0x18>
 8006c18:	6a03      	ldr	r3, [r0, #32]
 8006c1a:	b90b      	cbnz	r3, 8006c20 <_vfiprintf_r+0x18>
 8006c1c:	f7ff fdca 	bl	80067b4 <__sinit>
 8006c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c22:	07d9      	lsls	r1, r3, #31
 8006c24:	d405      	bmi.n	8006c32 <_vfiprintf_r+0x2a>
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	059a      	lsls	r2, r3, #22
 8006c2a:	d402      	bmi.n	8006c32 <_vfiprintf_r+0x2a>
 8006c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c2e:	f7ff fec6 	bl	80069be <__retarget_lock_acquire_recursive>
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	071b      	lsls	r3, r3, #28
 8006c36:	d501      	bpl.n	8006c3c <_vfiprintf_r+0x34>
 8006c38:	692b      	ldr	r3, [r5, #16]
 8006c3a:	b99b      	cbnz	r3, 8006c64 <_vfiprintf_r+0x5c>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f000 fb70 	bl	8007324 <__swsetup_r>
 8006c44:	b170      	cbz	r0, 8006c64 <_vfiprintf_r+0x5c>
 8006c46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c48:	07dc      	lsls	r4, r3, #31
 8006c4a:	d504      	bpl.n	8006c56 <_vfiprintf_r+0x4e>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	b01d      	add	sp, #116	@ 0x74
 8006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	0598      	lsls	r0, r3, #22
 8006c5a:	d4f7      	bmi.n	8006c4c <_vfiprintf_r+0x44>
 8006c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c5e:	f7ff feaf 	bl	80069c0 <__retarget_lock_release_recursive>
 8006c62:	e7f3      	b.n	8006c4c <_vfiprintf_r+0x44>
 8006c64:	2300      	movs	r3, #0
 8006c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c72:	2330      	movs	r3, #48	@ 0x30
 8006c74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e24 <_vfiprintf_r+0x21c>
 8006c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c7c:	f04f 0901 	mov.w	r9, #1
 8006c80:	4623      	mov	r3, r4
 8006c82:	469a      	mov	sl, r3
 8006c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c88:	b10a      	cbz	r2, 8006c8e <_vfiprintf_r+0x86>
 8006c8a:	2a25      	cmp	r2, #37	@ 0x25
 8006c8c:	d1f9      	bne.n	8006c82 <_vfiprintf_r+0x7a>
 8006c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c92:	d00b      	beq.n	8006cac <_vfiprintf_r+0xa4>
 8006c94:	465b      	mov	r3, fp
 8006c96:	4622      	mov	r2, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7ff ffa1 	bl	8006be2 <__sfputs_r>
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f000 80a7 	beq.w	8006df4 <_vfiprintf_r+0x1ec>
 8006ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ca8:	445a      	add	r2, fp
 8006caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cac:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 809f 	beq.w	8006df4 <_vfiprintf_r+0x1ec>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc0:	f10a 0a01 	add.w	sl, sl, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cce:	4654      	mov	r4, sl
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd6:	4853      	ldr	r0, [pc, #332]	@ (8006e24 <_vfiprintf_r+0x21c>)
 8006cd8:	f7f9 faa2 	bl	8000220 <memchr>
 8006cdc:	9a04      	ldr	r2, [sp, #16]
 8006cde:	b9d8      	cbnz	r0, 8006d18 <_vfiprintf_r+0x110>
 8006ce0:	06d1      	lsls	r1, r2, #27
 8006ce2:	bf44      	itt	mi
 8006ce4:	2320      	movmi	r3, #32
 8006ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cea:	0713      	lsls	r3, r2, #28
 8006cec:	bf44      	itt	mi
 8006cee:	232b      	movmi	r3, #43	@ 0x2b
 8006cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cfa:	d015      	beq.n	8006d28 <_vfiprintf_r+0x120>
 8006cfc:	9a07      	ldr	r2, [sp, #28]
 8006cfe:	4654      	mov	r4, sl
 8006d00:	2000      	movs	r0, #0
 8006d02:	f04f 0c0a 	mov.w	ip, #10
 8006d06:	4621      	mov	r1, r4
 8006d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0c:	3b30      	subs	r3, #48	@ 0x30
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d94b      	bls.n	8006daa <_vfiprintf_r+0x1a2>
 8006d12:	b1b0      	cbz	r0, 8006d42 <_vfiprintf_r+0x13a>
 8006d14:	9207      	str	r2, [sp, #28]
 8006d16:	e014      	b.n	8006d42 <_vfiprintf_r+0x13a>
 8006d18:	eba0 0308 	sub.w	r3, r0, r8
 8006d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	46a2      	mov	sl, r4
 8006d26:	e7d2      	b.n	8006cce <_vfiprintf_r+0xc6>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	1d19      	adds	r1, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	9103      	str	r1, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bfbb      	ittet	lt
 8006d34:	425b      	neglt	r3, r3
 8006d36:	f042 0202 	orrlt.w	r2, r2, #2
 8006d3a:	9307      	strge	r3, [sp, #28]
 8006d3c:	9307      	strlt	r3, [sp, #28]
 8006d3e:	bfb8      	it	lt
 8006d40:	9204      	strlt	r2, [sp, #16]
 8006d42:	7823      	ldrb	r3, [r4, #0]
 8006d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d46:	d10a      	bne.n	8006d5e <_vfiprintf_r+0x156>
 8006d48:	7863      	ldrb	r3, [r4, #1]
 8006d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d4c:	d132      	bne.n	8006db4 <_vfiprintf_r+0x1ac>
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	1d1a      	adds	r2, r3, #4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	9203      	str	r2, [sp, #12]
 8006d56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d5a:	3402      	adds	r4, #2
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e34 <_vfiprintf_r+0x22c>
 8006d62:	7821      	ldrb	r1, [r4, #0]
 8006d64:	2203      	movs	r2, #3
 8006d66:	4650      	mov	r0, sl
 8006d68:	f7f9 fa5a 	bl	8000220 <memchr>
 8006d6c:	b138      	cbz	r0, 8006d7e <_vfiprintf_r+0x176>
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	eba0 000a 	sub.w	r0, r0, sl
 8006d74:	2240      	movs	r2, #64	@ 0x40
 8006d76:	4082      	lsls	r2, r0
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	3401      	adds	r4, #1
 8006d7c:	9304      	str	r3, [sp, #16]
 8006d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d82:	4829      	ldr	r0, [pc, #164]	@ (8006e28 <_vfiprintf_r+0x220>)
 8006d84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d88:	2206      	movs	r2, #6
 8006d8a:	f7f9 fa49 	bl	8000220 <memchr>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d03f      	beq.n	8006e12 <_vfiprintf_r+0x20a>
 8006d92:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <_vfiprintf_r+0x224>)
 8006d94:	bb1b      	cbnz	r3, 8006dde <_vfiprintf_r+0x1d6>
 8006d96:	9b03      	ldr	r3, [sp, #12]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	3308      	adds	r3, #8
 8006da0:	9303      	str	r3, [sp, #12]
 8006da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da4:	443b      	add	r3, r7
 8006da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006da8:	e76a      	b.n	8006c80 <_vfiprintf_r+0x78>
 8006daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dae:	460c      	mov	r4, r1
 8006db0:	2001      	movs	r0, #1
 8006db2:	e7a8      	b.n	8006d06 <_vfiprintf_r+0xfe>
 8006db4:	2300      	movs	r3, #0
 8006db6:	3401      	adds	r4, #1
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f04f 0c0a 	mov.w	ip, #10
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc6:	3a30      	subs	r2, #48	@ 0x30
 8006dc8:	2a09      	cmp	r2, #9
 8006dca:	d903      	bls.n	8006dd4 <_vfiprintf_r+0x1cc>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0c6      	beq.n	8006d5e <_vfiprintf_r+0x156>
 8006dd0:	9105      	str	r1, [sp, #20]
 8006dd2:	e7c4      	b.n	8006d5e <_vfiprintf_r+0x156>
 8006dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd8:	4604      	mov	r4, r0
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e7f0      	b.n	8006dc0 <_vfiprintf_r+0x1b8>
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <_vfiprintf_r+0x228>)
 8006de6:	a904      	add	r1, sp, #16
 8006de8:	4630      	mov	r0, r6
 8006dea:	f3af 8000 	nop.w
 8006dee:	4607      	mov	r7, r0
 8006df0:	1c78      	adds	r0, r7, #1
 8006df2:	d1d6      	bne.n	8006da2 <_vfiprintf_r+0x19a>
 8006df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006df6:	07d9      	lsls	r1, r3, #31
 8006df8:	d405      	bmi.n	8006e06 <_vfiprintf_r+0x1fe>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	059a      	lsls	r2, r3, #22
 8006dfe:	d402      	bmi.n	8006e06 <_vfiprintf_r+0x1fe>
 8006e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e02:	f7ff fddd 	bl	80069c0 <__retarget_lock_release_recursive>
 8006e06:	89ab      	ldrh	r3, [r5, #12]
 8006e08:	065b      	lsls	r3, r3, #25
 8006e0a:	f53f af1f 	bmi.w	8006c4c <_vfiprintf_r+0x44>
 8006e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e10:	e71e      	b.n	8006c50 <_vfiprintf_r+0x48>
 8006e12:	ab03      	add	r3, sp, #12
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	462a      	mov	r2, r5
 8006e18:	4b05      	ldr	r3, [pc, #20]	@ (8006e30 <_vfiprintf_r+0x228>)
 8006e1a:	a904      	add	r1, sp, #16
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 f879 	bl	8006f14 <_printf_i>
 8006e22:	e7e4      	b.n	8006dee <_vfiprintf_r+0x1e6>
 8006e24:	0800755c 	.word	0x0800755c
 8006e28:	08007566 	.word	0x08007566
 8006e2c:	00000000 	.word	0x00000000
 8006e30:	08006be3 	.word	0x08006be3
 8006e34:	08007562 	.word	0x08007562

08006e38 <_printf_common>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	4698      	mov	r8, r3
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	690b      	ldr	r3, [r1, #16]
 8006e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bfb8      	it	lt
 8006e4c:	4613      	movlt	r3, r2
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e54:	4607      	mov	r7, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	b10a      	cbz	r2, 8006e5e <_printf_common+0x26>
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	0699      	lsls	r1, r3, #26
 8006e62:	bf42      	ittt	mi
 8006e64:	6833      	ldrmi	r3, [r6, #0]
 8006e66:	3302      	addmi	r3, #2
 8006e68:	6033      	strmi	r3, [r6, #0]
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	f015 0506 	ands.w	r5, r5, #6
 8006e70:	d106      	bne.n	8006e80 <_printf_common+0x48>
 8006e72:	f104 0a19 	add.w	sl, r4, #25
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	6832      	ldr	r2, [r6, #0]
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc26      	bgt.n	8006ece <_printf_common+0x96>
 8006e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	3b00      	subs	r3, #0
 8006e88:	bf18      	it	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	0692      	lsls	r2, r2, #26
 8006e8e:	d42b      	bmi.n	8006ee8 <_printf_common+0xb0>
 8006e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e94:	4641      	mov	r1, r8
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c8      	blx	r9
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d01e      	beq.n	8006edc <_printf_common+0xa4>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	6922      	ldr	r2, [r4, #16]
 8006ea2:	f003 0306 	and.w	r3, r3, #6
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	bf02      	ittt	eq
 8006eaa:	68e5      	ldreq	r5, [r4, #12]
 8006eac:	6833      	ldreq	r3, [r6, #0]
 8006eae:	1aed      	subeq	r5, r5, r3
 8006eb0:	68a3      	ldr	r3, [r4, #8]
 8006eb2:	bf0c      	ite	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	2500      	movne	r5, #0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bfc4      	itt	gt
 8006ebe:	1a9b      	subgt	r3, r3, r2
 8006ec0:	18ed      	addgt	r5, r5, r3
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	341a      	adds	r4, #26
 8006ec6:	42b5      	cmp	r5, r6
 8006ec8:	d11a      	bne.n	8006f00 <_printf_common+0xc8>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e008      	b.n	8006ee0 <_printf_common+0xa8>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	47c8      	blx	r9
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d103      	bne.n	8006ee4 <_printf_common+0xac>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	e7c6      	b.n	8006e76 <_printf_common+0x3e>
 8006ee8:	18e1      	adds	r1, r4, r3
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	2030      	movs	r0, #48	@ 0x30
 8006eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ef2:	4422      	add	r2, r4
 8006ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006efc:	3302      	adds	r3, #2
 8006efe:	e7c7      	b.n	8006e90 <_printf_common+0x58>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4622      	mov	r2, r4
 8006f04:	4641      	mov	r1, r8
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c8      	blx	r9
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0e6      	beq.n	8006edc <_printf_common+0xa4>
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7d9      	b.n	8006ec6 <_printf_common+0x8e>
	...

08006f14 <_printf_i>:
 8006f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	7e0f      	ldrb	r7, [r1, #24]
 8006f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f1c:	2f78      	cmp	r7, #120	@ 0x78
 8006f1e:	4691      	mov	r9, r2
 8006f20:	4680      	mov	r8, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	469a      	mov	sl, r3
 8006f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f2a:	d807      	bhi.n	8006f3c <_printf_i+0x28>
 8006f2c:	2f62      	cmp	r7, #98	@ 0x62
 8006f2e:	d80a      	bhi.n	8006f46 <_printf_i+0x32>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f000 80d1 	beq.w	80070d8 <_printf_i+0x1c4>
 8006f36:	2f58      	cmp	r7, #88	@ 0x58
 8006f38:	f000 80b8 	beq.w	80070ac <_printf_i+0x198>
 8006f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f44:	e03a      	b.n	8006fbc <_printf_i+0xa8>
 8006f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f4a:	2b15      	cmp	r3, #21
 8006f4c:	d8f6      	bhi.n	8006f3c <_printf_i+0x28>
 8006f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f54 <_printf_i+0x40>)
 8006f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006f3d 	.word	0x08006f3d
 8006f60:	08006f3d 	.word	0x08006f3d
 8006f64:	08006f3d 	.word	0x08006f3d
 8006f68:	08006f3d 	.word	0x08006f3d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f3d 	.word	0x08006f3d
 8006f74:	08006f3d 	.word	0x08006f3d
 8006f78:	08006f3d 	.word	0x08006f3d
 8006f7c:	08006f3d 	.word	0x08006f3d
 8006f80:	080070bf 	.word	0x080070bf
 8006f84:	08006feb 	.word	0x08006feb
 8006f88:	08007079 	.word	0x08007079
 8006f8c:	08006f3d 	.word	0x08006f3d
 8006f90:	08006f3d 	.word	0x08006f3d
 8006f94:	080070e1 	.word	0x080070e1
 8006f98:	08006f3d 	.word	0x08006f3d
 8006f9c:	08006feb 	.word	0x08006feb
 8006fa0:	08006f3d 	.word	0x08006f3d
 8006fa4:	08006f3d 	.word	0x08006f3d
 8006fa8:	08007081 	.word	0x08007081
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6032      	str	r2, [r6, #0]
 8006fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e09c      	b.n	80070fa <_printf_i+0x1e6>
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	6031      	str	r1, [r6, #0]
 8006fc8:	0606      	lsls	r6, r0, #24
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0xbc>
 8006fcc:	681d      	ldr	r5, [r3, #0]
 8006fce:	e003      	b.n	8006fd8 <_printf_i+0xc4>
 8006fd0:	0645      	lsls	r5, r0, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0xb8>
 8006fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	da03      	bge.n	8006fe4 <_printf_i+0xd0>
 8006fdc:	232d      	movs	r3, #45	@ 0x2d
 8006fde:	426d      	negs	r5, r5
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe4:	4858      	ldr	r0, [pc, #352]	@ (8007148 <_printf_i+0x234>)
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e011      	b.n	800700e <_printf_i+0xfa>
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	0608      	lsls	r0, r1, #24
 8006ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ff4:	d402      	bmi.n	8006ffc <_printf_i+0xe8>
 8006ff6:	0649      	lsls	r1, r1, #25
 8006ff8:	bf48      	it	mi
 8006ffa:	b2ad      	uxthmi	r5, r5
 8006ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ffe:	4852      	ldr	r0, [pc, #328]	@ (8007148 <_printf_i+0x234>)
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	bf14      	ite	ne
 8007004:	230a      	movne	r3, #10
 8007006:	2308      	moveq	r3, #8
 8007008:	2100      	movs	r1, #0
 800700a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800700e:	6866      	ldr	r6, [r4, #4]
 8007010:	60a6      	str	r6, [r4, #8]
 8007012:	2e00      	cmp	r6, #0
 8007014:	db05      	blt.n	8007022 <_printf_i+0x10e>
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	432e      	orrs	r6, r5
 800701a:	f021 0104 	bic.w	r1, r1, #4
 800701e:	6021      	str	r1, [r4, #0]
 8007020:	d04b      	beq.n	80070ba <_printf_i+0x1a6>
 8007022:	4616      	mov	r6, r2
 8007024:	fbb5 f1f3 	udiv	r1, r5, r3
 8007028:	fb03 5711 	mls	r7, r3, r1, r5
 800702c:	5dc7      	ldrb	r7, [r0, r7]
 800702e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007032:	462f      	mov	r7, r5
 8007034:	42bb      	cmp	r3, r7
 8007036:	460d      	mov	r5, r1
 8007038:	d9f4      	bls.n	8007024 <_printf_i+0x110>
 800703a:	2b08      	cmp	r3, #8
 800703c:	d10b      	bne.n	8007056 <_printf_i+0x142>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	07df      	lsls	r7, r3, #31
 8007042:	d508      	bpl.n	8007056 <_printf_i+0x142>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	6861      	ldr	r1, [r4, #4]
 8007048:	4299      	cmp	r1, r3
 800704a:	bfde      	ittt	le
 800704c:	2330      	movle	r3, #48	@ 0x30
 800704e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007052:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007056:	1b92      	subs	r2, r2, r6
 8007058:	6122      	str	r2, [r4, #16]
 800705a:	f8cd a000 	str.w	sl, [sp]
 800705e:	464b      	mov	r3, r9
 8007060:	aa03      	add	r2, sp, #12
 8007062:	4621      	mov	r1, r4
 8007064:	4640      	mov	r0, r8
 8007066:	f7ff fee7 	bl	8006e38 <_printf_common>
 800706a:	3001      	adds	r0, #1
 800706c:	d14a      	bne.n	8007104 <_printf_i+0x1f0>
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	b004      	add	sp, #16
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	f043 0320 	orr.w	r3, r3, #32
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	4832      	ldr	r0, [pc, #200]	@ (800714c <_printf_i+0x238>)
 8007082:	2778      	movs	r7, #120	@ 0x78
 8007084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	6831      	ldr	r1, [r6, #0]
 800708c:	061f      	lsls	r7, r3, #24
 800708e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007092:	d402      	bmi.n	800709a <_printf_i+0x186>
 8007094:	065f      	lsls	r7, r3, #25
 8007096:	bf48      	it	mi
 8007098:	b2ad      	uxthmi	r5, r5
 800709a:	6031      	str	r1, [r6, #0]
 800709c:	07d9      	lsls	r1, r3, #31
 800709e:	bf44      	itt	mi
 80070a0:	f043 0320 	orrmi.w	r3, r3, #32
 80070a4:	6023      	strmi	r3, [r4, #0]
 80070a6:	b11d      	cbz	r5, 80070b0 <_printf_i+0x19c>
 80070a8:	2310      	movs	r3, #16
 80070aa:	e7ad      	b.n	8007008 <_printf_i+0xf4>
 80070ac:	4826      	ldr	r0, [pc, #152]	@ (8007148 <_printf_i+0x234>)
 80070ae:	e7e9      	b.n	8007084 <_printf_i+0x170>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	f023 0320 	bic.w	r3, r3, #32
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	e7f6      	b.n	80070a8 <_printf_i+0x194>
 80070ba:	4616      	mov	r6, r2
 80070bc:	e7bd      	b.n	800703a <_printf_i+0x126>
 80070be:	6833      	ldr	r3, [r6, #0]
 80070c0:	6825      	ldr	r5, [r4, #0]
 80070c2:	6961      	ldr	r1, [r4, #20]
 80070c4:	1d18      	adds	r0, r3, #4
 80070c6:	6030      	str	r0, [r6, #0]
 80070c8:	062e      	lsls	r6, r5, #24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	d501      	bpl.n	80070d2 <_printf_i+0x1be>
 80070ce:	6019      	str	r1, [r3, #0]
 80070d0:	e002      	b.n	80070d8 <_printf_i+0x1c4>
 80070d2:	0668      	lsls	r0, r5, #25
 80070d4:	d5fb      	bpl.n	80070ce <_printf_i+0x1ba>
 80070d6:	8019      	strh	r1, [r3, #0]
 80070d8:	2300      	movs	r3, #0
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	4616      	mov	r6, r2
 80070de:	e7bc      	b.n	800705a <_printf_i+0x146>
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	6032      	str	r2, [r6, #0]
 80070e6:	681e      	ldr	r6, [r3, #0]
 80070e8:	6862      	ldr	r2, [r4, #4]
 80070ea:	2100      	movs	r1, #0
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7f9 f897 	bl	8000220 <memchr>
 80070f2:	b108      	cbz	r0, 80070f8 <_printf_i+0x1e4>
 80070f4:	1b80      	subs	r0, r0, r6
 80070f6:	6060      	str	r0, [r4, #4]
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	2300      	movs	r3, #0
 80070fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007102:	e7aa      	b.n	800705a <_printf_i+0x146>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	4632      	mov	r2, r6
 8007108:	4649      	mov	r1, r9
 800710a:	4640      	mov	r0, r8
 800710c:	47d0      	blx	sl
 800710e:	3001      	adds	r0, #1
 8007110:	d0ad      	beq.n	800706e <_printf_i+0x15a>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	079b      	lsls	r3, r3, #30
 8007116:	d413      	bmi.n	8007140 <_printf_i+0x22c>
 8007118:	68e0      	ldr	r0, [r4, #12]
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	4298      	cmp	r0, r3
 800711e:	bfb8      	it	lt
 8007120:	4618      	movlt	r0, r3
 8007122:	e7a6      	b.n	8007072 <_printf_i+0x15e>
 8007124:	2301      	movs	r3, #1
 8007126:	4632      	mov	r2, r6
 8007128:	4649      	mov	r1, r9
 800712a:	4640      	mov	r0, r8
 800712c:	47d0      	blx	sl
 800712e:	3001      	adds	r0, #1
 8007130:	d09d      	beq.n	800706e <_printf_i+0x15a>
 8007132:	3501      	adds	r5, #1
 8007134:	68e3      	ldr	r3, [r4, #12]
 8007136:	9903      	ldr	r1, [sp, #12]
 8007138:	1a5b      	subs	r3, r3, r1
 800713a:	42ab      	cmp	r3, r5
 800713c:	dcf2      	bgt.n	8007124 <_printf_i+0x210>
 800713e:	e7eb      	b.n	8007118 <_printf_i+0x204>
 8007140:	2500      	movs	r5, #0
 8007142:	f104 0619 	add.w	r6, r4, #25
 8007146:	e7f5      	b.n	8007134 <_printf_i+0x220>
 8007148:	0800756d 	.word	0x0800756d
 800714c:	0800757e 	.word	0x0800757e

08007150 <__sflush_r>:
 8007150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007158:	0716      	lsls	r6, r2, #28
 800715a:	4605      	mov	r5, r0
 800715c:	460c      	mov	r4, r1
 800715e:	d454      	bmi.n	800720a <__sflush_r+0xba>
 8007160:	684b      	ldr	r3, [r1, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dc02      	bgt.n	800716c <__sflush_r+0x1c>
 8007166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	dd48      	ble.n	80071fe <__sflush_r+0xae>
 800716c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800716e:	2e00      	cmp	r6, #0
 8007170:	d045      	beq.n	80071fe <__sflush_r+0xae>
 8007172:	2300      	movs	r3, #0
 8007174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007178:	682f      	ldr	r7, [r5, #0]
 800717a:	6a21      	ldr	r1, [r4, #32]
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	d030      	beq.n	80071e2 <__sflush_r+0x92>
 8007180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	0759      	lsls	r1, r3, #29
 8007186:	d505      	bpl.n	8007194 <__sflush_r+0x44>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800718e:	b10b      	cbz	r3, 8007194 <__sflush_r+0x44>
 8007190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007198:	6a21      	ldr	r1, [r4, #32]
 800719a:	4628      	mov	r0, r5
 800719c:	47b0      	blx	r6
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	d106      	bne.n	80071b2 <__sflush_r+0x62>
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	291d      	cmp	r1, #29
 80071a8:	d82b      	bhi.n	8007202 <__sflush_r+0xb2>
 80071aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <__sflush_r+0x104>)
 80071ac:	40ca      	lsrs	r2, r1
 80071ae:	07d6      	lsls	r6, r2, #31
 80071b0:	d527      	bpl.n	8007202 <__sflush_r+0xb2>
 80071b2:	2200      	movs	r2, #0
 80071b4:	6062      	str	r2, [r4, #4]
 80071b6:	04d9      	lsls	r1, r3, #19
 80071b8:	6922      	ldr	r2, [r4, #16]
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	d504      	bpl.n	80071c8 <__sflush_r+0x78>
 80071be:	1c42      	adds	r2, r0, #1
 80071c0:	d101      	bne.n	80071c6 <__sflush_r+0x76>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	b903      	cbnz	r3, 80071c8 <__sflush_r+0x78>
 80071c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ca:	602f      	str	r7, [r5, #0]
 80071cc:	b1b9      	cbz	r1, 80071fe <__sflush_r+0xae>
 80071ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d002      	beq.n	80071dc <__sflush_r+0x8c>
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7ff fbf4 	bl	80069c4 <_free_r>
 80071dc:	2300      	movs	r3, #0
 80071de:	6363      	str	r3, [r4, #52]	@ 0x34
 80071e0:	e00d      	b.n	80071fe <__sflush_r+0xae>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b0      	blx	r6
 80071e8:	4602      	mov	r2, r0
 80071ea:	1c50      	adds	r0, r2, #1
 80071ec:	d1c9      	bne.n	8007182 <__sflush_r+0x32>
 80071ee:	682b      	ldr	r3, [r5, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0c6      	beq.n	8007182 <__sflush_r+0x32>
 80071f4:	2b1d      	cmp	r3, #29
 80071f6:	d001      	beq.n	80071fc <__sflush_r+0xac>
 80071f8:	2b16      	cmp	r3, #22
 80071fa:	d11e      	bne.n	800723a <__sflush_r+0xea>
 80071fc:	602f      	str	r7, [r5, #0]
 80071fe:	2000      	movs	r0, #0
 8007200:	e022      	b.n	8007248 <__sflush_r+0xf8>
 8007202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007206:	b21b      	sxth	r3, r3
 8007208:	e01b      	b.n	8007242 <__sflush_r+0xf2>
 800720a:	690f      	ldr	r7, [r1, #16]
 800720c:	2f00      	cmp	r7, #0
 800720e:	d0f6      	beq.n	80071fe <__sflush_r+0xae>
 8007210:	0793      	lsls	r3, r2, #30
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	bf08      	it	eq
 8007216:	694b      	ldreq	r3, [r1, #20]
 8007218:	600f      	str	r7, [r1, #0]
 800721a:	bf18      	it	ne
 800721c:	2300      	movne	r3, #0
 800721e:	eba6 0807 	sub.w	r8, r6, r7
 8007222:	608b      	str	r3, [r1, #8]
 8007224:	f1b8 0f00 	cmp.w	r8, #0
 8007228:	dde9      	ble.n	80071fe <__sflush_r+0xae>
 800722a:	6a21      	ldr	r1, [r4, #32]
 800722c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800722e:	4643      	mov	r3, r8
 8007230:	463a      	mov	r2, r7
 8007232:	4628      	mov	r0, r5
 8007234:	47b0      	blx	r6
 8007236:	2800      	cmp	r0, #0
 8007238:	dc08      	bgt.n	800724c <__sflush_r+0xfc>
 800723a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	4407      	add	r7, r0
 800724e:	eba8 0800 	sub.w	r8, r8, r0
 8007252:	e7e7      	b.n	8007224 <__sflush_r+0xd4>
 8007254:	20400001 	.word	0x20400001

08007258 <_fflush_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	4605      	mov	r5, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b913      	cbnz	r3, 8007268 <_fflush_r+0x10>
 8007262:	2500      	movs	r5, #0
 8007264:	4628      	mov	r0, r5
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	b118      	cbz	r0, 8007272 <_fflush_r+0x1a>
 800726a:	6a03      	ldr	r3, [r0, #32]
 800726c:	b90b      	cbnz	r3, 8007272 <_fflush_r+0x1a>
 800726e:	f7ff faa1 	bl	80067b4 <__sinit>
 8007272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f3      	beq.n	8007262 <_fflush_r+0xa>
 800727a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800727c:	07d0      	lsls	r0, r2, #31
 800727e:	d404      	bmi.n	800728a <_fflush_r+0x32>
 8007280:	0599      	lsls	r1, r3, #22
 8007282:	d402      	bmi.n	800728a <_fflush_r+0x32>
 8007284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007286:	f7ff fb9a 	bl	80069be <__retarget_lock_acquire_recursive>
 800728a:	4628      	mov	r0, r5
 800728c:	4621      	mov	r1, r4
 800728e:	f7ff ff5f 	bl	8007150 <__sflush_r>
 8007292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007294:	07da      	lsls	r2, r3, #31
 8007296:	4605      	mov	r5, r0
 8007298:	d4e4      	bmi.n	8007264 <_fflush_r+0xc>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	059b      	lsls	r3, r3, #22
 800729e:	d4e1      	bmi.n	8007264 <_fflush_r+0xc>
 80072a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072a2:	f7ff fb8d 	bl	80069c0 <__retarget_lock_release_recursive>
 80072a6:	e7dd      	b.n	8007264 <_fflush_r+0xc>

080072a8 <__swbuf_r>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	460e      	mov	r6, r1
 80072ac:	4614      	mov	r4, r2
 80072ae:	4605      	mov	r5, r0
 80072b0:	b118      	cbz	r0, 80072ba <__swbuf_r+0x12>
 80072b2:	6a03      	ldr	r3, [r0, #32]
 80072b4:	b90b      	cbnz	r3, 80072ba <__swbuf_r+0x12>
 80072b6:	f7ff fa7d 	bl	80067b4 <__sinit>
 80072ba:	69a3      	ldr	r3, [r4, #24]
 80072bc:	60a3      	str	r3, [r4, #8]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	071a      	lsls	r2, r3, #28
 80072c2:	d501      	bpl.n	80072c8 <__swbuf_r+0x20>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	b943      	cbnz	r3, 80072da <__swbuf_r+0x32>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f82a 	bl	8007324 <__swsetup_r>
 80072d0:	b118      	cbz	r0, 80072da <__swbuf_r+0x32>
 80072d2:	f04f 37ff 	mov.w	r7, #4294967295
 80072d6:	4638      	mov	r0, r7
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	1a98      	subs	r0, r3, r2
 80072e0:	6963      	ldr	r3, [r4, #20]
 80072e2:	b2f6      	uxtb	r6, r6
 80072e4:	4283      	cmp	r3, r0
 80072e6:	4637      	mov	r7, r6
 80072e8:	dc05      	bgt.n	80072f6 <__swbuf_r+0x4e>
 80072ea:	4621      	mov	r1, r4
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7ff ffb3 	bl	8007258 <_fflush_r>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1ed      	bne.n	80072d2 <__swbuf_r+0x2a>
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	6022      	str	r2, [r4, #0]
 8007302:	701e      	strb	r6, [r3, #0]
 8007304:	6962      	ldr	r2, [r4, #20]
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	429a      	cmp	r2, r3
 800730a:	d004      	beq.n	8007316 <__swbuf_r+0x6e>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	07db      	lsls	r3, r3, #31
 8007310:	d5e1      	bpl.n	80072d6 <__swbuf_r+0x2e>
 8007312:	2e0a      	cmp	r6, #10
 8007314:	d1df      	bne.n	80072d6 <__swbuf_r+0x2e>
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f7ff ff9d 	bl	8007258 <_fflush_r>
 800731e:	2800      	cmp	r0, #0
 8007320:	d0d9      	beq.n	80072d6 <__swbuf_r+0x2e>
 8007322:	e7d6      	b.n	80072d2 <__swbuf_r+0x2a>

08007324 <__swsetup_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4b29      	ldr	r3, [pc, #164]	@ (80073cc <__swsetup_r+0xa8>)
 8007328:	4605      	mov	r5, r0
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	460c      	mov	r4, r1
 800732e:	b118      	cbz	r0, 8007338 <__swsetup_r+0x14>
 8007330:	6a03      	ldr	r3, [r0, #32]
 8007332:	b90b      	cbnz	r3, 8007338 <__swsetup_r+0x14>
 8007334:	f7ff fa3e 	bl	80067b4 <__sinit>
 8007338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733c:	0719      	lsls	r1, r3, #28
 800733e:	d422      	bmi.n	8007386 <__swsetup_r+0x62>
 8007340:	06da      	lsls	r2, r3, #27
 8007342:	d407      	bmi.n	8007354 <__swsetup_r+0x30>
 8007344:	2209      	movs	r2, #9
 8007346:	602a      	str	r2, [r5, #0]
 8007348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	f04f 30ff 	mov.w	r0, #4294967295
 8007352:	e033      	b.n	80073bc <__swsetup_r+0x98>
 8007354:	0758      	lsls	r0, r3, #29
 8007356:	d512      	bpl.n	800737e <__swsetup_r+0x5a>
 8007358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800735a:	b141      	cbz	r1, 800736e <__swsetup_r+0x4a>
 800735c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__swsetup_r+0x46>
 8007364:	4628      	mov	r0, r5
 8007366:	f7ff fb2d 	bl	80069c4 <_free_r>
 800736a:	2300      	movs	r3, #0
 800736c:	6363      	str	r3, [r4, #52]	@ 0x34
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b94b      	cbnz	r3, 800739e <__swsetup_r+0x7a>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007394:	d003      	beq.n	800739e <__swsetup_r+0x7a>
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 f84f 	bl	800743c <__smakebuf_r>
 800739e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a2:	f013 0201 	ands.w	r2, r3, #1
 80073a6:	d00a      	beq.n	80073be <__swsetup_r+0x9a>
 80073a8:	2200      	movs	r2, #0
 80073aa:	60a2      	str	r2, [r4, #8]
 80073ac:	6962      	ldr	r2, [r4, #20]
 80073ae:	4252      	negs	r2, r2
 80073b0:	61a2      	str	r2, [r4, #24]
 80073b2:	6922      	ldr	r2, [r4, #16]
 80073b4:	b942      	cbnz	r2, 80073c8 <__swsetup_r+0xa4>
 80073b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073ba:	d1c5      	bne.n	8007348 <__swsetup_r+0x24>
 80073bc:	bd38      	pop	{r3, r4, r5, pc}
 80073be:	0799      	lsls	r1, r3, #30
 80073c0:	bf58      	it	pl
 80073c2:	6962      	ldrpl	r2, [r4, #20]
 80073c4:	60a2      	str	r2, [r4, #8]
 80073c6:	e7f4      	b.n	80073b2 <__swsetup_r+0x8e>
 80073c8:	2000      	movs	r0, #0
 80073ca:	e7f7      	b.n	80073bc <__swsetup_r+0x98>
 80073cc:	200000a4 	.word	0x200000a4

080073d0 <_sbrk_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4d06      	ldr	r5, [pc, #24]	@ (80073ec <_sbrk_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4604      	mov	r4, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	602b      	str	r3, [r5, #0]
 80073dc:	f7f9 fe32 	bl	8001044 <_sbrk>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_sbrk_r+0x1a>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_sbrk_r+0x1a>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000798 	.word	0x20000798

080073f0 <__swhatbuf_r>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2900      	cmp	r1, #0
 80073fa:	b096      	sub	sp, #88	@ 0x58
 80073fc:	4615      	mov	r5, r2
 80073fe:	461e      	mov	r6, r3
 8007400:	da0d      	bge.n	800741e <__swhatbuf_r+0x2e>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007408:	f04f 0100 	mov.w	r1, #0
 800740c:	bf14      	ite	ne
 800740e:	2340      	movne	r3, #64	@ 0x40
 8007410:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007414:	2000      	movs	r0, #0
 8007416:	6031      	str	r1, [r6, #0]
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	b016      	add	sp, #88	@ 0x58
 800741c:	bd70      	pop	{r4, r5, r6, pc}
 800741e:	466a      	mov	r2, sp
 8007420:	f000 f848 	bl	80074b4 <_fstat_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	dbec      	blt.n	8007402 <__swhatbuf_r+0x12>
 8007428:	9901      	ldr	r1, [sp, #4]
 800742a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800742e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007432:	4259      	negs	r1, r3
 8007434:	4159      	adcs	r1, r3
 8007436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800743a:	e7eb      	b.n	8007414 <__swhatbuf_r+0x24>

0800743c <__smakebuf_r>:
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007440:	079d      	lsls	r5, r3, #30
 8007442:	4606      	mov	r6, r0
 8007444:	460c      	mov	r4, r1
 8007446:	d507      	bpl.n	8007458 <__smakebuf_r+0x1c>
 8007448:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	2301      	movs	r3, #1
 8007452:	6163      	str	r3, [r4, #20]
 8007454:	b003      	add	sp, #12
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	ab01      	add	r3, sp, #4
 800745a:	466a      	mov	r2, sp
 800745c:	f7ff ffc8 	bl	80073f0 <__swhatbuf_r>
 8007460:	9f00      	ldr	r7, [sp, #0]
 8007462:	4605      	mov	r5, r0
 8007464:	4639      	mov	r1, r7
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff fb18 	bl	8006a9c <_malloc_r>
 800746c:	b948      	cbnz	r0, 8007482 <__smakebuf_r+0x46>
 800746e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007472:	059a      	lsls	r2, r3, #22
 8007474:	d4ee      	bmi.n	8007454 <__smakebuf_r+0x18>
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	f043 0302 	orr.w	r3, r3, #2
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	e7e2      	b.n	8007448 <__smakebuf_r+0xc>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	6020      	str	r0, [r4, #0]
 8007486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007492:	b15b      	cbz	r3, 80074ac <__smakebuf_r+0x70>
 8007494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f81d 	bl	80074d8 <_isatty_r>
 800749e:	b128      	cbz	r0, 80074ac <__smakebuf_r+0x70>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	81a3      	strh	r3, [r4, #12]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	431d      	orrs	r5, r3
 80074b0:	81a5      	strh	r5, [r4, #12]
 80074b2:	e7cf      	b.n	8007454 <__smakebuf_r+0x18>

080074b4 <_fstat_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	@ (80074d4 <_fstat_r+0x20>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f7f9 fd96 	bl	8000ff2 <_fstat>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d102      	bne.n	80074d0 <_fstat_r+0x1c>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	b103      	cbz	r3, 80074d0 <_fstat_r+0x1c>
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	20000798 	.word	0x20000798

080074d8 <_isatty_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	@ (80074f4 <_isatty_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7f9 fd95 	bl	8001012 <_isatty>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_isatty_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_isatty_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000798 	.word	0x20000798

080074f8 <_init>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	bf00      	nop
 80074fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fe:	bc08      	pop	{r3}
 8007500:	469e      	mov	lr, r3
 8007502:	4770      	bx	lr

08007504 <_fini>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr
