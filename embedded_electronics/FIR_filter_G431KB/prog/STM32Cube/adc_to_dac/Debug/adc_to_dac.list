
adc_to_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b98  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e00  08006e00  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001390  20000070  08006e78  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  08006e78  00008400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab77  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003824  00000000  00000000  00022c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00026440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001214  00000000  00000000  00027bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc7  00000000  00000000  00028dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c347  00000000  00000000  0004bd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0a2c  00000000  00000000  000680d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae8  00000000  00000000  00148b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0014f62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006d60 	.word	0x08006d60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006d60 	.word	0x08006d60

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	@ 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 fd94 	bl	8006132 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2c      	ldr	r3, [pc, #176]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8000652:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000654:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800065c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <MX_ADC1_Init+0xec>)
 800067a:	f001 f89f 	bl	80017bc <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000684:	f000 fab2 	bl	8000bec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_ADC1_Init+0xec>)
 8000694:	f002 f804 	bl	80026a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800069e:	f000 faa5 	bl	8000bec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_ADC1_Init+0xf0>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	@ 0x7f
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_ADC1_Init+0xec>)
 80006c0:	f001 fabe 	bl	8001c40 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ca:	f000 fa8f 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3730      	adds	r7, #48	@ 0x30
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	04300002 	.word	0x04300002

080006e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	@ 0x68
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2244      	movs	r2, #68	@ 0x44
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fd16 	bl	8006132 <memset>
  if(adcHandle->Instance==ADC1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800070e:	d15f      	bne.n	80007d0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000714:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000716:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fef5 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800072c:	f000 fa5e 	bl	8000bec <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000734:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000736:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800073a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <HAL_ADC_MspInit+0xf8>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000760:	2301      	movs	r3, #1
 8000762:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f002 ff11 	bl	800359c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800077c:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_ADC_MspInit+0x100>)
 800077e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000782:	2205      	movs	r2, #5
 8000784:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 800079a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800079e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007b6:	f002 fc7f 	bl	80030b8 <HAL_DMA_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80007c0:	f000 fa14 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_ADC_MspInit+0xfc>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d0:	bf00      	nop
 80007d2:	3768      	adds	r7, #104	@ 0x68
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	200000f8 	.word	0x200000f8
 80007e0:	40020008 	.word	0x40020008

080007e4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2230      	movs	r2, #48	@ 0x30
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 fc9e 	bl	8006132 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_DAC1_Init+0x6c>)
 80007f8:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <MX_DAC1_Init+0x70>)
 80007fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <MX_DAC1_Init+0x6c>)
 80007fe:	f002 f902 	bl	8002a06 <HAL_DAC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000808:	f000 f9f0 	bl	8000bec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800080c:	2302      	movs	r3, #2
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800081c:	230a      	movs	r3, #10
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_DAC1_Init+0x6c>)
 8000838:	f002 f9fa 	bl	8002c30 <HAL_DAC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000842:	f000 f9d3 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000158 	.word	0x20000158
 8000854:	50000800 	.word	0x50000800

08000858 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <HAL_DAC_MspInit+0xcc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d14f      	bne.n	800091a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800087a:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a24      	ldr	r2, [pc, #144]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <HAL_DAC_MspInit+0xd0>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008aa:	2310      	movs	r3, #16
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ae:	2303      	movs	r3, #3
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f002 fe6c 	bl	800359c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <HAL_DAC_MspInit+0xd8>)
 80008c8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008d2:	2210      	movs	r2, #16
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008de:	2280      	movs	r2, #128	@ 0x80
 80008e0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008f0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008f4:	2220      	movs	r2, #32
 80008f6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000900:	f002 fbda 	bl	80030b8 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800090a:	f000 f96f 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	4a05      	ldr	r2, [pc, #20]	@ (800092c <HAL_DAC_MspInit+0xd4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	@ 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	50000800 	.word	0x50000800
 8000928:	40021000 	.word	0x40021000
 800092c:	2000016c 	.word	0x2000016c
 8000930:	4002001c 	.word	0x4002001c

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_DMA_Init+0x60>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_DMA_Init+0x60>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6493      	str	r3, [r2, #72]	@ 0x48
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_DMA_Init+0x60>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_DMA_Init+0x60>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DMA_Init+0x60>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6493      	str	r3, [r2, #72]	@ 0x48
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_DMA_Init+0x60>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	200b      	movs	r0, #11
 8000970:	f002 f815 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000974:	200b      	movs	r0, #11
 8000976:	f002 f82c 	bl	80029d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200c      	movs	r0, #12
 8000980:	f002 f80d 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000984:	200c      	movs	r0, #12
 8000986:	f002 f824 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a18      	ldr	r2, [pc, #96]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_GPIO_Init+0x7c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f002 fdd0 	bl	800359c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2017      	movs	r0, #23
 8000a02:	f001 ffcc 	bl	800299e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a06:	2017      	movs	r0, #23
 8000a08:	f001 ffe3 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fc3f 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f853 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f7ff ffb7 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a2a:	f7ff ff83 	bl	8000934 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a2e:	f7ff fddd 	bl	80005ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a32:	f000 fa1b 	bl	8000e6c <MX_TIM2_Init>
  MX_DAC1_Init();
 8000a36:	f7ff fed5 	bl	80007e4 <MX_DAC1_Init>
  MX_TIM7_Init();
 8000a3a:	f000 fa65 	bl	8000f08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Initialization of ADC and DAC
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, N);
 8000a3e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a42:	491b      	ldr	r1, [pc, #108]	@ (8000ab0 <main+0x98>)
 8000a44:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <main+0x9c>)
 8000a46:	f001 f83d 	bl	8001ac4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, N, DAC_ALIGN_12B_R);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a52:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <main+0xa0>)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4819      	ldr	r0, [pc, #100]	@ (8000abc <main+0xa4>)
 8000a58:	f001 fff8 	bl	8002a4c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim7);
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <main+0xa8>)
 8000a5e:	f003 ff9f 	bl	80049a0 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 faf0 	bl	8001048 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <main+0xac>)
 8000a6a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <main+0xac>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <main+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <main+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <main+0xac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a88:	490e      	ldr	r1, [pc, #56]	@ (8000ac4 <main+0xac>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fb3e 	bl	800110c <BSP_COM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <main+0x82>
  {
    Error_Handler();
 8000a96:	f000 f8a9 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <main+0xb0>)
 8000a9c:	f005 faf4 	bl	8006088 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fb07 	bl	80010b4 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

/* -- Sample board code to toggle leds ---- */
       BSP_LED_Toggle(LED_GREEN);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fb1a 	bl	80010e0 <BSP_LED_Toggle>
 8000aac:	e7fb      	b.n	8000aa6 <main+0x8e>
 8000aae:	bf00      	nop
 8000ab0:	200001dc 	.word	0x200001dc
 8000ab4:	2000008c 	.word	0x2000008c
 8000ab8:	200009ac 	.word	0x200009ac
 8000abc:	20000158 	.word	0x20000158
 8000ac0:	200011cc 	.word	0x200011cc
 8000ac4:	200001cc 	.word	0x200001cc
 8000ac8:	08006d78 	.word	0x08006d78

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	@ 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	2238      	movs	r2, #56	@ 0x38
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fb29 	bl	8006132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f002 ff2c 	bl	800394c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b0e:	2355      	movs	r3, #85	@ 0x55
 8000b10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 ffc6 	bl	8003ab4 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b2e:	f000 f85d 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fac4 	bl	80040d8 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b56:	f000 f849 	bl	8000bec <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	@ 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// ISR for ADC and DAC conversion
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	for(int n=0; n<halfN; n++){ dac_buffer[n] = adc_buffer[n] / 2; }
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e00b      	b.n	8000b8a <HAL_ADC_ConvHalfCpltCallback+0x26>
 8000b72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	085a      	lsrs	r2, r3, #1
 8000b7c:	4909      	ldr	r1, [pc, #36]	@ (8000ba4 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2bf9      	cmp	r3, #249	@ 0xf9
 8000b8e:	ddf0      	ble.n	8000b72 <HAL_ADC_ConvHalfCpltCallback+0xe>
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200001dc 	.word	0x200001dc
 8000ba4:	200009ac 	.word	0x200009ac

08000ba8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	for(int n=halfN; n<N; n++){ dac_buffer[n] = adc_buffer[n]; }
 8000bb0:	23fa      	movs	r3, #250	@ 0xfa
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00a      	b.n	8000bcc <HAL_ADC_ConvCpltCallback+0x24>
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bbe:	490a      	ldr	r1, [pc, #40]	@ (8000be8 <HAL_ADC_ConvCpltCallback+0x40>)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bd2:	dbf0      	blt.n	8000bb6 <HAL_ADC_ConvCpltCallback+0xe>
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200001dc 	.word	0x200001dc
 8000be8:	200009ac 	.word	0x200009ac

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c2e:	f002 ff31 	bl	8003a94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 fb55 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ca6:	f002 fb2a 	bl	80032fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000f8 	.word	0x200000f8

08000cb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <DMA1_Channel2_IRQHandler+0x10>)
 8000cba:	f002 fb20 	bl	80032fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000016c 	.word	0x2000016c

08000cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ccc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000cd0:	f002 fe18 	bl	8003904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <TIM2_IRQHandler+0x10>)
 8000cde:	f003 fec1 	bl	8004a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20001180 	.word	0x20001180

08000cec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <TIM7_IRQHandler+0x10>)
 8000cf2:	f003 feb7 	bl	8004a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200011cc 	.word	0x200011cc

08000d00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
  }

  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fa3b 	bl	80011d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
  }
  return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f005 f9e0 	bl	80061d0 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20008000 	.word	0x20008000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	2000117c 	.word	0x2000117c
 8000e44:	20001400 	.word	0x20001400

08000e48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 109;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000e94:	226d      	movs	r2, #109	@ 0x6d
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4899;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000ea0:	f241 3223 	movw	r2, #4899	@ 0x1323
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb4:	4813      	ldr	r0, [pc, #76]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000eb6:	f003 fd1b 	bl	80048f0 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f7ff fe94 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000ed2:	f003 ff17 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000edc:	f7ff fe86 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_TIM2_Init+0x98>)
 8000eee:	f004 f96d 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ef8:	f7ff fe78 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20001180 	.word	0x20001180

08000f08 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <MX_TIM7_Init+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17-1;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f20:	2210      	movs	r2, #16
 8000f22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f2c:	2209      	movs	r2, #9
 8000f2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f38:	f003 fcda 	bl	80048f0 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000f42:	f7ff fe53 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f46:	2320      	movs	r3, #32
 8000f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_TIM7_Init+0x64>)
 8000f54:	f004 f93a 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000f5e:	f7ff fe45 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200011cc 	.word	0x200011cc
 8000f70:	40001400 	.word	0x40001400

08000f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f84:	d114      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f001 fcfb 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f001 fd12 	bl	80029d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000fae:	e018      	b.n	8000fe2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_TIM_Base_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d113      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_TIM_Base_MspInit+0x78>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2037      	movs	r0, #55	@ 0x37
 8000fd8:	f001 fce1 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fdc:	2037      	movs	r0, #55	@ 0x37
 8000fde:	f001 fcf8 	bl	80029d2 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40001400 	.word	0x40001400

08000ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	@ (800102c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff8:	f7ff ff26 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f005 f8db 	bl	80061dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001026:	f7ff fcf7 	bl	8000a18 <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   r0, =_estack
 800102c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001038:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 800103c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001040:	20001400 	.word	0x20001400

08001044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <BSP_LED_Init+0x64>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <BSP_LED_Init+0x64>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <BSP_LED_Init+0x64>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 800106a:	2320      	movs	r3, #32
 800106c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <BSP_LED_Init+0x68>)
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fa87 	bl	800359c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <BSP_LED_Init+0x68>)
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	2120      	movs	r1, #32
 8001098:	2200      	movs	r2, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fc00 	bl	80038a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	20000004 	.word	0x20000004

080010b4 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <BSP_LED_On+0x28>)
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	2120      	movs	r1, #32
 80010c8:	2201      	movs	r2, #1
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fbe8 	bl	80038a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004

080010e0 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <BSP_LED_Toggle+0x28>)
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	2220      	movs	r2, #32
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fbea 	bl	80038d0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000004 	.word	0x20000004

0800110c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d903      	bls.n	800112a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001122:	f06f 0301 	mvn.w	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e018      	b.n	800115c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2294      	movs	r2, #148	@ 0x94
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <BSP_COM_Init+0x5c>)
 8001134:	4413      	add	r3, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f866 	bl	8001208 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2294      	movs	r2, #148	@ 0x94
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <BSP_COM_Init+0x5c>)
 8001146:	4413      	add	r3, r2
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f80e 	bl	800116c <MX_LPUART1_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001156:	f06f 0303 	mvn.w	r3, #3
 800115a:	e000      	b.n	800115e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800115c:	68fb      	ldr	r3, [r7, #12]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20001218 	.word	0x20001218

0800116c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <MX_LPUART1_Init+0x60>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220c      	movs	r2, #12
 800118a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	891b      	ldrh	r3, [r3, #8]
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	899b      	ldrh	r3, [r3, #12]
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011b8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f004 f8ce 	bl	800535c <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <__io_putchar+0x30>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	2394      	movs	r3, #148	@ 0x94
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <__io_putchar+0x34>)
 80011e6:	1898      	adds	r0, r3, r2
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	2201      	movs	r2, #1
 80011f0:	f004 f90e 	bl	8005410 <HAL_UART_Transmit>
  return ch;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200012ac 	.word	0x200012ac
 8001204:	20001218 	.word	0x20001218

08001208 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <COM1_MspInit+0x94>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001214:	4a21      	ldr	r2, [pc, #132]	@ (800129c <COM1_MspInit+0x94>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <COM1_MspInit+0x94>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001228:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <COM1_MspInit+0x94>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <COM1_MspInit+0x94>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <COM1_MspInit+0x94>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <COM1_MspInit+0x94>)
 8001242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001244:	4a15      	ldr	r2, [pc, #84]	@ (800129c <COM1_MspInit+0x94>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <COM1_MspInit+0x94>)
 800124e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001258:	2304      	movs	r3, #4
 800125a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001268:	230c      	movs	r3, #12
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f002 f991 	bl	800359c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800127a:	2308      	movs	r3, #8
 800127c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001282:	230c      	movs	r3, #12
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001290:	f002 f984 	bl	800359c <HAL_GPIO_Init>
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012aa:	2003      	movs	r0, #3
 80012ac:	f001 fb6c 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f80d 	bl	80012d0 <HAL_InitTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e001      	b.n	80012c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c2:	f7ff fc99 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c6:	79fb      	ldrb	r3, [r7, #7]

}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_InitTick+0x68>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d022      	beq.n	800132a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_InitTick+0x6c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_InitTick+0x68>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fb78 	bl	80029ee <HAL_SYSTICK_Config>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10f      	bne.n	8001324 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d809      	bhi.n	800131e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130a:	2200      	movs	r2, #0
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	f001 fb44 	bl	800299e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <HAL_InitTick+0x70>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e007      	b.n	800132e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e004      	b.n	800132e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e001      	b.n	800132e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000010 	.word	0x20000010
 800133c:	20000000 	.word	0x20000000
 8001340:	2000000c 	.word	0x2000000c

08001344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <HAL_IncTick+0x1c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x20>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4413      	add	r3, r2
 8001352:	4a03      	ldr	r2, [pc, #12]	@ (8001360 <HAL_IncTick+0x1c>)
 8001354:	6013      	str	r3, [r2, #0]
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	200012b0 	.word	0x200012b0
 8001364:	20000010 	.word	0x20000010

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200012b0 	.word	0x200012b0

08001380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3360      	adds	r3, #96	@ 0x60
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <LL_ADC_SetOffset+0x44>)
 800140a:	4013      	ands	r3, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	4313      	orrs	r3, r2
 8001418:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	03fff000 	.word	0x03fff000

08001430 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3360      	adds	r3, #96	@ 0x60
 800143e:	461a      	mov	r2, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3360      	adds	r3, #96	@ 0x60
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	431a      	orrs	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001486:	bf00      	nop
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001492:	b480      	push	{r7}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3360      	adds	r3, #96	@ 0x60
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3360      	adds	r3, #96	@ 0x60
 80014d8:	461a      	mov	r2, r3
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800154a:	b480      	push	{r7}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3330      	adds	r3, #48	@ 0x30
 800155a:	461a      	mov	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	4413      	add	r3, r2
 8001568:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	211f      	movs	r1, #31
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	401a      	ands	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	f003 011f 	and.w	r1, r3, #31
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b087      	sub	sp, #28
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3314      	adds	r3, #20
 80015b2:	461a      	mov	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	0e5b      	lsrs	r3, r3, #25
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	0d1b      	lsrs	r3, r3, #20
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2107      	movs	r1, #7
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0d1b      	lsrs	r3, r3, #20
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0318 	and.w	r3, r3, #24
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <LL_ADC_SetChannelSingleDiff+0x44>)
 800161c:	40d9      	lsrs	r1, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	400b      	ands	r3, r1
 8001622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	0007ffff 	.word	0x0007ffff

08001640 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 031f 	and.w	r3, r3, #31
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800166c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6093      	str	r3, [r2, #8]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001694:	d101      	bne.n	800169a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016e4:	d101      	bne.n	80016ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001708:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <LL_ADC_IsEnabled+0x18>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <LL_ADC_IsEnabled+0x1a>
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001756:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b04      	cmp	r3, #4
 8001780:	d101      	bne.n	8001786 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d101      	bne.n	80017ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e167      	b.n	8001aa6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe ff7b 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff3f 	bl	8001680 <LL_ADC_IsDeepPowerDownEnabled>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff25 	bl	800165c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff5a 	bl	80016d0 <LL_ADC_IsInternalRegulatorEnabled>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d115      	bne.n	800184e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff3e 	bl	80016a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800182c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ab0 <HAL_ADC_Init+0x2f4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	4aa0      	ldr	r2, [pc, #640]	@ (8001ab4 <HAL_ADC_Init+0x2f8>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001840:	e002      	b.n	8001848 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3b01      	subs	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff3c 	bl	80016d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001862:	f043 0210 	orr.w	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff75 	bl	800176e <LL_ADC_REG_IsConversionOngoing>
 8001884:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 8100 	bne.w	8001a94 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 80fc 	bne.w	8001a94 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018a4:	f043 0202 	orr.w	r2, r3, #2
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff35 	bl	8001720 <LL_ADC_IsEnabled>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d111      	bne.n	80018e0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80018c0:	f7ff ff2e 	bl	8001720 <LL_ADC_IsEnabled>
 80018c4:	4604      	mov	r4, r0
 80018c6:	487c      	ldr	r0, [pc, #496]	@ (8001ab8 <HAL_ADC_Init+0x2fc>)
 80018c8:	f7ff ff2a 	bl	8001720 <LL_ADC_IsEnabled>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4323      	orrs	r3, r4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4619      	mov	r1, r3
 80018da:	4878      	ldr	r0, [pc, #480]	@ (8001abc <HAL_ADC_Init+0x300>)
 80018dc:	f7ff fd50 	bl	8001380 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7f5b      	ldrb	r3, [r3, #29]
 80018e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800190a:	2b01      	cmp	r3, #1
 800190c:	d106      	bne.n	800191c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	045b      	lsls	r3, r3, #17
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d009      	beq.n	8001938 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b60      	ldr	r3, [pc, #384]	@ (8001ac0 <HAL_ADC_Init+0x304>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	430b      	orrs	r3, r1
 800194a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff14 	bl	8001794 <LL_ADC_INJ_IsConversionOngoing>
 800196c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d16d      	bne.n	8001a50 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d16a      	bne.n	8001a50 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800197e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001986:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001996:	f023 0302 	bic.w	r3, r3, #2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80019ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6911      	ldr	r1, [r2, #16]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80019da:	e013      	b.n	8001a04 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80019ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d118      	bne.n	8001a40 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a24:	4311      	orrs	r1, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a30:	430a      	orrs	r2, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	e007      	b.n	8001a50 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10c      	bne.n	8001a72 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f023 010f 	bic.w	r1, r3, #15
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020f 	bic.w	r2, r2, #15
 8001a80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a92:	e007      	b.n	8001aa4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	053e2d63 	.word	0x053e2d63
 8001ab8:	50000100 	.word	0x50000100
 8001abc:	50000300 	.word	0x50000300
 8001ac0:	fff04007 	.word	0xfff04007

08001ac4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad0:	4851      	ldr	r0, [pc, #324]	@ (8001c18 <HAL_ADC_Start_DMA+0x154>)
 8001ad2:	f7ff fdb5 	bl	8001640 <LL_ADC_GetMultimode>
 8001ad6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fe46 	bl	800176e <LL_ADC_REG_IsConversionOngoing>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 808f 	bne.w	8001c08 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_Start_DMA+0x34>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e08a      	b.n	8001c0e <HAL_ADC_Start_DMA+0x14a>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d002      	beq.n	8001b12 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	d173      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fc84 	bl	8002420 <ADC_Enable>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d166      	bne.n	8001bf0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <HAL_ADC_Start_DMA+0x158>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d002      	beq.n	8001b46 <HAL_ADC_Start_DMA+0x82>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e001      	b.n	8001b4a <HAL_ADC_Start_DMA+0x86>
 8001b46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d002      	beq.n	8001b58 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b74:	f023 0206 	bic.w	r2, r3, #6
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b88:	4a25      	ldr	r2, [pc, #148]	@ (8001c20 <HAL_ADC_Start_DMA+0x15c>)
 8001b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_ADC_Start_DMA+0x160>)
 8001b92:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <HAL_ADC_Start_DMA+0x164>)
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0210 	orr.w	r2, r2, #16
 8001bba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3340      	adds	r3, #64	@ 0x40
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f001 fb14 	bl	8003208 <HAL_DMA_Start_IT>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fdac 	bl	8001746 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bee:	e00d      	b.n	8001c0c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001bf8:	e008      	b.n	8001c0c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001c06:	e001      	b.n	8001c0c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	50000300 	.word	0x50000300
 8001c1c:	50000100 	.word	0x50000100
 8001c20:	0800252d 	.word	0x0800252d
 8001c24:	08002605 	.word	0x08002605
 8001c28:	08002621 	.word	0x08002621

08001c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0b6      	sub	sp, #216	@ 0xd8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x22>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e3c8      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x7b4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fd7d 	bl	800176e <LL_ADC_REG_IsConversionOngoing>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 83ad 	bne.w	80023d6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f7ff fc5e 	bl	800154a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fd6b 	bl	800176e <LL_ADC_REG_IsConversionOngoing>
 8001c98:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fd77 	bl	8001794 <LL_ADC_INJ_IsConversionOngoing>
 8001ca6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001caa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 81d9 	bne.w	8002066 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 81d4 	bne.w	8002066 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7ff fc65 	bl	80015a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fc0c 	bl	80014fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001ce6:	e00e      	b.n	8001d06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f7ff fc54 	bl	80015a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fbfc 	bl	80014fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d022      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6919      	ldr	r1, [r3, #16]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d38:	f7ff fb56 	bl	80013e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6919      	ldr	r1, [r3, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fba2 	bl	8001492 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x124>
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x126>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461a      	mov	r2, r3
 8001d68:	f7ff fbae 	bl	80014c8 <LL_ADC_SetOffsetSaturation>
 8001d6c:	e17b      	b.n	8002066 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fb5b 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x15a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb50 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x198>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fb45 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e004      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001dcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1b0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	e018      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1e2>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e004      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d106      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fb14 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff faf8 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x220>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff faed 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	e01e      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x25e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fae2 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e004      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x276>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	e018      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x2a8>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e004      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fab1 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fa95 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x2e6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fa8a 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	e01e      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x324>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fa7f 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001f54:	2320      	movs	r3, #32
 8001f56:	e004      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x33c>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	e016      	b.n	8001faa <HAL_ADC_ConfigChannel+0x36a>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e004      	b.n	8001faa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d106      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fa50 	bl	800145c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fa34 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x3a8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fa29 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x3d8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2103      	movs	r1, #3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fa1e 	bl	8001430 <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002002:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800200e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x3f0>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	e011      	b.n	8002054 <HAL_ADC_ConfigChannel+0x414>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800203e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002040:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e003      	b.n	8002054 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800204c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f9fb 	bl	800145c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fb58 	bl	8001720 <LL_ADC_IsEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8140 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6819      	ldr	r1, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fab7 	bl	80015f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4a8f      	ldr	r2, [pc, #572]	@ (80022cc <HAL_ADC_ConfigChannel+0x68c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f040 8131 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x47e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2b09      	cmp	r3, #9
 80020b4:	bf94      	ite	ls
 80020b6:	2301      	movls	r3, #1
 80020b8:	2300      	movhi	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	e019      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x4b2>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80020cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020ce:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80020d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80020da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	bf94      	ite	ls
 80020ec:	2301      	movls	r3, #1
 80020ee:	2300      	movhi	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d079      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4d2>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	3301      	adds	r3, #1
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002110:	e015      	b.n	800213e <HAL_ADC_ConfigChannel+0x4fe>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002122:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800212e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x51e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	e017      	b.n	800218e <HAL_ADC_ConfigChannel+0x54e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e003      	b.n	8002182 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800217a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	ea42 0103 	orr.w	r1, r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x574>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	051b      	lsls	r3, r3, #20
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x5a6>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80021c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e6:	430b      	orrs	r3, r1
 80021e8:	e081      	b.n	80022ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x5c6>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	3301      	adds	r3, #1
 80021fe:	069b      	lsls	r3, r3, #26
 8002200:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002204:	e015      	b.n	8002232 <HAL_ADC_ConfigChannel+0x5f2>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e003      	b.n	800222a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x612>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	3301      	adds	r3, #1
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	e017      	b.n	8002282 <HAL_ADC_ConfigChannel+0x642>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]
  return result;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x66e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x6ac>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	613b      	str	r3, [r7, #16]
  return result;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80022c6:	2320      	movs	r3, #32
 80022c8:	e006      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x698>
 80022ca:	bf00      	nop
 80022cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	051b      	lsls	r3, r3, #20
 80022e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7ff f955 	bl	80015a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b3f      	ldr	r3, [pc, #252]	@ (80023fc <HAL_ADC_ConfigChannel+0x7bc>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d071      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002304:	483e      	ldr	r0, [pc, #248]	@ (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 8002306:	f7ff f861 	bl	80013cc <LL_ADC_GetCommonPathInternalCh>
 800230a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3c      	ldr	r2, [pc, #240]	@ (8002404 <HAL_ADC_ConfigChannel+0x7c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d004      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x6e2>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3a      	ldr	r2, [pc, #232]	@ (8002408 <HAL_ADC_ConfigChannel+0x7c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d127      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d121      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002336:	d157      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002340:	4619      	mov	r1, r3
 8002342:	482f      	ldr	r0, [pc, #188]	@ (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 8002344:	f7ff f82f 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002348:	4b30      	ldr	r3, [pc, #192]	@ (800240c <HAL_ADC_ConfigChannel+0x7cc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	4a30      	ldr	r2, [pc, #192]	@ (8002410 <HAL_ADC_ConfigChannel+0x7d0>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002362:	e002      	b.n	800236a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b01      	subs	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002370:	e03a      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <HAL_ADC_ConfigChannel+0x7d4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d113      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800237c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a22      	ldr	r2, [pc, #136]	@ (8002418 <HAL_ADC_ConfigChannel+0x7d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02a      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239a:	4619      	mov	r1, r3
 800239c:	4818      	ldr	r0, [pc, #96]	@ (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 800239e:	f7ff f802 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a2:	e021      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <HAL_ADC_ConfigChannel+0x7dc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11c      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_ADC_ConfigChannel+0x7d8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d011      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023cc:	4619      	mov	r1, r3
 80023ce:	480c      	ldr	r0, [pc, #48]	@ (8002400 <HAL_ADC_ConfigChannel+0x7c0>)
 80023d0:	f7fe ffe9 	bl	80013a6 <LL_ADC_SetCommonPathInternalCh>
 80023d4:	e008      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	37d8      	adds	r7, #216	@ 0xd8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	80080000 	.word	0x80080000
 8002400:	50000300 	.word	0x50000300
 8002404:	c3210000 	.word	0xc3210000
 8002408:	90c00010 	.word	0x90c00010
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	c7520000 	.word	0xc7520000
 8002418:	50000100 	.word	0x50000100
 800241c:	cb840000 	.word	0xcb840000

08002420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f975 	bl	8001720 <LL_ADC_IsEnabled>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d169      	bne.n	8002510 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	4b36      	ldr	r3, [pc, #216]	@ (800251c <ADC_Enable+0xfc>)
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e055      	b.n	8002512 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f944 	bl	80016f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002470:	482b      	ldr	r0, [pc, #172]	@ (8002520 <ADC_Enable+0x100>)
 8002472:	f7fe ffab 	bl	80013cc <LL_ADC_GetCommonPathInternalCh>
 8002476:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002480:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <ADC_Enable+0x104>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <ADC_Enable+0x108>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800249a:	e002      	b.n	80024a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3b01      	subs	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024a8:	f7fe ff5e 	bl	8001368 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ae:	e028      	b.n	8002502 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff f933 	bl	8001720 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f917 	bl	80016f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ca:	f7fe ff4d 	bl	8001368 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d914      	bls.n	8002502 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d00d      	beq.n	8002502 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b01      	cmp	r3, #1
 800250e:	d1cf      	bne.n	80024b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	8000003f 	.word	0x8000003f
 8002520:	50000300 	.word	0x50000300
 8002524:	20000000 	.word	0x20000000
 8002528:	053e2d63 	.word	0x053e2d63

0800252c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	d14b      	bne.n	80025de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d021      	beq.n	80025a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe ffdd 	bl	8001524 <LL_ADC_REG_IsTriggerSourceSWStart>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d032      	beq.n	80025d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d12b      	bne.n	80025d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11f      	bne.n	80025d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025a2:	e018      	b.n	80025d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d111      	bne.n	80025d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d105      	bne.n	80025d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	f043 0201 	orr.w	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7fe fae6 	bl	8000ba8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025dc:	e00e      	b.n	80025fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff fb1e 	bl	8001c2c <HAL_ADC_ErrorCallback>
}
 80025f0:	e004      	b.n	80025fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	4798      	blx	r3
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7fe faa6 	bl	8000b64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff faf0 	bl	8001c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <LL_ADC_IsEnabled>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <LL_ADC_IsEnabled+0x18>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <LL_ADC_IsEnabled+0x1a>
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <LL_ADC_REG_IsConversionOngoing>:
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d101      	bne.n	8002692 <LL_ADC_REG_IsConversionOngoing+0x18>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b0a1      	sub	sp, #132	@ 0x84
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e08b      	b.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026c6:	2300      	movs	r3, #0
 80026c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026ca:	2300      	movs	r3, #0
 80026cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026d6:	d102      	bne.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026d8:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	e001      	b.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	f043 0220 	orr.w	r2, r3, #32
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e06a      	b.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ffb9 	bl	800267a <LL_ADC_REG_IsConversionOngoing>
 8002708:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffb3 	bl	800267a <LL_ADC_REG_IsConversionOngoing>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d14c      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800271a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800271c:	2b00      	cmp	r3, #0
 800271e:	d149      	bne.n	80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002720:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002722:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d028      	beq.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800272c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800273e:	035b      	lsls	r3, r3, #13
 8002740:	430b      	orrs	r3, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002746:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002748:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800274c:	f7ff ff82 	bl	8002654 <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	4823      	ldr	r0, [pc, #140]	@ (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002754:	f7ff ff7e 	bl	8002654 <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d133      	bne.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002768:	f023 030f 	bic.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	6811      	ldr	r1, [r2, #0]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	430a      	orrs	r2, r1
 8002776:	431a      	orrs	r2, r3
 8002778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800277c:	e024      	b.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800277e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002788:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800278e:	f7ff ff61 	bl	8002654 <LL_ADC_IsEnabled>
 8002792:	4604      	mov	r4, r0
 8002794:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002796:	f7ff ff5d 	bl	8002654 <LL_ADC_IsEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	4323      	orrs	r3, r4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d112      	bne.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027aa:	f023 030f 	bic.w	r3, r3, #15
 80027ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027b2:	e009      	b.n	80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027c6:	e000      	b.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3784      	adds	r7, #132	@ 0x84
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	50000100 	.word	0x50000100
 80027e4:	50000300 	.word	0x50000300

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	@ (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	@ (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff29 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff40 	bl	8002830 <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff90 	bl	80028dc <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5f 	bl	8002888 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff33 	bl	800284c <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa4 	bl	8002944 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e014      	b.n	8002a42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7fd ff15 	bl	8000858 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b2      	b.n	8002bca <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_DAC_Start_DMA+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0ac      	b.n	8002bca <HAL_DAC_Start_DMA+0x17e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d129      	bne.n	8002ad6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a53      	ldr	r2, [pc, #332]	@ (8002bd4 <HAL_DAC_Start_DMA+0x188>)
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a52      	ldr	r2, [pc, #328]	@ (8002bd8 <HAL_DAC_Start_DMA+0x18c>)
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4a51      	ldr	r2, [pc, #324]	@ (8002bdc <HAL_DAC_Start_DMA+0x190>)
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DAC_Start_DMA+0x6c>
 8002ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d005      	beq.n	8002ac2 <HAL_DAC_Start_DMA+0x76>
 8002ab6:	e009      	b.n	8002acc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3308      	adds	r3, #8
 8002abe:	61bb      	str	r3, [r7, #24]
        break;
 8002ac0:	e033      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	61bb      	str	r3, [r7, #24]
        break;
 8002aca:	e02e      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e029      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	4a41      	ldr	r2, [pc, #260]	@ (8002be0 <HAL_DAC_Start_DMA+0x194>)
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a40      	ldr	r2, [pc, #256]	@ (8002be4 <HAL_DAC_Start_DMA+0x198>)
 8002ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	@ (8002be8 <HAL_DAC_Start_DMA+0x19c>)
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002afc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_DAC_Start_DMA+0xc0>
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d005      	beq.n	8002b16 <HAL_DAC_Start_DMA+0xca>
 8002b0a:	e009      	b.n	8002b20 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	61bb      	str	r3, [r7, #24]
        break;
 8002b14:	e009      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3318      	adds	r3, #24
 8002b1c:	61bb      	str	r3, [r7, #24]
        break;
 8002b1e:	e004      	b.n	8002b2a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	331c      	adds	r3, #28
 8002b26:	61bb      	str	r3, [r7, #24]
        break;
 8002b28:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6898      	ldr	r0, [r3, #8]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	f000 fb5d 	bl	8003208 <HAL_DMA_Start_IT>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	77fb      	strb	r3, [r7, #31]
 8002b52:	e010      	b.n	8002b76 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68d8      	ldr	r0, [r3, #12]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f000 fb4b 	bl	8003208 <HAL_DMA_Start_IT>
 8002b72:	4603      	mov	r3, r0
 8002b74:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b7c:	7ffb      	ldrb	r3, [r7, #31]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11c      	bne.n	8002bbc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <HAL_DAC_Start_DMA+0x1a0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	4a13      	ldr	r2, [pc, #76]	@ (8002bf0 <HAL_DAC_Start_DMA+0x1a4>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_DAC_Start_DMA+0x162>
 8002bba:	e005      	b.n	8002bc8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08002fa5 	.word	0x08002fa5
 8002bd8:	08002fc7 	.word	0x08002fc7
 8002bdc:	08002fe3 	.word	0x08002fe3
 8002be0:	0800304d 	.word	0x0800304d
 8002be4:	0800306f 	.word	0x0800306f
 8002be8:	0800308b 	.word	0x0800308b
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	053e2d63 	.word	0x053e2d63

08002bf4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_DAC_ConfigChannel+0x1c>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e1a1      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	795b      	ldrb	r3, [r3, #5]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_DAC_ConfigChannel+0x32>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e198      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x364>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d17a      	bne.n	8002d6c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c76:	f7fe fb77 	bl	8001368 <HAL_GetTick>
 8002c7a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d13d      	bne.n	8002cfe <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c82:	e018      	b.n	8002cb6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c84:	f7fe fb70 	bl	8001368 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d911      	bls.n	8002cb6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f043 0208 	orr.w	r2, r3, #8
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e16e      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1df      	bne.n	8002c84 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cce:	e020      	b.n	8002d12 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd0:	f7fe fb4a 	bl	8001368 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d90f      	bls.n	8002cfe <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da0a      	bge.n	8002cfe <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f043 0208 	orr.w	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e14a      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dbe3      	blt.n	8002cd0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	ea02 0103 	and.w	r1, r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	21ff      	movs	r1, #255	@ 0xff
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	ea02 0103 	and.w	r1, r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d11d      	bne.n	8002db0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	221f      	movs	r2, #31
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	4313      	orrs	r3, r2
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	4013      	ands	r3, r2
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	e00f      	b.n	8002dfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d102      	bne.n	8002de8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002de2:	2301      	movs	r3, #1
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	e008      	b.n	8002dfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002df0:	2301      	movs	r3, #1
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	e001      	b.n	8002dfa <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d102      	bne.n	8002e2e <HAL_DAC_ConfigChannel+0x1fe>
 8002e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2c:	e000      	b.n	8002e30 <HAL_DAC_ConfigChannel+0x200>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	4013      	ands	r3, r2
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	795b      	ldrb	r3, [r3, #5]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d102      	bne.n	8002e5a <HAL_DAC_ConfigChannel+0x22a>
 8002e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e58:	e000      	b.n	8002e5c <HAL_DAC_ConfigChannel+0x22c>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d114      	bne.n	8002e9c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e72:	f001 facf 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8002e76:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4a48      	ldr	r2, [pc, #288]	@ (8002f9c <HAL_DAC_ConfigChannel+0x36c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d904      	bls.n	8002e8a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	e00f      	b.n	8002eaa <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4a44      	ldr	r2, [pc, #272]	@ (8002fa0 <HAL_DAC_ConfigChannel+0x370>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d90a      	bls.n	8002ea8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	e006      	b.n	8002eaa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea6:	e000      	b.n	8002eaa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002ea8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	4013      	ands	r3, r2
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	4313      	orrs	r3, r2
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	22c0      	movs	r2, #192	@ 0xc0
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	ea02 0103 	and.w	r1, r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3728      	adds	r7, #40	@ 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	09896800 	.word	0x09896800
 8002fa0:	04c4b400 	.word	0x04c4b400

08002fa4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff fe1e 	bl	8002bf4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	711a      	strb	r2, [r3, #4]
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fe17 	bl	8002c08 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff fe0d 	bl	8002c1c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	711a      	strb	r2, [r3, #4]
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff ffd8 	bl	8003010 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	711a      	strb	r2, [r3, #4]
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff ffd1 	bl	8003024 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f043 0204 	orr.w	r2, r3, #4
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff ffc7 	bl	8003038 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	711a      	strb	r2, [r3, #4]
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e08d      	b.n	80031e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_DMA_Init+0x138>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d80f      	bhi.n	80030f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b45      	ldr	r3, [pc, #276]	@ (80031f4 <HAL_DMA_Init+0x13c>)
 80030de:	4413      	add	r3, r2
 80030e0:	4a45      	ldr	r2, [pc, #276]	@ (80031f8 <HAL_DMA_Init+0x140>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	009a      	lsls	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a42      	ldr	r2, [pc, #264]	@ (80031fc <HAL_DMA_Init+0x144>)
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f4:	e00e      	b.n	8003114 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <HAL_DMA_Init+0x148>)
 80030fe:	4413      	add	r3, r2
 8003100:	4a3d      	ldr	r2, [pc, #244]	@ (80031f8 <HAL_DMA_Init+0x140>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a3c      	ldr	r2, [pc, #240]	@ (8003204 <HAL_DMA_Init+0x14c>)
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9b6 	bl	80034d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003174:	d102      	bne.n	800317c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003190:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_DMA_Init+0x104>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d80c      	bhi.n	80031bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9d6 	bl	8003554 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	e008      	b.n	80031ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40020407 	.word	0x40020407
 80031f4:	bffdfff8 	.word	0xbffdfff8
 80031f8:	cccccccd 	.word	0xcccccccd
 80031fc:	40020000 	.word	0x40020000
 8003200:	bffdfbf8 	.word	0xbffdfbf8
 8003204:	40020400 	.word	0x40020400

08003208 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Start_IT+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e066      	b.n	80032f6 <HAL_DMA_Start_IT+0xee>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d155      	bne.n	80032e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f8fb 	bl	800345c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 020e 	orr.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00f      	b.n	80032a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 020a 	orr.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e005      	b.n	80032f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2204      	movs	r2, #4
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d026      	beq.n	8003378 <HAL_DMA_IRQHandler+0x7a>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d021      	beq.n	8003378 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d107      	bne.n	8003352 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f003 021f 	and.w	r2, r3, #31
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	2104      	movs	r1, #4
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	2b00      	cmp	r3, #0
 800336c:	d071      	beq.n	8003452 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003376:	e06c      	b.n	8003452 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2202      	movs	r2, #2
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02e      	beq.n	80033ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d029      	beq.n	80033ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 020a 	bic.w	r2, r2, #10
 80033b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2102      	movs	r1, #2
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d038      	beq.n	8003452 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033e8:	e033      	b.n	8003452 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2208      	movs	r2, #8
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02a      	beq.n	8003454 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d025      	beq.n	8003454 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020e 	bic.w	r2, r2, #14
 8003416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003452:	bf00      	nop
 8003454:	bf00      	nop
}
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003472:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d108      	bne.n	80034bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ba:	e007      	b.n	80034cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d802      	bhi.n	80034f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034ec:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e001      	b.n	80034f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034f4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3b08      	subs	r3, #8
 8003502:	4a12      	ldr	r2, [pc, #72]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	461a      	mov	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0b      	ldr	r2, [pc, #44]	@ (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003522:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40020407 	.word	0x40020407
 8003544:	40020800 	.word	0x40020800
 8003548:	40020820 	.word	0x40020820
 800354c:	cccccccd 	.word	0xcccccccd
 8003550:	40020880 	.word	0x40020880

08003554 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003576:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3b01      	subs	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	1000823f 	.word	0x1000823f
 8003598:	40020940 	.word	0x40020940

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035aa:	e15a      	b.n	8003862 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 814c 	beq.w	800385c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d005      	beq.n	80035dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d130      	bne.n	800363e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003612:	2201      	movs	r2, #1
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0201 	and.w	r2, r3, #1
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d017      	beq.n	800367a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d123      	bne.n	80036ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	08da      	lsrs	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3208      	adds	r2, #8
 800368e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	6939      	ldr	r1, [r7, #16]
 80036ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0203 	and.w	r2, r3, #3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80a6 	beq.w	800385c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003710:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_GPIO_Init+0x2e4>)
 8003712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003714:	4a5a      	ldr	r2, [pc, #360]	@ (8003880 <HAL_GPIO_Init+0x2e4>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6613      	str	r3, [r2, #96]	@ 0x60
 800371c:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_GPIO_Init+0x2e4>)
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003728:	4a56      	ldr	r2, [pc, #344]	@ (8003884 <HAL_GPIO_Init+0x2e8>)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003752:	d01f      	beq.n	8003794 <HAL_GPIO_Init+0x1f8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4c      	ldr	r2, [pc, #304]	@ (8003888 <HAL_GPIO_Init+0x2ec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d019      	beq.n	8003790 <HAL_GPIO_Init+0x1f4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4b      	ldr	r2, [pc, #300]	@ (800388c <HAL_GPIO_Init+0x2f0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_GPIO_Init+0x1f0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a4a      	ldr	r2, [pc, #296]	@ (8003890 <HAL_GPIO_Init+0x2f4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00d      	beq.n	8003788 <HAL_GPIO_Init+0x1ec>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a49      	ldr	r2, [pc, #292]	@ (8003894 <HAL_GPIO_Init+0x2f8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x1e8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a48      	ldr	r2, [pc, #288]	@ (8003898 <HAL_GPIO_Init+0x2fc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_GPIO_Init+0x1e4>
 800377c:	2305      	movs	r3, #5
 800377e:	e00a      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 8003780:	2306      	movs	r3, #6
 8003782:	e008      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 8003784:	2304      	movs	r3, #4
 8003786:	e006      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 8003788:	2303      	movs	r3, #3
 800378a:	e004      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 800378c:	2302      	movs	r3, #2
 800378e:	e002      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_GPIO_Init+0x1fa>
 8003794:	2300      	movs	r3, #0
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	f002 0203 	and.w	r2, r2, #3
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	4093      	lsls	r3, r2
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a6:	4937      	ldr	r1, [pc, #220]	@ (8003884 <HAL_GPIO_Init+0x2e8>)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	3302      	adds	r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b4:	4b39      	ldr	r3, [pc, #228]	@ (800389c <HAL_GPIO_Init+0x300>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037d8:	4a30      	ldr	r2, [pc, #192]	@ (800389c <HAL_GPIO_Init+0x300>)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_GPIO_Init+0x300>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003802:	4a26      	ldr	r2, [pc, #152]	@ (800389c <HAL_GPIO_Init+0x300>)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003808:	4b24      	ldr	r3, [pc, #144]	@ (800389c <HAL_GPIO_Init+0x300>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800382c:	4a1b      	ldr	r2, [pc, #108]	@ (800389c <HAL_GPIO_Init+0x300>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003832:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <HAL_GPIO_Init+0x300>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003856:	4a11      	ldr	r2, [pc, #68]	@ (800389c <HAL_GPIO_Init+0x300>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3301      	adds	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f ae9d 	bne.w	80035ac <HAL_GPIO_Init+0x10>
  }
}
 8003872:	bf00      	nop
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40021000 	.word	0x40021000
 8003884:	40010000 	.word	0x40010000
 8003888:	48000400 	.word	0x48000400
 800388c:	48000800 	.word	0x48000800
 8003890:	48000c00 	.word	0x48000c00
 8003894:	48001000 	.word	0x48001000
 8003898:	48001400 	.word	0x48001400
 800389c:	40010400 	.word	0x40010400

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4013      	ands	r3, r2
 80038e8:	041a      	lsls	r2, r3, #16
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43d9      	mvns	r1, r3
 80038ee:	887b      	ldrh	r3, [r7, #2]
 80038f0:	400b      	ands	r3, r1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800390e:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f806 	bl	8003934 <HAL_GPIO_EXTI_Callback>
  }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40010400 	.word	0x40010400

08003934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d141      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800395a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003966:	d131      	bne.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003968:	4b47      	ldr	r3, [pc, #284]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800396e:	4a46      	ldr	r2, [pc, #280]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003978:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003980:	4a41      	ldr	r2, [pc, #260]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2232      	movs	r2, #50	@ 0x32
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a3f      	ldr	r2, [pc, #252]	@ (8003a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	3301      	adds	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800399e:	e002      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a6:	4b38      	ldr	r3, [pc, #224]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039b2:	d102      	bne.n	80039ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f2      	bne.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ba:	4b33      	ldr	r3, [pc, #204]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d158      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e057      	b.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039dc:	e04d      	b.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e4:	d141      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e6:	4b28      	ldr	r3, [pc, #160]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d131      	bne.n	8003a58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f4:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a04:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2232      	movs	r2, #50	@ 0x32
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	0c9b      	lsrs	r3, r3, #18
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2a:	e002      	b.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3e:	d102      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f2      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a46:	4b10      	ldr	r3, [pc, #64]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d112      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e011      	b.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a68:	e007      	b.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a6a:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a72:	4a05      	ldr	r2, [pc, #20]	@ (8003a88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	431bde83 	.word	0x431bde83

08003a94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aa2:	6093      	str	r3, [r2, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40007000 	.word	0x40007000

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e2fe      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4b97      	ldr	r3, [pc, #604]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003adc:	4b94      	ldr	r3, [pc, #592]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d102      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3e>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b8d      	ldr	r3, [pc, #564]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e2d9      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b85      	ldr	r3, [pc, #532]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a84      	ldr	r2, [pc, #528]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b7f      	ldr	r3, [pc, #508]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7e      	ldr	r2, [pc, #504]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7b      	ldr	r2, [pc, #492]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b78      	ldr	r3, [pc, #480]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a77      	ldr	r2, [pc, #476]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a74      	ldr	r2, [pc, #464]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fbfc 	bl	8001368 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fbf8 	bl	8001368 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e29e      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b86:	4b6a      	ldr	r3, [pc, #424]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fbe8 	bl	8001368 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd fbe4 	bl	8001368 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e28a      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bae:	4b60      	ldr	r3, [pc, #384]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d075      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bca:	4b59      	ldr	r3, [pc, #356]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd4:	4b56      	ldr	r3, [pc, #344]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d102      	bne.n	8003bea <HAL_RCC_OscConfig+0x136>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d002      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x13c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11f      	bne.n	8003c30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_OscConfig+0x154>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e25d      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b49      	ldr	r3, [pc, #292]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	4946      	ldr	r1, [pc, #280]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c1c:	4b45      	ldr	r3, [pc, #276]	@ (8003d34 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd fb55 	bl	80012d0 <HAL_InitTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d043      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e249      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fb90 	bl	8001368 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fb8c 	bl	8001368 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e232      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5e:	4b34      	ldr	r3, [pc, #208]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	492d      	ldr	r1, [pc, #180]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
 8003c7e:	e01a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c80:	4b2b      	ldr	r3, [pc, #172]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fb6c 	bl	8001368 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fd fb68 	bl	8001368 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e20e      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1e0>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d041      	beq.n	8003d46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd0:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fd fb45 	bl	8001368 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fd fb41 	bl	8001368 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1e7      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
 8003d02:	e020      	b.n	8003d46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd fb28 	bl	8001368 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1a:	e00d      	b.n	8003d38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fd fb24 	bl	8001368 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d906      	bls.n	8003d38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1ca      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d38:	4b8c      	ldr	r3, [pc, #560]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ea      	bne.n	8003d1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a6 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d58:	4b84      	ldr	r3, [pc, #528]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2b4>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x2b6>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	4a7e      	ldr	r2, [pc, #504]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8a:	4b79      	ldr	r3, [pc, #484]	@ (8003f70 <HAL_RCC_OscConfig+0x4bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d118      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d96:	4b76      	ldr	r3, [pc, #472]	@ (8003f70 <HAL_RCC_OscConfig+0x4bc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a75      	ldr	r2, [pc, #468]	@ (8003f70 <HAL_RCC_OscConfig+0x4bc>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da2:	f7fd fae1 	bl	8001368 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fd fadd 	bl	8001368 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e183      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8003f70 <HAL_RCC_OscConfig+0x4bc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d108      	bne.n	8003de2 <HAL_RCC_OscConfig+0x32e>
 8003dd0:	4b66      	ldr	r3, [pc, #408]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a65      	ldr	r2, [pc, #404]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de0:	e024      	b.n	8003e2c <HAL_RCC_OscConfig+0x378>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d110      	bne.n	8003e0c <HAL_RCC_OscConfig+0x358>
 8003dea:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e00:	4a5a      	ldr	r2, [pc, #360]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e0a:	e00f      	b.n	8003e2c <HAL_RCC_OscConfig+0x378>
 8003e0c:	4b57      	ldr	r3, [pc, #348]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	4a56      	ldr	r2, [pc, #344]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1c:	4b53      	ldr	r3, [pc, #332]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a52      	ldr	r2, [pc, #328]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d016      	beq.n	8003e62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fd fa98 	bl	8001368 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fd fa94 	bl	8001368 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e138      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ed      	beq.n	8003e3c <HAL_RCC_OscConfig+0x388>
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fd fa81 	bl	8001368 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fd fa7d 	bl	8001368 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e121      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e80:	4b3a      	ldr	r3, [pc, #232]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ed      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e94:	4b35      	ldr	r3, [pc, #212]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	4a34      	ldr	r2, [pc, #208]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03c      	beq.n	8003f26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eba:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fd fa50 	bl	8001368 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ecc:	f7fd fa4c 	bl	8001368 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0f2      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ede:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ef      	beq.n	8003ecc <HAL_RCC_OscConfig+0x418>
 8003eec:	e01b      	b.n	8003f26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eee:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fd fa33 	bl	8001368 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f06:	f7fd fa2f 	bl	8001368 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0d5      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ef      	bne.n	8003f06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80c9 	beq.w	80040c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	f000 8083 	beq.w	8004044 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d15e      	bne.n	8004004 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a08      	ldr	r2, [pc, #32]	@ (8003f6c <HAL_RCC_OscConfig+0x4b8>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd fa09 	bl	8001368 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e00c      	b.n	8003f74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fa05 	bl	8001368 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d905      	bls.n	8003f74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0ab      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	4b55      	ldr	r3, [pc, #340]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ec      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f80:	4b52      	ldr	r3, [pc, #328]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4b52      	ldr	r3, [pc, #328]	@ (80040d0 <HAL_RCC_OscConfig+0x61c>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6a11      	ldr	r1, [r2, #32]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f9a:	0212      	lsls	r2, r2, #8
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fa2:	0852      	lsrs	r2, r2, #1
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0552      	lsls	r2, r2, #21
 8003fa8:	4311      	orrs	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fba:	06d2      	lsls	r2, r2, #27
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	4943      	ldr	r1, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b41      	ldr	r3, [pc, #260]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a40      	ldr	r2, [pc, #256]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a3d      	ldr	r2, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd f9c4 	bl	8001368 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd f9c0 	bl	8001368 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e066      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	4b35      	ldr	r3, [pc, #212]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x530>
 8004002:	e05e      	b.n	80040c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004004:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 800400a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800400e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd f9aa 	bl	8001368 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004018:	f7fd f9a6 	bl	8001368 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04c      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402a:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004036:	4b25      	ldr	r3, [pc, #148]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	4924      	ldr	r1, [pc, #144]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <HAL_RCC_OscConfig+0x620>)
 800403e:	4013      	ands	r3, r2
 8004040:	60cb      	str	r3, [r1, #12]
 8004042:	e03e      	b.n	80040c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e039      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004050:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <HAL_RCC_OscConfig+0x618>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0203 	and.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	429a      	cmp	r2, r3
 8004062:	d12c      	bne.n	80040be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d123      	bne.n	80040be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d11b      	bne.n	80040be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d113      	bne.n	80040be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	3b01      	subs	r3, #1
 80040a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d109      	bne.n	80040be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	019f800c 	.word	0x019f800c
 80040d4:	feeefffc 	.word	0xfeeefffc

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e11e      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b91      	ldr	r3, [pc, #580]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	498c      	ldr	r1, [pc, #560]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b8a      	ldr	r3, [pc, #552]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e106      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d073      	beq.n	8004214 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d129      	bne.n	8004188 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004134:	4b81      	ldr	r3, [pc, #516]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0f4      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004144:	f000 f99e 	bl	8004484 <RCC_GetSysClockFreqFromPLLSource>
 8004148:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a7c      	ldr	r2, [pc, #496]	@ (8004340 <HAL_RCC_ClockConfig+0x268>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d93f      	bls.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004152:	4b7a      	ldr	r3, [pc, #488]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d033      	beq.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d12f      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004172:	4b72      	ldr	r3, [pc, #456]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417a:	4a70      	ldr	r2, [pc, #448]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 800417c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e024      	b.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004190:	4b6a      	ldr	r3, [pc, #424]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0c6      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b66      	ldr	r3, [pc, #408]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0be      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80041b0:	f000 f8ce 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4a61      	ldr	r2, [pc, #388]	@ (8004340 <HAL_RCC_ClockConfig+0x268>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d909      	bls.n	80041d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041be:	4b5f      	ldr	r3, [pc, #380]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041c6:	4a5d      	ldr	r2, [pc, #372]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80041c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041ce:	2380      	movs	r3, #128	@ 0x80
 80041d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b5a      	ldr	r3, [pc, #360]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4957      	ldr	r1, [pc, #348]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd f8c0 	bl	8001368 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd f8bc 	bl	8001368 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e095      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b4e      	ldr	r3, [pc, #312]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d023      	beq.n	8004268 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a42      	ldr	r2, [pc, #264]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004236:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004244:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800424c:	4a3b      	ldr	r2, [pc, #236]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4936      	ldr	r1, [pc, #216]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
 8004266:	e008      	b.n	800427a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	d105      	bne.n	800427a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800426e:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4a32      	ldr	r2, [pc, #200]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 8004274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004278:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d21d      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 020f 	bic.w	r2, r3, #15
 8004290:	4929      	ldr	r1, [pc, #164]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004298:	f7fd f866 	bl	8001368 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fd f862 	bl	8001368 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e03b      	b.n	800432e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_RCC_ClockConfig+0x260>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1ed      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4917      	ldr	r1, [pc, #92]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ee:	4b13      	ldr	r3, [pc, #76]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	490f      	ldr	r1, [pc, #60]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004302:	f000 f825 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004306:	4602      	mov	r2, r0
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <HAL_RCC_ClockConfig+0x264>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	490c      	ldr	r1, [pc, #48]	@ (8004344 <HAL_RCC_ClockConfig+0x26c>)
 8004314:	5ccb      	ldrb	r3, [r1, r3]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a0a      	ldr	r2, [pc, #40]	@ (8004348 <HAL_RCC_ClockConfig+0x270>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <HAL_RCC_ClockConfig+0x274>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc ffd2 	bl	80012d0 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000
 8004340:	04c4b400 	.word	0x04c4b400
 8004344:	08006d94 	.word	0x08006d94
 8004348:	20000000 	.word	0x20000000
 800434c:	2000000c 	.word	0x2000000c

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004356:	4b2c      	ldr	r3, [pc, #176]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b04      	cmp	r3, #4
 8004360:	d102      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004362:	4b2a      	ldr	r3, [pc, #168]	@ (800440c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e047      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004368:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d102      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004374:	4b26      	ldr	r3, [pc, #152]	@ (8004410 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	e03e      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800437a:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d136      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004390:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	3301      	adds	r3, #1
 800439c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d10c      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ae:	68d2      	ldr	r2, [r2, #12]
 80043b0:	0a12      	lsrs	r2, r2, #8
 80043b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
      break;
 80043bc:	e00c      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043be:	4a13      	ldr	r2, [pc, #76]	@ (800440c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	4a10      	ldr	r2, [pc, #64]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	0a12      	lsrs	r2, r2, #8
 80043cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
      break;
 80043d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	0e5b      	lsrs	r3, r3, #25
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e001      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043f8:	693b      	ldr	r3, [r7, #16]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	00f42400 	.word	0x00f42400
 8004410:	007a1200 	.word	0x007a1200

08004414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004430:	f7ff fff0 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	08006da4 	.word	0x08006da4

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800445c:	f7ff ffda 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0adb      	lsrs	r3, r3, #11
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08006da4 	.word	0x08006da4

08004484 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800448a:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004494:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10c      	bne.n	80044c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b2:	68d2      	ldr	r2, [r2, #12]
 80044b4:	0a12      	lsrs	r2, r2, #8
 80044b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	617b      	str	r3, [r7, #20]
    break;
 80044c0:	e00c      	b.n	80044dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c2:	4a12      	ldr	r2, [pc, #72]	@ (800450c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	0a12      	lsrs	r2, r2, #8
 80044d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
    break;
 80044da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044dc:	4b09      	ldr	r3, [pc, #36]	@ (8004504 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0e5b      	lsrs	r3, r3, #25
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044f6:	687b      	ldr	r3, [r7, #4]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40021000 	.word	0x40021000
 8004508:	007a1200 	.word	0x007a1200
 800450c:	00f42400 	.word	0x00f42400

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451c:	2300      	movs	r3, #0
 800451e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8098 	beq.w	800465e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b43      	ldr	r3, [pc, #268]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4b40      	ldr	r3, [pc, #256]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	4a3f      	ldr	r2, [pc, #252]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004548:	6593      	str	r3, [r2, #88]	@ 0x58
 800454a:	4b3d      	ldr	r3, [pc, #244]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800455a:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a39      	ldr	r2, [pc, #228]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004564:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004566:	f7fc feff 	bl	8001368 <HAL_GetTick>
 800456a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800456c:	e009      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fc fefb 	bl	8001368 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d902      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	74fb      	strb	r3, [r7, #19]
        break;
 8004580:	e005      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004582:	4b30      	ldr	r3, [pc, #192]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ef      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d159      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004594:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d019      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b0:	4b23      	ldr	r3, [pc, #140]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045dc:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fc febb 	bl	8001368 <HAL_GetTick>
 80045f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f4:	e00b      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fc feb7 	bl	8001368 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d902      	bls.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	74fb      	strb	r3, [r7, #19]
            break;
 800460c:	e006      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460e:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ec      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800461c:	7cfb      	ldrb	r3, [r7, #19]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004622:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004638:	e008      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464c:	7c7b      	ldrb	r3, [r7, #17]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4ba6      	ldr	r3, [pc, #664]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	4aa5      	ldr	r2, [pc, #660]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466a:	4ba0      	ldr	r3, [pc, #640]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	499c      	ldr	r1, [pc, #624]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468c:	4b97      	ldr	r3, [pc, #604]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	f023 020c 	bic.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4994      	ldr	r1, [pc, #592]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ae:	4b8f      	ldr	r3, [pc, #572]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	498b      	ldr	r1, [pc, #556]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d0:	4b86      	ldr	r3, [pc, #536]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	4983      	ldr	r1, [pc, #524]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f2:	4b7e      	ldr	r3, [pc, #504]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	497a      	ldr	r1, [pc, #488]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004714:	4b75      	ldr	r3, [pc, #468]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	4972      	ldr	r1, [pc, #456]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004736:	4b6d      	ldr	r3, [pc, #436]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4969      	ldr	r1, [pc, #420]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004758:	4b64      	ldr	r3, [pc, #400]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4961      	ldr	r1, [pc, #388]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800477a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	4958      	ldr	r1, [pc, #352]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800479c:	4b53      	ldr	r3, [pc, #332]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	4950      	ldr	r1, [pc, #320]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b4b      	ldr	r3, [pc, #300]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a4a      	ldr	r2, [pc, #296]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047d4:	4b45      	ldr	r3, [pc, #276]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4942      	ldr	r1, [pc, #264]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a3c      	ldr	r2, [pc, #240]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800480c:	4b37      	ldr	r3, [pc, #220]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481a:	4934      	ldr	r1, [pc, #208]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482c:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a2e      	ldr	r2, [pc, #184]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004836:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004844:	4b29      	ldr	r3, [pc, #164]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	4926      	ldr	r1, [pc, #152]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004862:	d105      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a20      	ldr	r2, [pc, #128]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800487c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	4918      	ldr	r1, [pc, #96]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489a:	d105      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489c:	4b13      	ldr	r3, [pc, #76]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a12      	ldr	r2, [pc, #72]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048b4:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c2:	490a      	ldr	r1, [pc, #40]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048d2:	d105      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80048e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000

080048f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e049      	b.n	8004996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc fb2c 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 fb14 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e042      	b.n	8004a3e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a21      	ldr	r2, [pc, #132]	@ (8004a4c <HAL_TIM_Base_Start+0xac>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_TIM_Base_Start+0x5c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d2:	d013      	beq.n	80049fc <HAL_TIM_Base_Start+0x5c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <HAL_TIM_Base_Start+0xb0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_TIM_Base_Start+0x5c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <HAL_TIM_Base_Start+0xb4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_TIM_Base_Start+0x5c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <HAL_TIM_Base_Start+0xb8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_TIM_Base_Start+0x5c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_TIM_Base_Start+0xbc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d115      	bne.n	8004a28 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <HAL_TIM_Base_Start+0xc0>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d015      	beq.n	8004a3a <HAL_TIM_Base_Start+0x9a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a14:	d011      	beq.n	8004a3a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e008      	b.n	8004a3a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e000      	b.n	8004a3c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40013400 	.word	0x40013400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	00010007 	.word	0x00010007

08004a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d020      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01b      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0202 	mvn.w	r2, #2
 8004a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa36 	bl	8004f20 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa28 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa39 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d020      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0204 	mvn.w	r2, #4
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa10 	bl	8004f20 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa02 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa13 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d020      	beq.n	8004b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0208 	mvn.w	r2, #8
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2204      	movs	r2, #4
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9ea 	bl	8004f20 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9dc 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f9ed 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d020      	beq.n	8004bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01b      	beq.n	8004bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0210 	mvn.w	r2, #16
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2208      	movs	r2, #8
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9c4 	bl	8004f20 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9b6 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f9c7 	bl	8004f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0201 	mvn.w	r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f994 	bl	8004ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fb73 	bl	80052e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00c      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb6b 	bl	80052f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f981 	bl	8004f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0220 	mvn.w	r2, #32
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb33 	bl	80052d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fb3f 	bl	800530c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb37 	bl	8005320 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fb2f 	bl	8005334 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb27 	bl	8005348 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0de      	b.n	8004ede <HAL_TIM_ConfigClockSource+0x1da>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004d3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a63      	ldr	r2, [pc, #396]	@ (8004ee8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f000 80a9 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d60:	4a61      	ldr	r2, [pc, #388]	@ (8004ee8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f200 80ae 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d68:	4a60      	ldr	r2, [pc, #384]	@ (8004eec <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f000 80a1 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d70:	4a5e      	ldr	r2, [pc, #376]	@ (8004eec <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f200 80a6 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d78:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	f000 8099 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d80:	4a5b      	ldr	r2, [pc, #364]	@ (8004ef0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	f200 809e 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d88:	4a5a      	ldr	r2, [pc, #360]	@ (8004ef4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f000 8091 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d90:	4a58      	ldr	r2, [pc, #352]	@ (8004ef4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	f200 8096 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d9c:	f000 8089 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004da0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004da4:	f200 808e 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dac:	d03e      	beq.n	8004e2c <HAL_TIM_ConfigClockSource+0x128>
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db2:	f200 8087 	bhi.w	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	f000 8086 	beq.w	8004eca <HAL_TIM_ConfigClockSource+0x1c6>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc2:	d87f      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dc4:	2b70      	cmp	r3, #112	@ 0x70
 8004dc6:	d01a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xfa>
 8004dc8:	2b70      	cmp	r3, #112	@ 0x70
 8004dca:	d87b      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dcc:	2b60      	cmp	r3, #96	@ 0x60
 8004dce:	d050      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x16e>
 8004dd0:	2b60      	cmp	r3, #96	@ 0x60
 8004dd2:	d877      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dd4:	2b50      	cmp	r3, #80	@ 0x50
 8004dd6:	d03c      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x14e>
 8004dd8:	2b50      	cmp	r3, #80	@ 0x50
 8004dda:	d873      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	d058      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x18e>
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d86f      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004de4:	2b30      	cmp	r3, #48	@ 0x30
 8004de6:	d064      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004de8:	2b30      	cmp	r3, #48	@ 0x30
 8004dea:	d86b      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d060      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d867      	bhi.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d05a      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004dfc:	e062      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e0e:	f000 f9bd 	bl	800518c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	609a      	str	r2, [r3, #8]
      break;
 8004e2a:	e04f      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e3c:	f000 f9a6 	bl	800518c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e4e:	609a      	str	r2, [r3, #8]
      break;
 8004e50:	e03c      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 f918 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2150      	movs	r1, #80	@ 0x50
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f971 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e02c      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f937 	bl	80050f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2160      	movs	r1, #96	@ 0x60
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f961 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e01c      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 f8f8 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2140      	movs	r1, #64	@ 0x40
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f951 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e00c      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f000 f948 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004ec2:	e003      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec8:	e000      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	00100070 	.word	0x00100070
 8004eec:	00100040 	.word	0x00100040
 8004ef0:	00100030 	.word	0x00100030
 8004ef4:	00100020 	.word	0x00100020

08004ef8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a42      	ldr	r2, [pc, #264]	@ (8005078 <TIM_Base_SetConfig+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800507c <TIM_Base_SetConfig+0x120>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3e      	ldr	r2, [pc, #248]	@ (8005080 <TIM_Base_SetConfig+0x124>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x38>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8005084 <TIM_Base_SetConfig+0x128>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a33      	ldr	r2, [pc, #204]	@ (8005078 <TIM_Base_SetConfig+0x11c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb4:	d017      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a30      	ldr	r2, [pc, #192]	@ (800507c <TIM_Base_SetConfig+0x120>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8005080 <TIM_Base_SetConfig+0x124>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00f      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8005084 <TIM_Base_SetConfig+0x128>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <TIM_Base_SetConfig+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <TIM_Base_SetConfig+0x130>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0x8a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <TIM_Base_SetConfig+0x134>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00f      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a17      	ldr	r2, [pc, #92]	@ (8005084 <TIM_Base_SetConfig+0x128>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a16      	ldr	r2, [pc, #88]	@ (8005088 <TIM_Base_SetConfig+0x12c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a15      	ldr	r2, [pc, #84]	@ (800508c <TIM_Base_SetConfig+0x130>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0xe8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <TIM_Base_SetConfig+0x134>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d105      	bne.n	800506a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]
  }
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f023 0210 	bic.w	r2, r3, #16
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800511c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800512e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	f043 0307 	orr.w	r3, r3, #7
 8005178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	021a      	lsls	r2, r3, #8
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e065      	b.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2c      	ldr	r2, [pc, #176]	@ (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2b      	ldr	r2, [pc, #172]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800521e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005234:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525a:	d013      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a18      	ldr	r2, [pc, #96]	@ (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a17      	ldr	r2, [pc, #92]	@ (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a12      	ldr	r2, [pc, #72]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a13      	ldr	r2, [pc, #76]	@ (80052cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10c      	bne.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	4313      	orrs	r3, r2
 8005294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40013400 	.word	0x40013400
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e042      	b.n	80053f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f83b 	bl	80053fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2224      	movs	r2, #36	@ 0x24
 800538a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fb8c 	bl	8005ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8bd 	bl	800552c <UART_SetConfig>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e01b      	b.n	80053f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fc0b 	bl	8005c08 <UART_CheckIdleState>
 80053f2:	4603      	mov	r3, r0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	2b20      	cmp	r3, #32
 8005428:	d17b      	bne.n	8005522 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_UART_Transmit+0x26>
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e074      	b.n	8005524 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2221      	movs	r2, #33	@ 0x21
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800544a:	f7fb ff8d 	bl	8001368 <HAL_GetTick>
 800544e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d108      	bne.n	800547c <HAL_UART_Transmit+0x6c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e003      	b.n	8005484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005484:	e030      	b.n	80054e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fc63 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e03d      	b.n	8005524 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	3302      	adds	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e007      	b.n	80054d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1c8      	bne.n	8005486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2200      	movs	r2, #0
 80054fc:	2140      	movs	r1, #64	@ 0x40
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fc2c 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e006      	b.n	8005524 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b08c      	sub	sp, #48	@ 0x30
 8005532:	af00      	add	r7, sp, #0
 8005534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4313      	orrs	r3, r2
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4bab      	ldr	r3, [pc, #684]	@ (8005808 <UART_SetConfig+0x2dc>)
 800555c:	4013      	ands	r3, r2
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005564:	430b      	orrs	r3, r1
 8005566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4aa0      	ldr	r2, [pc, #640]	@ (800580c <UART_SetConfig+0x2e0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005594:	4313      	orrs	r3, r2
 8005596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80055a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	f023 010f 	bic.w	r1, r3, #15
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a91      	ldr	r2, [pc, #580]	@ (8005810 <UART_SetConfig+0x2e4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d125      	bne.n	800561c <UART_SetConfig+0xf0>
 80055d0:	4b90      	ldr	r3, [pc, #576]	@ (8005814 <UART_SetConfig+0x2e8>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d81a      	bhi.n	8005614 <UART_SetConfig+0xe8>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <UART_SetConfig+0xb8>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005605 	.word	0x08005605
 80055ec:	080055fd 	.word	0x080055fd
 80055f0:	0800560d 	.word	0x0800560d
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fa:	e0d6      	b.n	80057aa <UART_SetConfig+0x27e>
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005602:	e0d2      	b.n	80057aa <UART_SetConfig+0x27e>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560a:	e0ce      	b.n	80057aa <UART_SetConfig+0x27e>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005612:	e0ca      	b.n	80057aa <UART_SetConfig+0x27e>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561a:	e0c6      	b.n	80057aa <UART_SetConfig+0x27e>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7d      	ldr	r2, [pc, #500]	@ (8005818 <UART_SetConfig+0x2ec>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d138      	bne.n	8005698 <UART_SetConfig+0x16c>
 8005626:	4b7b      	ldr	r3, [pc, #492]	@ (8005814 <UART_SetConfig+0x2e8>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d82d      	bhi.n	8005690 <UART_SetConfig+0x164>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <UART_SetConfig+0x110>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005671 	.word	0x08005671
 8005640:	08005691 	.word	0x08005691
 8005644:	08005691 	.word	0x08005691
 8005648:	08005691 	.word	0x08005691
 800564c:	08005681 	.word	0x08005681
 8005650:	08005691 	.word	0x08005691
 8005654:	08005691 	.word	0x08005691
 8005658:	08005691 	.word	0x08005691
 800565c:	08005679 	.word	0x08005679
 8005660:	08005691 	.word	0x08005691
 8005664:	08005691 	.word	0x08005691
 8005668:	08005691 	.word	0x08005691
 800566c:	08005689 	.word	0x08005689
 8005670:	2300      	movs	r3, #0
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005676:	e098      	b.n	80057aa <UART_SetConfig+0x27e>
 8005678:	2302      	movs	r3, #2
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567e:	e094      	b.n	80057aa <UART_SetConfig+0x27e>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005686:	e090      	b.n	80057aa <UART_SetConfig+0x27e>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568e:	e08c      	b.n	80057aa <UART_SetConfig+0x27e>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e088      	b.n	80057aa <UART_SetConfig+0x27e>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5f      	ldr	r2, [pc, #380]	@ (800581c <UART_SetConfig+0x2f0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d125      	bne.n	80056ee <UART_SetConfig+0x1c2>
 80056a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005814 <UART_SetConfig+0x2e8>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056ac:	2b30      	cmp	r3, #48	@ 0x30
 80056ae:	d016      	beq.n	80056de <UART_SetConfig+0x1b2>
 80056b0:	2b30      	cmp	r3, #48	@ 0x30
 80056b2:	d818      	bhi.n	80056e6 <UART_SetConfig+0x1ba>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d00a      	beq.n	80056ce <UART_SetConfig+0x1a2>
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d814      	bhi.n	80056e6 <UART_SetConfig+0x1ba>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <UART_SetConfig+0x19a>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d008      	beq.n	80056d6 <UART_SetConfig+0x1aa>
 80056c4:	e00f      	b.n	80056e6 <UART_SetConfig+0x1ba>
 80056c6:	2300      	movs	r3, #0
 80056c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056cc:	e06d      	b.n	80057aa <UART_SetConfig+0x27e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d4:	e069      	b.n	80057aa <UART_SetConfig+0x27e>
 80056d6:	2304      	movs	r3, #4
 80056d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056dc:	e065      	b.n	80057aa <UART_SetConfig+0x27e>
 80056de:	2308      	movs	r3, #8
 80056e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e4:	e061      	b.n	80057aa <UART_SetConfig+0x27e>
 80056e6:	2310      	movs	r3, #16
 80056e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ec:	e05d      	b.n	80057aa <UART_SetConfig+0x27e>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005820 <UART_SetConfig+0x2f4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d125      	bne.n	8005744 <UART_SetConfig+0x218>
 80056f8:	4b46      	ldr	r3, [pc, #280]	@ (8005814 <UART_SetConfig+0x2e8>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005702:	2bc0      	cmp	r3, #192	@ 0xc0
 8005704:	d016      	beq.n	8005734 <UART_SetConfig+0x208>
 8005706:	2bc0      	cmp	r3, #192	@ 0xc0
 8005708:	d818      	bhi.n	800573c <UART_SetConfig+0x210>
 800570a:	2b80      	cmp	r3, #128	@ 0x80
 800570c:	d00a      	beq.n	8005724 <UART_SetConfig+0x1f8>
 800570e:	2b80      	cmp	r3, #128	@ 0x80
 8005710:	d814      	bhi.n	800573c <UART_SetConfig+0x210>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <UART_SetConfig+0x1f0>
 8005716:	2b40      	cmp	r3, #64	@ 0x40
 8005718:	d008      	beq.n	800572c <UART_SetConfig+0x200>
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0x210>
 800571c:	2300      	movs	r3, #0
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005722:	e042      	b.n	80057aa <UART_SetConfig+0x27e>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572a:	e03e      	b.n	80057aa <UART_SetConfig+0x27e>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005732:	e03a      	b.n	80057aa <UART_SetConfig+0x27e>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573a:	e036      	b.n	80057aa <UART_SetConfig+0x27e>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005742:	e032      	b.n	80057aa <UART_SetConfig+0x27e>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	@ (800580c <UART_SetConfig+0x2e0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d12a      	bne.n	80057a4 <UART_SetConfig+0x278>
 800574e:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <UART_SetConfig+0x2e8>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800575c:	d01a      	beq.n	8005794 <UART_SetConfig+0x268>
 800575e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005762:	d81b      	bhi.n	800579c <UART_SetConfig+0x270>
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005768:	d00c      	beq.n	8005784 <UART_SetConfig+0x258>
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576e:	d815      	bhi.n	800579c <UART_SetConfig+0x270>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <UART_SetConfig+0x250>
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005778:	d008      	beq.n	800578c <UART_SetConfig+0x260>
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x270>
 800577c:	2300      	movs	r3, #0
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005782:	e012      	b.n	80057aa <UART_SetConfig+0x27e>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578a:	e00e      	b.n	80057aa <UART_SetConfig+0x27e>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e00a      	b.n	80057aa <UART_SetConfig+0x27e>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e006      	b.n	80057aa <UART_SetConfig+0x27e>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e002      	b.n	80057aa <UART_SetConfig+0x27e>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a17      	ldr	r2, [pc, #92]	@ (800580c <UART_SetConfig+0x2e0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	f040 80a8 	bne.w	8005906 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d834      	bhi.n	8005828 <UART_SetConfig+0x2fc>
 80057be:	a201      	add	r2, pc, #4	@ (adr r2, 80057c4 <UART_SetConfig+0x298>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	08005829 	.word	0x08005829
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	08005829 	.word	0x08005829
 80057d4:	080057f7 	.word	0x080057f7
 80057d8:	08005829 	.word	0x08005829
 80057dc:	08005829 	.word	0x08005829
 80057e0:	08005829 	.word	0x08005829
 80057e4:	080057ff 	.word	0x080057ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe fe20 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 80057ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ee:	e021      	b.n	8005834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <UART_SetConfig+0x2f8>)
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057f4:	e01e      	b.n	8005834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f6:	f7fe fdab 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80057fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057fc:	e01a      	b.n	8005834 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005804:	e016      	b.n	8005834 <UART_SetConfig+0x308>
 8005806:	bf00      	nop
 8005808:	cfff69f3 	.word	0xcfff69f3
 800580c:	40008000 	.word	0x40008000
 8005810:	40013800 	.word	0x40013800
 8005814:	40021000 	.word	0x40021000
 8005818:	40004400 	.word	0x40004400
 800581c:	40004800 	.word	0x40004800
 8005820:	40004c00 	.word	0x40004c00
 8005824:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005832:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 812a 	beq.w	8005a90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	4a9e      	ldr	r2, [pc, #632]	@ (8005abc <UART_SetConfig+0x590>)
 8005842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005846:	461a      	mov	r2, r3
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	fbb3 f3f2 	udiv	r3, r3, r2
 800584e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d305      	bcc.n	800586c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d903      	bls.n	8005874 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005872:	e10d      	b.n	8005a90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	2200      	movs	r2, #0
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	4a8e      	ldr	r2, [pc, #568]	@ (8005abc <UART_SetConfig+0x590>)
 8005882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005886:	b29b      	uxth	r3, r3
 8005888:	2200      	movs	r2, #0
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005892:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005896:	f7fa fd13 	bl	80002c0 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4610      	mov	r0, r2
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	020b      	lsls	r3, r1, #8
 80058ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058b0:	0202      	lsls	r2, r0, #8
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	6849      	ldr	r1, [r1, #4]
 80058b6:	0849      	lsrs	r1, r1, #1
 80058b8:	2000      	movs	r0, #0
 80058ba:	460c      	mov	r4, r1
 80058bc:	4605      	mov	r5, r0
 80058be:	eb12 0804 	adds.w	r8, r2, r4
 80058c2:	eb43 0905 	adc.w	r9, r3, r5
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	469a      	mov	sl, r3
 80058ce:	4693      	mov	fp, r2
 80058d0:	4652      	mov	r2, sl
 80058d2:	465b      	mov	r3, fp
 80058d4:	4640      	mov	r0, r8
 80058d6:	4649      	mov	r1, r9
 80058d8:	f7fa fcf2 	bl	80002c0 <__aeabi_uldivmod>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4613      	mov	r3, r2
 80058e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ea:	d308      	bcc.n	80058fe <UART_SetConfig+0x3d2>
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f2:	d204      	bcs.n	80058fe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a3a      	ldr	r2, [r7, #32]
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	e0c8      	b.n	8005a90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005904:	e0c4      	b.n	8005a90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800590e:	d167      	bne.n	80059e0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005910:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005914:	2b08      	cmp	r3, #8
 8005916:	d828      	bhi.n	800596a <UART_SetConfig+0x43e>
 8005918:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <UART_SetConfig+0x3f4>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596b 	.word	0x0800596b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800596b 	.word	0x0800596b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe fd72 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800594a:	e014      	b.n	8005976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594c:	f7fe fd84 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005952:	e010      	b.n	8005976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac0 <UART_SetConfig+0x594>)
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005958:	e00d      	b.n	8005976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fcf9 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 800595e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8089 	beq.w	8005a90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	4a4e      	ldr	r2, [pc, #312]	@ (8005abc <UART_SetConfig+0x590>)
 8005984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005988:	461a      	mov	r2, r3
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005990:	005a      	lsls	r2, r3, #1
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	441a      	add	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d916      	bls.n	80059d8 <UART_SetConfig+0x4ac>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b0:	d212      	bcs.n	80059d8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f023 030f 	bic.w	r3, r3, #15
 80059ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	8bfb      	ldrh	r3, [r7, #30]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	8bfa      	ldrh	r2, [r7, #30]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	e05b      	b.n	8005a90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059de:	e057      	b.n	8005a90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d828      	bhi.n	8005a3a <UART_SetConfig+0x50e>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0x4c4>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a1d 	.word	0x08005a1d
 80059f8:	08005a25 	.word	0x08005a25
 80059fc:	08005a3b 	.word	0x08005a3b
 8005a00:	08005a2b 	.word	0x08005a2b
 8005a04:	08005a3b 	.word	0x08005a3b
 8005a08:	08005a3b 	.word	0x08005a3b
 8005a0c:	08005a3b 	.word	0x08005a3b
 8005a10:	08005a33 	.word	0x08005a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fe fd0a 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8005a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a1a:	e014      	b.n	8005a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a1c:	f7fe fd1c 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8005a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a22:	e010      	b.n	8005a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a24:	4b26      	ldr	r3, [pc, #152]	@ (8005ac0 <UART_SetConfig+0x594>)
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a28:	e00d      	b.n	8005a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2a:	f7fe fc91 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8005a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a30:	e009      	b.n	8005a46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a38:	e005      	b.n	8005a46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a44:	bf00      	nop
    }

    if (pclk != 0U)
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d021      	beq.n	8005a90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <UART_SetConfig+0x590>)
 8005a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	441a      	add	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	d909      	bls.n	8005a8a <UART_SetConfig+0x55e>
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a7c:	d205      	bcs.n	8005a8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e002      	b.n	8005a90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005aac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3730      	adds	r7, #48	@ 0x30
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	08006dac 	.word	0x08006dac
 8005ac0:	00f42400 	.word	0x00f42400

08005ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01a      	beq.n	8005bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bc2:	d10a      	bne.n	8005bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b098      	sub	sp, #96	@ 0x60
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c18:	f7fb fba6 	bl	8001368 <HAL_GetTick>
 8005c1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d12f      	bne.n	8005c8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f88e 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d022      	beq.n	8005c8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e063      	b.n	8005d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d149      	bne.n	8005d2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f857 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d03c      	beq.n	8005d2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	69b9      	ldr	r1, [r7, #24]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	617b      	str	r3, [r7, #20]
   return(result);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e5      	bne.n	8005ce6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e012      	b.n	8005d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3758      	adds	r7, #88	@ 0x58
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6c:	e04f      	b.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d04b      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fb faf7 	bl	8001368 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e04e      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d037      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b80      	cmp	r3, #128	@ 0x80
 8005da2:	d034      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d031      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d110      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f838 	bl	8005e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e029      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de8:	d111      	bne.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 f81e 	bl	8005e36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e00f      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d0a0      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b095      	sub	sp, #84	@ 0x54
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e6      	bne.n	8005e3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3308      	adds	r3, #8
 8005e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e3      	bne.n	8005e70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d118      	bne.n	8005ee2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f023 0310 	bic.w	r3, r3, #16
 8005ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6979      	ldr	r1, [r7, #20]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	613b      	str	r3, [r7, #16]
   return(result);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e6      	bne.n	8005eb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ef6:	bf00      	nop
 8005ef8:	3754      	adds	r7, #84	@ 0x54
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <std>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f12:	6083      	str	r3, [r0, #8]
 8005f14:	8181      	strh	r1, [r0, #12]
 8005f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f18:	81c2      	strh	r2, [r0, #14]
 8005f1a:	6183      	str	r3, [r0, #24]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	2208      	movs	r2, #8
 8005f20:	305c      	adds	r0, #92	@ 0x5c
 8005f22:	f000 f906 	bl	8006132 <memset>
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x58>)
 8005f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x5c>)
 8005f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x60>)
 8005f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <std+0x64>)
 8005f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <std+0x68>)
 8005f38:	6224      	str	r4, [r4, #32]
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d006      	beq.n	8005f4c <std+0x48>
 8005f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f42:	4294      	cmp	r4, r2
 8005f44:	d002      	beq.n	8005f4c <std+0x48>
 8005f46:	33d0      	adds	r3, #208	@ 0xd0
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d105      	bne.n	8005f58 <std+0x54>
 8005f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f54:	f000 b966 	b.w	8006224 <__retarget_lock_init_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	080060ad 	.word	0x080060ad
 8005f60:	080060cf 	.word	0x080060cf
 8005f64:	08006107 	.word	0x08006107
 8005f68:	0800612b 	.word	0x0800612b
 8005f6c:	200012b4 	.word	0x200012b4

08005f70 <stdio_exit_handler>:
 8005f70:	4a02      	ldr	r2, [pc, #8]	@ (8005f7c <stdio_exit_handler+0xc>)
 8005f72:	4903      	ldr	r1, [pc, #12]	@ (8005f80 <stdio_exit_handler+0x10>)
 8005f74:	4803      	ldr	r0, [pc, #12]	@ (8005f84 <stdio_exit_handler+0x14>)
 8005f76:	f000 b869 	b.w	800604c <_fwalk_sglue>
 8005f7a:	bf00      	nop
 8005f7c:	20000014 	.word	0x20000014
 8005f80:	08006ac1 	.word	0x08006ac1
 8005f84:	20000024 	.word	0x20000024

08005f88 <cleanup_stdio>:
 8005f88:	6841      	ldr	r1, [r0, #4]
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <cleanup_stdio+0x34>)
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	4604      	mov	r4, r0
 8005f92:	d001      	beq.n	8005f98 <cleanup_stdio+0x10>
 8005f94:	f000 fd94 	bl	8006ac0 <_fflush_r>
 8005f98:	68a1      	ldr	r1, [r4, #8]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <cleanup_stdio+0x38>)
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <cleanup_stdio+0x1e>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fd8d 	bl	8006ac0 <_fflush_r>
 8005fa6:	68e1      	ldr	r1, [r4, #12]
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <cleanup_stdio+0x3c>)
 8005faa:	4299      	cmp	r1, r3
 8005fac:	d004      	beq.n	8005fb8 <cleanup_stdio+0x30>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 bd84 	b.w	8006ac0 <_fflush_r>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	200012b4 	.word	0x200012b4
 8005fc0:	2000131c 	.word	0x2000131c
 8005fc4:	20001384 	.word	0x20001384

08005fc8 <global_stdio_init.part.0>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <global_stdio_init.part.0+0x30>)
 8005fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8005ffc <global_stdio_init.part.0+0x34>)
 8005fce:	4a0c      	ldr	r2, [pc, #48]	@ (8006000 <global_stdio_init.part.0+0x38>)
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	f7ff ff94 	bl	8005f04 <std>
 8005fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2109      	movs	r1, #9
 8005fe4:	f7ff ff8e 	bl	8005f04 <std>
 8005fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fec:	2202      	movs	r2, #2
 8005fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff2:	2112      	movs	r1, #18
 8005ff4:	f7ff bf86 	b.w	8005f04 <std>
 8005ff8:	200013ec 	.word	0x200013ec
 8005ffc:	200012b4 	.word	0x200012b4
 8006000:	08005f71 	.word	0x08005f71

08006004 <__sfp_lock_acquire>:
 8006004:	4801      	ldr	r0, [pc, #4]	@ (800600c <__sfp_lock_acquire+0x8>)
 8006006:	f000 b90e 	b.w	8006226 <__retarget_lock_acquire_recursive>
 800600a:	bf00      	nop
 800600c:	200013f5 	.word	0x200013f5

08006010 <__sfp_lock_release>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__sfp_lock_release+0x8>)
 8006012:	f000 b909 	b.w	8006228 <__retarget_lock_release_recursive>
 8006016:	bf00      	nop
 8006018:	200013f5 	.word	0x200013f5

0800601c <__sinit>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	f7ff fff0 	bl	8006004 <__sfp_lock_acquire>
 8006024:	6a23      	ldr	r3, [r4, #32]
 8006026:	b11b      	cbz	r3, 8006030 <__sinit+0x14>
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f7ff bff0 	b.w	8006010 <__sfp_lock_release>
 8006030:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <__sinit+0x28>)
 8006032:	6223      	str	r3, [r4, #32]
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__sinit+0x2c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f5      	bne.n	8006028 <__sinit+0xc>
 800603c:	f7ff ffc4 	bl	8005fc8 <global_stdio_init.part.0>
 8006040:	e7f2      	b.n	8006028 <__sinit+0xc>
 8006042:	bf00      	nop
 8006044:	08005f89 	.word	0x08005f89
 8006048:	200013ec 	.word	0x200013ec

0800604c <_fwalk_sglue>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	4607      	mov	r7, r0
 8006052:	4688      	mov	r8, r1
 8006054:	4614      	mov	r4, r2
 8006056:	2600      	movs	r6, #0
 8006058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800605c:	f1b9 0901 	subs.w	r9, r9, #1
 8006060:	d505      	bpl.n	800606e <_fwalk_sglue+0x22>
 8006062:	6824      	ldr	r4, [r4, #0]
 8006064:	2c00      	cmp	r4, #0
 8006066:	d1f7      	bne.n	8006058 <_fwalk_sglue+0xc>
 8006068:	4630      	mov	r0, r6
 800606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d907      	bls.n	8006084 <_fwalk_sglue+0x38>
 8006074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006078:	3301      	adds	r3, #1
 800607a:	d003      	beq.n	8006084 <_fwalk_sglue+0x38>
 800607c:	4629      	mov	r1, r5
 800607e:	4638      	mov	r0, r7
 8006080:	47c0      	blx	r8
 8006082:	4306      	orrs	r6, r0
 8006084:	3568      	adds	r5, #104	@ 0x68
 8006086:	e7e9      	b.n	800605c <_fwalk_sglue+0x10>

08006088 <iprintf>:
 8006088:	b40f      	push	{r0, r1, r2, r3}
 800608a:	b507      	push	{r0, r1, r2, lr}
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <iprintf+0x20>)
 800608e:	ab04      	add	r3, sp, #16
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	f853 2b04 	ldr.w	r2, [r3], #4
 8006096:	6881      	ldr	r1, [r0, #8]
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	f000 f9e9 	bl	8006470 <_vfiprintf_r>
 800609e:	b003      	add	sp, #12
 80060a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a4:	b004      	add	sp, #16
 80060a6:	4770      	bx	lr
 80060a8:	20000020 	.word	0x20000020

080060ac <__sread>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	460c      	mov	r4, r1
 80060b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b4:	f000 f868 	bl	8006188 <_read_r>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	bfab      	itete	ge
 80060bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060be:	89a3      	ldrhlt	r3, [r4, #12]
 80060c0:	181b      	addge	r3, r3, r0
 80060c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060c6:	bfac      	ite	ge
 80060c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060ca:	81a3      	strhlt	r3, [r4, #12]
 80060cc:	bd10      	pop	{r4, pc}

080060ce <__swrite>:
 80060ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d2:	461f      	mov	r7, r3
 80060d4:	898b      	ldrh	r3, [r1, #12]
 80060d6:	05db      	lsls	r3, r3, #23
 80060d8:	4605      	mov	r5, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	4616      	mov	r6, r2
 80060de:	d505      	bpl.n	80060ec <__swrite+0x1e>
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	2302      	movs	r3, #2
 80060e6:	2200      	movs	r2, #0
 80060e8:	f000 f83c 	bl	8006164 <_lseek_r>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	4632      	mov	r2, r6
 80060fa:	463b      	mov	r3, r7
 80060fc:	4628      	mov	r0, r5
 80060fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	f000 b853 	b.w	80061ac <_write_r>

08006106 <__sseek>:
 8006106:	b510      	push	{r4, lr}
 8006108:	460c      	mov	r4, r1
 800610a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610e:	f000 f829 	bl	8006164 <_lseek_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	bf15      	itete	ne
 8006118:	6560      	strne	r0, [r4, #84]	@ 0x54
 800611a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800611e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006122:	81a3      	strheq	r3, [r4, #12]
 8006124:	bf18      	it	ne
 8006126:	81a3      	strhne	r3, [r4, #12]
 8006128:	bd10      	pop	{r4, pc}

0800612a <__sclose>:
 800612a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612e:	f000 b809 	b.w	8006144 <_close_r>

08006132 <memset>:
 8006132:	4402      	add	r2, r0
 8006134:	4603      	mov	r3, r0
 8006136:	4293      	cmp	r3, r2
 8006138:	d100      	bne.n	800613c <memset+0xa>
 800613a:	4770      	bx	lr
 800613c:	f803 1b01 	strb.w	r1, [r3], #1
 8006140:	e7f9      	b.n	8006136 <memset+0x4>
	...

08006144 <_close_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	@ (8006160 <_close_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fa fe0f 	bl	8000d72 <_close>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_close_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_close_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	200013f0 	.word	0x200013f0

08006164 <_lseek_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d07      	ldr	r5, [pc, #28]	@ (8006184 <_lseek_r+0x20>)
 8006168:	4604      	mov	r4, r0
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	2200      	movs	r2, #0
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f7fa fe24 	bl	8000dc0 <_lseek>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_lseek_r+0x1e>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_lseek_r+0x1e>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	200013f0 	.word	0x200013f0

08006188 <_read_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	@ (80061a8 <_read_r+0x20>)
 800618c:	4604      	mov	r4, r0
 800618e:	4608      	mov	r0, r1
 8006190:	4611      	mov	r1, r2
 8006192:	2200      	movs	r2, #0
 8006194:	602a      	str	r2, [r5, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	f7fa fdb2 	bl	8000d00 <_read>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <_read_r+0x1e>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	b103      	cbz	r3, 80061a6 <_read_r+0x1e>
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	bd38      	pop	{r3, r4, r5, pc}
 80061a8:	200013f0 	.word	0x200013f0

080061ac <_write_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d07      	ldr	r5, [pc, #28]	@ (80061cc <_write_r+0x20>)
 80061b0:	4604      	mov	r4, r0
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	602a      	str	r2, [r5, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f7fa fdbd 	bl	8000d3a <_write>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_write_r+0x1e>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_write_r+0x1e>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	200013f0 	.word	0x200013f0

080061d0 <__errno>:
 80061d0:	4b01      	ldr	r3, [pc, #4]	@ (80061d8 <__errno+0x8>)
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000020 	.word	0x20000020

080061dc <__libc_init_array>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4d0d      	ldr	r5, [pc, #52]	@ (8006214 <__libc_init_array+0x38>)
 80061e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006218 <__libc_init_array+0x3c>)
 80061e2:	1b64      	subs	r4, r4, r5
 80061e4:	10a4      	asrs	r4, r4, #2
 80061e6:	2600      	movs	r6, #0
 80061e8:	42a6      	cmp	r6, r4
 80061ea:	d109      	bne.n	8006200 <__libc_init_array+0x24>
 80061ec:	4d0b      	ldr	r5, [pc, #44]	@ (800621c <__libc_init_array+0x40>)
 80061ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006220 <__libc_init_array+0x44>)
 80061f0:	f000 fdb6 	bl	8006d60 <_init>
 80061f4:	1b64      	subs	r4, r4, r5
 80061f6:	10a4      	asrs	r4, r4, #2
 80061f8:	2600      	movs	r6, #0
 80061fa:	42a6      	cmp	r6, r4
 80061fc:	d105      	bne.n	800620a <__libc_init_array+0x2e>
 80061fe:	bd70      	pop	{r4, r5, r6, pc}
 8006200:	f855 3b04 	ldr.w	r3, [r5], #4
 8006204:	4798      	blx	r3
 8006206:	3601      	adds	r6, #1
 8006208:	e7ee      	b.n	80061e8 <__libc_init_array+0xc>
 800620a:	f855 3b04 	ldr.w	r3, [r5], #4
 800620e:	4798      	blx	r3
 8006210:	3601      	adds	r6, #1
 8006212:	e7f2      	b.n	80061fa <__libc_init_array+0x1e>
 8006214:	08006e00 	.word	0x08006e00
 8006218:	08006e00 	.word	0x08006e00
 800621c:	08006e00 	.word	0x08006e00
 8006220:	08006e04 	.word	0x08006e04

08006224 <__retarget_lock_init_recursive>:
 8006224:	4770      	bx	lr

08006226 <__retarget_lock_acquire_recursive>:
 8006226:	4770      	bx	lr

08006228 <__retarget_lock_release_recursive>:
 8006228:	4770      	bx	lr
	...

0800622c <_free_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4605      	mov	r5, r0
 8006230:	2900      	cmp	r1, #0
 8006232:	d041      	beq.n	80062b8 <_free_r+0x8c>
 8006234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006238:	1f0c      	subs	r4, r1, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	bfb8      	it	lt
 800623e:	18e4      	addlt	r4, r4, r3
 8006240:	f000 f8e0 	bl	8006404 <__malloc_lock>
 8006244:	4a1d      	ldr	r2, [pc, #116]	@ (80062bc <_free_r+0x90>)
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	b933      	cbnz	r3, 8006258 <_free_r+0x2c>
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	6014      	str	r4, [r2, #0]
 800624e:	4628      	mov	r0, r5
 8006250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006254:	f000 b8dc 	b.w	8006410 <__malloc_unlock>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d908      	bls.n	800626e <_free_r+0x42>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	1821      	adds	r1, r4, r0
 8006260:	428b      	cmp	r3, r1
 8006262:	bf01      	itttt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	1809      	addeq	r1, r1, r0
 800626a:	6021      	streq	r1, [r4, #0]
 800626c:	e7ed      	b.n	800624a <_free_r+0x1e>
 800626e:	461a      	mov	r2, r3
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	b10b      	cbz	r3, 8006278 <_free_r+0x4c>
 8006274:	42a3      	cmp	r3, r4
 8006276:	d9fa      	bls.n	800626e <_free_r+0x42>
 8006278:	6811      	ldr	r1, [r2, #0]
 800627a:	1850      	adds	r0, r2, r1
 800627c:	42a0      	cmp	r0, r4
 800627e:	d10b      	bne.n	8006298 <_free_r+0x6c>
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	4401      	add	r1, r0
 8006284:	1850      	adds	r0, r2, r1
 8006286:	4283      	cmp	r3, r0
 8006288:	6011      	str	r1, [r2, #0]
 800628a:	d1e0      	bne.n	800624e <_free_r+0x22>
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	6053      	str	r3, [r2, #4]
 8006292:	4408      	add	r0, r1
 8006294:	6010      	str	r0, [r2, #0]
 8006296:	e7da      	b.n	800624e <_free_r+0x22>
 8006298:	d902      	bls.n	80062a0 <_free_r+0x74>
 800629a:	230c      	movs	r3, #12
 800629c:	602b      	str	r3, [r5, #0]
 800629e:	e7d6      	b.n	800624e <_free_r+0x22>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	1821      	adds	r1, r4, r0
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf04      	itt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	bf04      	itt	eq
 80062b0:	1809      	addeq	r1, r1, r0
 80062b2:	6021      	streq	r1, [r4, #0]
 80062b4:	6054      	str	r4, [r2, #4]
 80062b6:	e7ca      	b.n	800624e <_free_r+0x22>
 80062b8:	bd38      	pop	{r3, r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	200013fc 	.word	0x200013fc

080062c0 <sbrk_aligned>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006300 <sbrk_aligned+0x40>)
 80062c4:	460c      	mov	r4, r1
 80062c6:	6831      	ldr	r1, [r6, #0]
 80062c8:	4605      	mov	r5, r0
 80062ca:	b911      	cbnz	r1, 80062d2 <sbrk_aligned+0x12>
 80062cc:	f000 fcb4 	bl	8006c38 <_sbrk_r>
 80062d0:	6030      	str	r0, [r6, #0]
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 fcaf 	bl	8006c38 <_sbrk_r>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d103      	bne.n	80062e6 <sbrk_aligned+0x26>
 80062de:	f04f 34ff 	mov.w	r4, #4294967295
 80062e2:	4620      	mov	r0, r4
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d0f8      	beq.n	80062e2 <sbrk_aligned+0x22>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fca0 	bl	8006c38 <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1f2      	bne.n	80062e2 <sbrk_aligned+0x22>
 80062fc:	e7ef      	b.n	80062de <sbrk_aligned+0x1e>
 80062fe:	bf00      	nop
 8006300:	200013f8 	.word	0x200013f8

08006304 <_malloc_r>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4606      	mov	r6, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d904      	bls.n	800632a <_malloc_r+0x26>
 8006320:	230c      	movs	r3, #12
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	2000      	movs	r0, #0
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006400 <_malloc_r+0xfc>
 800632e:	f000 f869 	bl	8006404 <__malloc_lock>
 8006332:	f8d8 3000 	ldr.w	r3, [r8]
 8006336:	461c      	mov	r4, r3
 8006338:	bb44      	cbnz	r4, 800638c <_malloc_r+0x88>
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff ffbf 	bl	80062c0 <sbrk_aligned>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	4604      	mov	r4, r0
 8006346:	d158      	bne.n	80063fa <_malloc_r+0xf6>
 8006348:	f8d8 4000 	ldr.w	r4, [r8]
 800634c:	4627      	mov	r7, r4
 800634e:	2f00      	cmp	r7, #0
 8006350:	d143      	bne.n	80063da <_malloc_r+0xd6>
 8006352:	2c00      	cmp	r4, #0
 8006354:	d04b      	beq.n	80063ee <_malloc_r+0xea>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	4639      	mov	r1, r7
 800635a:	4630      	mov	r0, r6
 800635c:	eb04 0903 	add.w	r9, r4, r3
 8006360:	f000 fc6a 	bl	8006c38 <_sbrk_r>
 8006364:	4581      	cmp	r9, r0
 8006366:	d142      	bne.n	80063ee <_malloc_r+0xea>
 8006368:	6821      	ldr	r1, [r4, #0]
 800636a:	1a6d      	subs	r5, r5, r1
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ffa6 	bl	80062c0 <sbrk_aligned>
 8006374:	3001      	adds	r0, #1
 8006376:	d03a      	beq.n	80063ee <_malloc_r+0xea>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	442b      	add	r3, r5
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	f8d8 3000 	ldr.w	r3, [r8]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	bb62      	cbnz	r2, 80063e0 <_malloc_r+0xdc>
 8006386:	f8c8 7000 	str.w	r7, [r8]
 800638a:	e00f      	b.n	80063ac <_malloc_r+0xa8>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	1b52      	subs	r2, r2, r5
 8006390:	d420      	bmi.n	80063d4 <_malloc_r+0xd0>
 8006392:	2a0b      	cmp	r2, #11
 8006394:	d917      	bls.n	80063c6 <_malloc_r+0xc2>
 8006396:	1961      	adds	r1, r4, r5
 8006398:	42a3      	cmp	r3, r4
 800639a:	6025      	str	r5, [r4, #0]
 800639c:	bf18      	it	ne
 800639e:	6059      	strne	r1, [r3, #4]
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	bf08      	it	eq
 80063a4:	f8c8 1000 	streq.w	r1, [r8]
 80063a8:	5162      	str	r2, [r4, r5]
 80063aa:	604b      	str	r3, [r1, #4]
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f82f 	bl	8006410 <__malloc_unlock>
 80063b2:	f104 000b 	add.w	r0, r4, #11
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	f020 0007 	bic.w	r0, r0, #7
 80063bc:	1ac2      	subs	r2, r0, r3
 80063be:	bf1c      	itt	ne
 80063c0:	1a1b      	subne	r3, r3, r0
 80063c2:	50a3      	strne	r3, [r4, r2]
 80063c4:	e7af      	b.n	8006326 <_malloc_r+0x22>
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	bf0c      	ite	eq
 80063cc:	f8c8 2000 	streq.w	r2, [r8]
 80063d0:	605a      	strne	r2, [r3, #4]
 80063d2:	e7eb      	b.n	80063ac <_malloc_r+0xa8>
 80063d4:	4623      	mov	r3, r4
 80063d6:	6864      	ldr	r4, [r4, #4]
 80063d8:	e7ae      	b.n	8006338 <_malloc_r+0x34>
 80063da:	463c      	mov	r4, r7
 80063dc:	687f      	ldr	r7, [r7, #4]
 80063de:	e7b6      	b.n	800634e <_malloc_r+0x4a>
 80063e0:	461a      	mov	r2, r3
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d1fb      	bne.n	80063e0 <_malloc_r+0xdc>
 80063e8:	2300      	movs	r3, #0
 80063ea:	6053      	str	r3, [r2, #4]
 80063ec:	e7de      	b.n	80063ac <_malloc_r+0xa8>
 80063ee:	230c      	movs	r3, #12
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 f80c 	bl	8006410 <__malloc_unlock>
 80063f8:	e794      	b.n	8006324 <_malloc_r+0x20>
 80063fa:	6005      	str	r5, [r0, #0]
 80063fc:	e7d6      	b.n	80063ac <_malloc_r+0xa8>
 80063fe:	bf00      	nop
 8006400:	200013fc 	.word	0x200013fc

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	@ (800640c <__malloc_lock+0x8>)
 8006406:	f7ff bf0e 	b.w	8006226 <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	200013f4 	.word	0x200013f4

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_unlock+0x8>)
 8006412:	f7ff bf09 	b.w	8006228 <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	200013f4 	.word	0x200013f4

0800641c <__sfputc_r>:
 800641c:	6893      	ldr	r3, [r2, #8]
 800641e:	3b01      	subs	r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	b410      	push	{r4}
 8006424:	6093      	str	r3, [r2, #8]
 8006426:	da08      	bge.n	800643a <__sfputc_r+0x1e>
 8006428:	6994      	ldr	r4, [r2, #24]
 800642a:	42a3      	cmp	r3, r4
 800642c:	db01      	blt.n	8006432 <__sfputc_r+0x16>
 800642e:	290a      	cmp	r1, #10
 8006430:	d103      	bne.n	800643a <__sfputc_r+0x1e>
 8006432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006436:	f000 bb6b 	b.w	8006b10 <__swbuf_r>
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	1c58      	adds	r0, r3, #1
 800643e:	6010      	str	r0, [r2, #0]
 8006440:	7019      	strb	r1, [r3, #0]
 8006442:	4608      	mov	r0, r1
 8006444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006448:	4770      	bx	lr

0800644a <__sfputs_r>:
 800644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	4614      	mov	r4, r2
 8006452:	18d5      	adds	r5, r2, r3
 8006454:	42ac      	cmp	r4, r5
 8006456:	d101      	bne.n	800645c <__sfputs_r+0x12>
 8006458:	2000      	movs	r0, #0
 800645a:	e007      	b.n	800646c <__sfputs_r+0x22>
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	463a      	mov	r2, r7
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ffda 	bl	800641c <__sfputc_r>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d1f3      	bne.n	8006454 <__sfputs_r+0xa>
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006470 <_vfiprintf_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	460d      	mov	r5, r1
 8006476:	b09d      	sub	sp, #116	@ 0x74
 8006478:	4614      	mov	r4, r2
 800647a:	4698      	mov	r8, r3
 800647c:	4606      	mov	r6, r0
 800647e:	b118      	cbz	r0, 8006488 <_vfiprintf_r+0x18>
 8006480:	6a03      	ldr	r3, [r0, #32]
 8006482:	b90b      	cbnz	r3, 8006488 <_vfiprintf_r+0x18>
 8006484:	f7ff fdca 	bl	800601c <__sinit>
 8006488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648a:	07d9      	lsls	r1, r3, #31
 800648c:	d405      	bmi.n	800649a <_vfiprintf_r+0x2a>
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	059a      	lsls	r2, r3, #22
 8006492:	d402      	bmi.n	800649a <_vfiprintf_r+0x2a>
 8006494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006496:	f7ff fec6 	bl	8006226 <__retarget_lock_acquire_recursive>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	071b      	lsls	r3, r3, #28
 800649e:	d501      	bpl.n	80064a4 <_vfiprintf_r+0x34>
 80064a0:	692b      	ldr	r3, [r5, #16]
 80064a2:	b99b      	cbnz	r3, 80064cc <_vfiprintf_r+0x5c>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f000 fb70 	bl	8006b8c <__swsetup_r>
 80064ac:	b170      	cbz	r0, 80064cc <_vfiprintf_r+0x5c>
 80064ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064b0:	07dc      	lsls	r4, r3, #31
 80064b2:	d504      	bpl.n	80064be <_vfiprintf_r+0x4e>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	b01d      	add	sp, #116	@ 0x74
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	0598      	lsls	r0, r3, #22
 80064c2:	d4f7      	bmi.n	80064b4 <_vfiprintf_r+0x44>
 80064c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064c6:	f7ff feaf 	bl	8006228 <__retarget_lock_release_recursive>
 80064ca:	e7f3      	b.n	80064b4 <_vfiprintf_r+0x44>
 80064cc:	2300      	movs	r3, #0
 80064ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d0:	2320      	movs	r3, #32
 80064d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064da:	2330      	movs	r3, #48	@ 0x30
 80064dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800668c <_vfiprintf_r+0x21c>
 80064e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064e4:	f04f 0901 	mov.w	r9, #1
 80064e8:	4623      	mov	r3, r4
 80064ea:	469a      	mov	sl, r3
 80064ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f0:	b10a      	cbz	r2, 80064f6 <_vfiprintf_r+0x86>
 80064f2:	2a25      	cmp	r2, #37	@ 0x25
 80064f4:	d1f9      	bne.n	80064ea <_vfiprintf_r+0x7a>
 80064f6:	ebba 0b04 	subs.w	fp, sl, r4
 80064fa:	d00b      	beq.n	8006514 <_vfiprintf_r+0xa4>
 80064fc:	465b      	mov	r3, fp
 80064fe:	4622      	mov	r2, r4
 8006500:	4629      	mov	r1, r5
 8006502:	4630      	mov	r0, r6
 8006504:	f7ff ffa1 	bl	800644a <__sfputs_r>
 8006508:	3001      	adds	r0, #1
 800650a:	f000 80a7 	beq.w	800665c <_vfiprintf_r+0x1ec>
 800650e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006510:	445a      	add	r2, fp
 8006512:	9209      	str	r2, [sp, #36]	@ 0x24
 8006514:	f89a 3000 	ldrb.w	r3, [sl]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 809f 	beq.w	800665c <_vfiprintf_r+0x1ec>
 800651e:	2300      	movs	r3, #0
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006528:	f10a 0a01 	add.w	sl, sl, #1
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	9307      	str	r3, [sp, #28]
 8006530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006534:	931a      	str	r3, [sp, #104]	@ 0x68
 8006536:	4654      	mov	r4, sl
 8006538:	2205      	movs	r2, #5
 800653a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653e:	4853      	ldr	r0, [pc, #332]	@ (800668c <_vfiprintf_r+0x21c>)
 8006540:	f7f9 fe6e 	bl	8000220 <memchr>
 8006544:	9a04      	ldr	r2, [sp, #16]
 8006546:	b9d8      	cbnz	r0, 8006580 <_vfiprintf_r+0x110>
 8006548:	06d1      	lsls	r1, r2, #27
 800654a:	bf44      	itt	mi
 800654c:	2320      	movmi	r3, #32
 800654e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006552:	0713      	lsls	r3, r2, #28
 8006554:	bf44      	itt	mi
 8006556:	232b      	movmi	r3, #43	@ 0x2b
 8006558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800655c:	f89a 3000 	ldrb.w	r3, [sl]
 8006560:	2b2a      	cmp	r3, #42	@ 0x2a
 8006562:	d015      	beq.n	8006590 <_vfiprintf_r+0x120>
 8006564:	9a07      	ldr	r2, [sp, #28]
 8006566:	4654      	mov	r4, sl
 8006568:	2000      	movs	r0, #0
 800656a:	f04f 0c0a 	mov.w	ip, #10
 800656e:	4621      	mov	r1, r4
 8006570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006574:	3b30      	subs	r3, #48	@ 0x30
 8006576:	2b09      	cmp	r3, #9
 8006578:	d94b      	bls.n	8006612 <_vfiprintf_r+0x1a2>
 800657a:	b1b0      	cbz	r0, 80065aa <_vfiprintf_r+0x13a>
 800657c:	9207      	str	r2, [sp, #28]
 800657e:	e014      	b.n	80065aa <_vfiprintf_r+0x13a>
 8006580:	eba0 0308 	sub.w	r3, r0, r8
 8006584:	fa09 f303 	lsl.w	r3, r9, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	46a2      	mov	sl, r4
 800658e:	e7d2      	b.n	8006536 <_vfiprintf_r+0xc6>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	1d19      	adds	r1, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	9103      	str	r1, [sp, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfbb      	ittet	lt
 800659c:	425b      	neglt	r3, r3
 800659e:	f042 0202 	orrlt.w	r2, r2, #2
 80065a2:	9307      	strge	r3, [sp, #28]
 80065a4:	9307      	strlt	r3, [sp, #28]
 80065a6:	bfb8      	it	lt
 80065a8:	9204      	strlt	r2, [sp, #16]
 80065aa:	7823      	ldrb	r3, [r4, #0]
 80065ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ae:	d10a      	bne.n	80065c6 <_vfiprintf_r+0x156>
 80065b0:	7863      	ldrb	r3, [r4, #1]
 80065b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065b4:	d132      	bne.n	800661c <_vfiprintf_r+0x1ac>
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	9203      	str	r2, [sp, #12]
 80065be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065c2:	3402      	adds	r4, #2
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800669c <_vfiprintf_r+0x22c>
 80065ca:	7821      	ldrb	r1, [r4, #0]
 80065cc:	2203      	movs	r2, #3
 80065ce:	4650      	mov	r0, sl
 80065d0:	f7f9 fe26 	bl	8000220 <memchr>
 80065d4:	b138      	cbz	r0, 80065e6 <_vfiprintf_r+0x176>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	eba0 000a 	sub.w	r0, r0, sl
 80065dc:	2240      	movs	r2, #64	@ 0x40
 80065de:	4082      	lsls	r2, r0
 80065e0:	4313      	orrs	r3, r2
 80065e2:	3401      	adds	r4, #1
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ea:	4829      	ldr	r0, [pc, #164]	@ (8006690 <_vfiprintf_r+0x220>)
 80065ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065f0:	2206      	movs	r2, #6
 80065f2:	f7f9 fe15 	bl	8000220 <memchr>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d03f      	beq.n	800667a <_vfiprintf_r+0x20a>
 80065fa:	4b26      	ldr	r3, [pc, #152]	@ (8006694 <_vfiprintf_r+0x224>)
 80065fc:	bb1b      	cbnz	r3, 8006646 <_vfiprintf_r+0x1d6>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	3307      	adds	r3, #7
 8006602:	f023 0307 	bic.w	r3, r3, #7
 8006606:	3308      	adds	r3, #8
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800660c:	443b      	add	r3, r7
 800660e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006610:	e76a      	b.n	80064e8 <_vfiprintf_r+0x78>
 8006612:	fb0c 3202 	mla	r2, ip, r2, r3
 8006616:	460c      	mov	r4, r1
 8006618:	2001      	movs	r0, #1
 800661a:	e7a8      	b.n	800656e <_vfiprintf_r+0xfe>
 800661c:	2300      	movs	r3, #0
 800661e:	3401      	adds	r4, #1
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	4619      	mov	r1, r3
 8006624:	f04f 0c0a 	mov.w	ip, #10
 8006628:	4620      	mov	r0, r4
 800662a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662e:	3a30      	subs	r2, #48	@ 0x30
 8006630:	2a09      	cmp	r2, #9
 8006632:	d903      	bls.n	800663c <_vfiprintf_r+0x1cc>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0c6      	beq.n	80065c6 <_vfiprintf_r+0x156>
 8006638:	9105      	str	r1, [sp, #20]
 800663a:	e7c4      	b.n	80065c6 <_vfiprintf_r+0x156>
 800663c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006640:	4604      	mov	r4, r0
 8006642:	2301      	movs	r3, #1
 8006644:	e7f0      	b.n	8006628 <_vfiprintf_r+0x1b8>
 8006646:	ab03      	add	r3, sp, #12
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	462a      	mov	r2, r5
 800664c:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <_vfiprintf_r+0x228>)
 800664e:	a904      	add	r1, sp, #16
 8006650:	4630      	mov	r0, r6
 8006652:	f3af 8000 	nop.w
 8006656:	4607      	mov	r7, r0
 8006658:	1c78      	adds	r0, r7, #1
 800665a:	d1d6      	bne.n	800660a <_vfiprintf_r+0x19a>
 800665c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x1fe>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x1fe>
 8006668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800666a:	f7ff fddd 	bl	8006228 <__retarget_lock_release_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	065b      	lsls	r3, r3, #25
 8006672:	f53f af1f 	bmi.w	80064b4 <_vfiprintf_r+0x44>
 8006676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006678:	e71e      	b.n	80064b8 <_vfiprintf_r+0x48>
 800667a:	ab03      	add	r3, sp, #12
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	462a      	mov	r2, r5
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <_vfiprintf_r+0x228>)
 8006682:	a904      	add	r1, sp, #16
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f879 	bl	800677c <_printf_i>
 800668a:	e7e4      	b.n	8006656 <_vfiprintf_r+0x1e6>
 800668c:	08006dc4 	.word	0x08006dc4
 8006690:	08006dce 	.word	0x08006dce
 8006694:	00000000 	.word	0x00000000
 8006698:	0800644b 	.word	0x0800644b
 800669c:	08006dca 	.word	0x08006dca

080066a0 <_printf_common>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	4616      	mov	r6, r2
 80066a6:	4698      	mov	r8, r3
 80066a8:	688a      	ldr	r2, [r1, #8]
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bfb8      	it	lt
 80066b4:	4613      	movlt	r3, r2
 80066b6:	6033      	str	r3, [r6, #0]
 80066b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066bc:	4607      	mov	r7, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	b10a      	cbz	r2, 80066c6 <_printf_common+0x26>
 80066c2:	3301      	adds	r3, #1
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	0699      	lsls	r1, r3, #26
 80066ca:	bf42      	ittt	mi
 80066cc:	6833      	ldrmi	r3, [r6, #0]
 80066ce:	3302      	addmi	r3, #2
 80066d0:	6033      	strmi	r3, [r6, #0]
 80066d2:	6825      	ldr	r5, [r4, #0]
 80066d4:	f015 0506 	ands.w	r5, r5, #6
 80066d8:	d106      	bne.n	80066e8 <_printf_common+0x48>
 80066da:	f104 0a19 	add.w	sl, r4, #25
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	6832      	ldr	r2, [r6, #0]
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dc26      	bgt.n	8006736 <_printf_common+0x96>
 80066e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	3b00      	subs	r3, #0
 80066f0:	bf18      	it	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	0692      	lsls	r2, r2, #26
 80066f6:	d42b      	bmi.n	8006750 <_printf_common+0xb0>
 80066f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066fc:	4641      	mov	r1, r8
 80066fe:	4638      	mov	r0, r7
 8006700:	47c8      	blx	r9
 8006702:	3001      	adds	r0, #1
 8006704:	d01e      	beq.n	8006744 <_printf_common+0xa4>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	f003 0306 	and.w	r3, r3, #6
 800670e:	2b04      	cmp	r3, #4
 8006710:	bf02      	ittt	eq
 8006712:	68e5      	ldreq	r5, [r4, #12]
 8006714:	6833      	ldreq	r3, [r6, #0]
 8006716:	1aed      	subeq	r5, r5, r3
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	bf0c      	ite	eq
 800671c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006720:	2500      	movne	r5, #0
 8006722:	4293      	cmp	r3, r2
 8006724:	bfc4      	itt	gt
 8006726:	1a9b      	subgt	r3, r3, r2
 8006728:	18ed      	addgt	r5, r5, r3
 800672a:	2600      	movs	r6, #0
 800672c:	341a      	adds	r4, #26
 800672e:	42b5      	cmp	r5, r6
 8006730:	d11a      	bne.n	8006768 <_printf_common+0xc8>
 8006732:	2000      	movs	r0, #0
 8006734:	e008      	b.n	8006748 <_printf_common+0xa8>
 8006736:	2301      	movs	r3, #1
 8006738:	4652      	mov	r2, sl
 800673a:	4641      	mov	r1, r8
 800673c:	4638      	mov	r0, r7
 800673e:	47c8      	blx	r9
 8006740:	3001      	adds	r0, #1
 8006742:	d103      	bne.n	800674c <_printf_common+0xac>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674c:	3501      	adds	r5, #1
 800674e:	e7c6      	b.n	80066de <_printf_common+0x3e>
 8006750:	18e1      	adds	r1, r4, r3
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	2030      	movs	r0, #48	@ 0x30
 8006756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800675a:	4422      	add	r2, r4
 800675c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006764:	3302      	adds	r3, #2
 8006766:	e7c7      	b.n	80066f8 <_printf_common+0x58>
 8006768:	2301      	movs	r3, #1
 800676a:	4622      	mov	r2, r4
 800676c:	4641      	mov	r1, r8
 800676e:	4638      	mov	r0, r7
 8006770:	47c8      	blx	r9
 8006772:	3001      	adds	r0, #1
 8006774:	d0e6      	beq.n	8006744 <_printf_common+0xa4>
 8006776:	3601      	adds	r6, #1
 8006778:	e7d9      	b.n	800672e <_printf_common+0x8e>
	...

0800677c <_printf_i>:
 800677c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	7e0f      	ldrb	r7, [r1, #24]
 8006782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006784:	2f78      	cmp	r7, #120	@ 0x78
 8006786:	4691      	mov	r9, r2
 8006788:	4680      	mov	r8, r0
 800678a:	460c      	mov	r4, r1
 800678c:	469a      	mov	sl, r3
 800678e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006792:	d807      	bhi.n	80067a4 <_printf_i+0x28>
 8006794:	2f62      	cmp	r7, #98	@ 0x62
 8006796:	d80a      	bhi.n	80067ae <_printf_i+0x32>
 8006798:	2f00      	cmp	r7, #0
 800679a:	f000 80d1 	beq.w	8006940 <_printf_i+0x1c4>
 800679e:	2f58      	cmp	r7, #88	@ 0x58
 80067a0:	f000 80b8 	beq.w	8006914 <_printf_i+0x198>
 80067a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067ac:	e03a      	b.n	8006824 <_printf_i+0xa8>
 80067ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067b2:	2b15      	cmp	r3, #21
 80067b4:	d8f6      	bhi.n	80067a4 <_printf_i+0x28>
 80067b6:	a101      	add	r1, pc, #4	@ (adr r1, 80067bc <_printf_i+0x40>)
 80067b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006829 	.word	0x08006829
 80067c4:	080067a5 	.word	0x080067a5
 80067c8:	080067a5 	.word	0x080067a5
 80067cc:	080067a5 	.word	0x080067a5
 80067d0:	080067a5 	.word	0x080067a5
 80067d4:	08006829 	.word	0x08006829
 80067d8:	080067a5 	.word	0x080067a5
 80067dc:	080067a5 	.word	0x080067a5
 80067e0:	080067a5 	.word	0x080067a5
 80067e4:	080067a5 	.word	0x080067a5
 80067e8:	08006927 	.word	0x08006927
 80067ec:	08006853 	.word	0x08006853
 80067f0:	080068e1 	.word	0x080068e1
 80067f4:	080067a5 	.word	0x080067a5
 80067f8:	080067a5 	.word	0x080067a5
 80067fc:	08006949 	.word	0x08006949
 8006800:	080067a5 	.word	0x080067a5
 8006804:	08006853 	.word	0x08006853
 8006808:	080067a5 	.word	0x080067a5
 800680c:	080067a5 	.word	0x080067a5
 8006810:	080068e9 	.word	0x080068e9
 8006814:	6833      	ldr	r3, [r6, #0]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6032      	str	r2, [r6, #0]
 800681c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006824:	2301      	movs	r3, #1
 8006826:	e09c      	b.n	8006962 <_printf_i+0x1e6>
 8006828:	6833      	ldr	r3, [r6, #0]
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	1d19      	adds	r1, r3, #4
 800682e:	6031      	str	r1, [r6, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	d501      	bpl.n	8006838 <_printf_i+0xbc>
 8006834:	681d      	ldr	r5, [r3, #0]
 8006836:	e003      	b.n	8006840 <_printf_i+0xc4>
 8006838:	0645      	lsls	r5, r0, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0xb8>
 800683c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006840:	2d00      	cmp	r5, #0
 8006842:	da03      	bge.n	800684c <_printf_i+0xd0>
 8006844:	232d      	movs	r3, #45	@ 0x2d
 8006846:	426d      	negs	r5, r5
 8006848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800684c:	4858      	ldr	r0, [pc, #352]	@ (80069b0 <_printf_i+0x234>)
 800684e:	230a      	movs	r3, #10
 8006850:	e011      	b.n	8006876 <_printf_i+0xfa>
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	0608      	lsls	r0, r1, #24
 8006858:	f853 5b04 	ldr.w	r5, [r3], #4
 800685c:	d402      	bmi.n	8006864 <_printf_i+0xe8>
 800685e:	0649      	lsls	r1, r1, #25
 8006860:	bf48      	it	mi
 8006862:	b2ad      	uxthmi	r5, r5
 8006864:	2f6f      	cmp	r7, #111	@ 0x6f
 8006866:	4852      	ldr	r0, [pc, #328]	@ (80069b0 <_printf_i+0x234>)
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	bf14      	ite	ne
 800686c:	230a      	movne	r3, #10
 800686e:	2308      	moveq	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006876:	6866      	ldr	r6, [r4, #4]
 8006878:	60a6      	str	r6, [r4, #8]
 800687a:	2e00      	cmp	r6, #0
 800687c:	db05      	blt.n	800688a <_printf_i+0x10e>
 800687e:	6821      	ldr	r1, [r4, #0]
 8006880:	432e      	orrs	r6, r5
 8006882:	f021 0104 	bic.w	r1, r1, #4
 8006886:	6021      	str	r1, [r4, #0]
 8006888:	d04b      	beq.n	8006922 <_printf_i+0x1a6>
 800688a:	4616      	mov	r6, r2
 800688c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006890:	fb03 5711 	mls	r7, r3, r1, r5
 8006894:	5dc7      	ldrb	r7, [r0, r7]
 8006896:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800689a:	462f      	mov	r7, r5
 800689c:	42bb      	cmp	r3, r7
 800689e:	460d      	mov	r5, r1
 80068a0:	d9f4      	bls.n	800688c <_printf_i+0x110>
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d10b      	bne.n	80068be <_printf_i+0x142>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	07df      	lsls	r7, r3, #31
 80068aa:	d508      	bpl.n	80068be <_printf_i+0x142>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	6861      	ldr	r1, [r4, #4]
 80068b0:	4299      	cmp	r1, r3
 80068b2:	bfde      	ittt	le
 80068b4:	2330      	movle	r3, #48	@ 0x30
 80068b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068be:	1b92      	subs	r2, r2, r6
 80068c0:	6122      	str	r2, [r4, #16]
 80068c2:	f8cd a000 	str.w	sl, [sp]
 80068c6:	464b      	mov	r3, r9
 80068c8:	aa03      	add	r2, sp, #12
 80068ca:	4621      	mov	r1, r4
 80068cc:	4640      	mov	r0, r8
 80068ce:	f7ff fee7 	bl	80066a0 <_printf_common>
 80068d2:	3001      	adds	r0, #1
 80068d4:	d14a      	bne.n	800696c <_printf_i+0x1f0>
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295
 80068da:	b004      	add	sp, #16
 80068dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	f043 0320 	orr.w	r3, r3, #32
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	4832      	ldr	r0, [pc, #200]	@ (80069b4 <_printf_i+0x238>)
 80068ea:	2778      	movs	r7, #120	@ 0x78
 80068ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	6831      	ldr	r1, [r6, #0]
 80068f4:	061f      	lsls	r7, r3, #24
 80068f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80068fa:	d402      	bmi.n	8006902 <_printf_i+0x186>
 80068fc:	065f      	lsls	r7, r3, #25
 80068fe:	bf48      	it	mi
 8006900:	b2ad      	uxthmi	r5, r5
 8006902:	6031      	str	r1, [r6, #0]
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	bf44      	itt	mi
 8006908:	f043 0320 	orrmi.w	r3, r3, #32
 800690c:	6023      	strmi	r3, [r4, #0]
 800690e:	b11d      	cbz	r5, 8006918 <_printf_i+0x19c>
 8006910:	2310      	movs	r3, #16
 8006912:	e7ad      	b.n	8006870 <_printf_i+0xf4>
 8006914:	4826      	ldr	r0, [pc, #152]	@ (80069b0 <_printf_i+0x234>)
 8006916:	e7e9      	b.n	80068ec <_printf_i+0x170>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	f023 0320 	bic.w	r3, r3, #32
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	e7f6      	b.n	8006910 <_printf_i+0x194>
 8006922:	4616      	mov	r6, r2
 8006924:	e7bd      	b.n	80068a2 <_printf_i+0x126>
 8006926:	6833      	ldr	r3, [r6, #0]
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	6961      	ldr	r1, [r4, #20]
 800692c:	1d18      	adds	r0, r3, #4
 800692e:	6030      	str	r0, [r6, #0]
 8006930:	062e      	lsls	r6, r5, #24
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	d501      	bpl.n	800693a <_printf_i+0x1be>
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	e002      	b.n	8006940 <_printf_i+0x1c4>
 800693a:	0668      	lsls	r0, r5, #25
 800693c:	d5fb      	bpl.n	8006936 <_printf_i+0x1ba>
 800693e:	8019      	strh	r1, [r3, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	6123      	str	r3, [r4, #16]
 8006944:	4616      	mov	r6, r2
 8006946:	e7bc      	b.n	80068c2 <_printf_i+0x146>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	6032      	str	r2, [r6, #0]
 800694e:	681e      	ldr	r6, [r3, #0]
 8006950:	6862      	ldr	r2, [r4, #4]
 8006952:	2100      	movs	r1, #0
 8006954:	4630      	mov	r0, r6
 8006956:	f7f9 fc63 	bl	8000220 <memchr>
 800695a:	b108      	cbz	r0, 8006960 <_printf_i+0x1e4>
 800695c:	1b80      	subs	r0, r0, r6
 800695e:	6060      	str	r0, [r4, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	2300      	movs	r3, #0
 8006966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696a:	e7aa      	b.n	80068c2 <_printf_i+0x146>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	4632      	mov	r2, r6
 8006970:	4649      	mov	r1, r9
 8006972:	4640      	mov	r0, r8
 8006974:	47d0      	blx	sl
 8006976:	3001      	adds	r0, #1
 8006978:	d0ad      	beq.n	80068d6 <_printf_i+0x15a>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	079b      	lsls	r3, r3, #30
 800697e:	d413      	bmi.n	80069a8 <_printf_i+0x22c>
 8006980:	68e0      	ldr	r0, [r4, #12]
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	4298      	cmp	r0, r3
 8006986:	bfb8      	it	lt
 8006988:	4618      	movlt	r0, r3
 800698a:	e7a6      	b.n	80068da <_printf_i+0x15e>
 800698c:	2301      	movs	r3, #1
 800698e:	4632      	mov	r2, r6
 8006990:	4649      	mov	r1, r9
 8006992:	4640      	mov	r0, r8
 8006994:	47d0      	blx	sl
 8006996:	3001      	adds	r0, #1
 8006998:	d09d      	beq.n	80068d6 <_printf_i+0x15a>
 800699a:	3501      	adds	r5, #1
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	9903      	ldr	r1, [sp, #12]
 80069a0:	1a5b      	subs	r3, r3, r1
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	dcf2      	bgt.n	800698c <_printf_i+0x210>
 80069a6:	e7eb      	b.n	8006980 <_printf_i+0x204>
 80069a8:	2500      	movs	r5, #0
 80069aa:	f104 0619 	add.w	r6, r4, #25
 80069ae:	e7f5      	b.n	800699c <_printf_i+0x220>
 80069b0:	08006dd5 	.word	0x08006dd5
 80069b4:	08006de6 	.word	0x08006de6

080069b8 <__sflush_r>:
 80069b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c0:	0716      	lsls	r6, r2, #28
 80069c2:	4605      	mov	r5, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	d454      	bmi.n	8006a72 <__sflush_r+0xba>
 80069c8:	684b      	ldr	r3, [r1, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dc02      	bgt.n	80069d4 <__sflush_r+0x1c>
 80069ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dd48      	ble.n	8006a66 <__sflush_r+0xae>
 80069d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	d045      	beq.n	8006a66 <__sflush_r+0xae>
 80069da:	2300      	movs	r3, #0
 80069dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069e0:	682f      	ldr	r7, [r5, #0]
 80069e2:	6a21      	ldr	r1, [r4, #32]
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	d030      	beq.n	8006a4a <__sflush_r+0x92>
 80069e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	0759      	lsls	r1, r3, #29
 80069ee:	d505      	bpl.n	80069fc <__sflush_r+0x44>
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	1ad2      	subs	r2, r2, r3
 80069f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069f6:	b10b      	cbz	r3, 80069fc <__sflush_r+0x44>
 80069f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069fa:	1ad2      	subs	r2, r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a00:	6a21      	ldr	r1, [r4, #32]
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b0      	blx	r6
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	d106      	bne.n	8006a1a <__sflush_r+0x62>
 8006a0c:	6829      	ldr	r1, [r5, #0]
 8006a0e:	291d      	cmp	r1, #29
 8006a10:	d82b      	bhi.n	8006a6a <__sflush_r+0xb2>
 8006a12:	4a2a      	ldr	r2, [pc, #168]	@ (8006abc <__sflush_r+0x104>)
 8006a14:	40ca      	lsrs	r2, r1
 8006a16:	07d6      	lsls	r6, r2, #31
 8006a18:	d527      	bpl.n	8006a6a <__sflush_r+0xb2>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6062      	str	r2, [r4, #4]
 8006a1e:	04d9      	lsls	r1, r3, #19
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	6022      	str	r2, [r4, #0]
 8006a24:	d504      	bpl.n	8006a30 <__sflush_r+0x78>
 8006a26:	1c42      	adds	r2, r0, #1
 8006a28:	d101      	bne.n	8006a2e <__sflush_r+0x76>
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	b903      	cbnz	r3, 8006a30 <__sflush_r+0x78>
 8006a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a32:	602f      	str	r7, [r5, #0]
 8006a34:	b1b9      	cbz	r1, 8006a66 <__sflush_r+0xae>
 8006a36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	d002      	beq.n	8006a44 <__sflush_r+0x8c>
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f7ff fbf4 	bl	800622c <_free_r>
 8006a44:	2300      	movs	r3, #0
 8006a46:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a48:	e00d      	b.n	8006a66 <__sflush_r+0xae>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b0      	blx	r6
 8006a50:	4602      	mov	r2, r0
 8006a52:	1c50      	adds	r0, r2, #1
 8006a54:	d1c9      	bne.n	80069ea <__sflush_r+0x32>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0c6      	beq.n	80069ea <__sflush_r+0x32>
 8006a5c:	2b1d      	cmp	r3, #29
 8006a5e:	d001      	beq.n	8006a64 <__sflush_r+0xac>
 8006a60:	2b16      	cmp	r3, #22
 8006a62:	d11e      	bne.n	8006aa2 <__sflush_r+0xea>
 8006a64:	602f      	str	r7, [r5, #0]
 8006a66:	2000      	movs	r0, #0
 8006a68:	e022      	b.n	8006ab0 <__sflush_r+0xf8>
 8006a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	e01b      	b.n	8006aaa <__sflush_r+0xf2>
 8006a72:	690f      	ldr	r7, [r1, #16]
 8006a74:	2f00      	cmp	r7, #0
 8006a76:	d0f6      	beq.n	8006a66 <__sflush_r+0xae>
 8006a78:	0793      	lsls	r3, r2, #30
 8006a7a:	680e      	ldr	r6, [r1, #0]
 8006a7c:	bf08      	it	eq
 8006a7e:	694b      	ldreq	r3, [r1, #20]
 8006a80:	600f      	str	r7, [r1, #0]
 8006a82:	bf18      	it	ne
 8006a84:	2300      	movne	r3, #0
 8006a86:	eba6 0807 	sub.w	r8, r6, r7
 8006a8a:	608b      	str	r3, [r1, #8]
 8006a8c:	f1b8 0f00 	cmp.w	r8, #0
 8006a90:	dde9      	ble.n	8006a66 <__sflush_r+0xae>
 8006a92:	6a21      	ldr	r1, [r4, #32]
 8006a94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a96:	4643      	mov	r3, r8
 8006a98:	463a      	mov	r2, r7
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b0      	blx	r6
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	dc08      	bgt.n	8006ab4 <__sflush_r+0xfc>
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab4:	4407      	add	r7, r0
 8006ab6:	eba8 0800 	sub.w	r8, r8, r0
 8006aba:	e7e7      	b.n	8006a8c <__sflush_r+0xd4>
 8006abc:	20400001 	.word	0x20400001

08006ac0 <_fflush_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	690b      	ldr	r3, [r1, #16]
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b913      	cbnz	r3, 8006ad0 <_fflush_r+0x10>
 8006aca:	2500      	movs	r5, #0
 8006acc:	4628      	mov	r0, r5
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	b118      	cbz	r0, 8006ada <_fflush_r+0x1a>
 8006ad2:	6a03      	ldr	r3, [r0, #32]
 8006ad4:	b90b      	cbnz	r3, 8006ada <_fflush_r+0x1a>
 8006ad6:	f7ff faa1 	bl	800601c <__sinit>
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0f3      	beq.n	8006aca <_fflush_r+0xa>
 8006ae2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ae4:	07d0      	lsls	r0, r2, #31
 8006ae6:	d404      	bmi.n	8006af2 <_fflush_r+0x32>
 8006ae8:	0599      	lsls	r1, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_fflush_r+0x32>
 8006aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aee:	f7ff fb9a 	bl	8006226 <__retarget_lock_acquire_recursive>
 8006af2:	4628      	mov	r0, r5
 8006af4:	4621      	mov	r1, r4
 8006af6:	f7ff ff5f 	bl	80069b8 <__sflush_r>
 8006afa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006afc:	07da      	lsls	r2, r3, #31
 8006afe:	4605      	mov	r5, r0
 8006b00:	d4e4      	bmi.n	8006acc <_fflush_r+0xc>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	059b      	lsls	r3, r3, #22
 8006b06:	d4e1      	bmi.n	8006acc <_fflush_r+0xc>
 8006b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0a:	f7ff fb8d 	bl	8006228 <__retarget_lock_release_recursive>
 8006b0e:	e7dd      	b.n	8006acc <_fflush_r+0xc>

08006b10 <__swbuf_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	460e      	mov	r6, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	4605      	mov	r5, r0
 8006b18:	b118      	cbz	r0, 8006b22 <__swbuf_r+0x12>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <__swbuf_r+0x12>
 8006b1e:	f7ff fa7d 	bl	800601c <__sinit>
 8006b22:	69a3      	ldr	r3, [r4, #24]
 8006b24:	60a3      	str	r3, [r4, #8]
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	071a      	lsls	r2, r3, #28
 8006b2a:	d501      	bpl.n	8006b30 <__swbuf_r+0x20>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	b943      	cbnz	r3, 8006b42 <__swbuf_r+0x32>
 8006b30:	4621      	mov	r1, r4
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 f82a 	bl	8006b8c <__swsetup_r>
 8006b38:	b118      	cbz	r0, 8006b42 <__swbuf_r+0x32>
 8006b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3e:	4638      	mov	r0, r7
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	1a98      	subs	r0, r3, r2
 8006b48:	6963      	ldr	r3, [r4, #20]
 8006b4a:	b2f6      	uxtb	r6, r6
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	4637      	mov	r7, r6
 8006b50:	dc05      	bgt.n	8006b5e <__swbuf_r+0x4e>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff ffb3 	bl	8006ac0 <_fflush_r>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d1ed      	bne.n	8006b3a <__swbuf_r+0x2a>
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	60a3      	str	r3, [r4, #8]
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	6022      	str	r2, [r4, #0]
 8006b6a:	701e      	strb	r6, [r3, #0]
 8006b6c:	6962      	ldr	r2, [r4, #20]
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d004      	beq.n	8006b7e <__swbuf_r+0x6e>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	d5e1      	bpl.n	8006b3e <__swbuf_r+0x2e>
 8006b7a:	2e0a      	cmp	r6, #10
 8006b7c:	d1df      	bne.n	8006b3e <__swbuf_r+0x2e>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff ff9d 	bl	8006ac0 <_fflush_r>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d0d9      	beq.n	8006b3e <__swbuf_r+0x2e>
 8006b8a:	e7d6      	b.n	8006b3a <__swbuf_r+0x2a>

08006b8c <__swsetup_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4b29      	ldr	r3, [pc, #164]	@ (8006c34 <__swsetup_r+0xa8>)
 8006b90:	4605      	mov	r5, r0
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	460c      	mov	r4, r1
 8006b96:	b118      	cbz	r0, 8006ba0 <__swsetup_r+0x14>
 8006b98:	6a03      	ldr	r3, [r0, #32]
 8006b9a:	b90b      	cbnz	r3, 8006ba0 <__swsetup_r+0x14>
 8006b9c:	f7ff fa3e 	bl	800601c <__sinit>
 8006ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba4:	0719      	lsls	r1, r3, #28
 8006ba6:	d422      	bmi.n	8006bee <__swsetup_r+0x62>
 8006ba8:	06da      	lsls	r2, r3, #27
 8006baa:	d407      	bmi.n	8006bbc <__swsetup_r+0x30>
 8006bac:	2209      	movs	r2, #9
 8006bae:	602a      	str	r2, [r5, #0]
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb4:	81a3      	strh	r3, [r4, #12]
 8006bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bba:	e033      	b.n	8006c24 <__swsetup_r+0x98>
 8006bbc:	0758      	lsls	r0, r3, #29
 8006bbe:	d512      	bpl.n	8006be6 <__swsetup_r+0x5a>
 8006bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bc2:	b141      	cbz	r1, 8006bd6 <__swsetup_r+0x4a>
 8006bc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	d002      	beq.n	8006bd2 <__swsetup_r+0x46>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f7ff fb2d 	bl	800622c <_free_r>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	2300      	movs	r3, #0
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f043 0308 	orr.w	r3, r3, #8
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	6923      	ldr	r3, [r4, #16]
 8006bf0:	b94b      	cbnz	r3, 8006c06 <__swsetup_r+0x7a>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bfc:	d003      	beq.n	8006c06 <__swsetup_r+0x7a>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f84f 	bl	8006ca4 <__smakebuf_r>
 8006c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0a:	f013 0201 	ands.w	r2, r3, #1
 8006c0e:	d00a      	beq.n	8006c26 <__swsetup_r+0x9a>
 8006c10:	2200      	movs	r2, #0
 8006c12:	60a2      	str	r2, [r4, #8]
 8006c14:	6962      	ldr	r2, [r4, #20]
 8006c16:	4252      	negs	r2, r2
 8006c18:	61a2      	str	r2, [r4, #24]
 8006c1a:	6922      	ldr	r2, [r4, #16]
 8006c1c:	b942      	cbnz	r2, 8006c30 <__swsetup_r+0xa4>
 8006c1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c22:	d1c5      	bne.n	8006bb0 <__swsetup_r+0x24>
 8006c24:	bd38      	pop	{r3, r4, r5, pc}
 8006c26:	0799      	lsls	r1, r3, #30
 8006c28:	bf58      	it	pl
 8006c2a:	6962      	ldrpl	r2, [r4, #20]
 8006c2c:	60a2      	str	r2, [r4, #8]
 8006c2e:	e7f4      	b.n	8006c1a <__swsetup_r+0x8e>
 8006c30:	2000      	movs	r0, #0
 8006c32:	e7f7      	b.n	8006c24 <__swsetup_r+0x98>
 8006c34:	20000020 	.word	0x20000020

08006c38 <_sbrk_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	@ (8006c54 <_sbrk_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fa f8ca 	bl	8000ddc <_sbrk>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_sbrk_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_sbrk_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	200013f0 	.word	0x200013f0

08006c58 <__swhatbuf_r>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c60:	2900      	cmp	r1, #0
 8006c62:	b096      	sub	sp, #88	@ 0x58
 8006c64:	4615      	mov	r5, r2
 8006c66:	461e      	mov	r6, r3
 8006c68:	da0d      	bge.n	8006c86 <__swhatbuf_r+0x2e>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c70:	f04f 0100 	mov.w	r1, #0
 8006c74:	bf14      	ite	ne
 8006c76:	2340      	movne	r3, #64	@ 0x40
 8006c78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	6031      	str	r1, [r6, #0]
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	b016      	add	sp, #88	@ 0x58
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	466a      	mov	r2, sp
 8006c88:	f000 f848 	bl	8006d1c <_fstat_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	dbec      	blt.n	8006c6a <__swhatbuf_r+0x12>
 8006c90:	9901      	ldr	r1, [sp, #4]
 8006c92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c9a:	4259      	negs	r1, r3
 8006c9c:	4159      	adcs	r1, r3
 8006c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ca2:	e7eb      	b.n	8006c7c <__swhatbuf_r+0x24>

08006ca4 <__smakebuf_r>:
 8006ca4:	898b      	ldrh	r3, [r1, #12]
 8006ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca8:	079d      	lsls	r5, r3, #30
 8006caa:	4606      	mov	r6, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	d507      	bpl.n	8006cc0 <__smakebuf_r+0x1c>
 8006cb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	6163      	str	r3, [r4, #20]
 8006cbc:	b003      	add	sp, #12
 8006cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc0:	ab01      	add	r3, sp, #4
 8006cc2:	466a      	mov	r2, sp
 8006cc4:	f7ff ffc8 	bl	8006c58 <__swhatbuf_r>
 8006cc8:	9f00      	ldr	r7, [sp, #0]
 8006cca:	4605      	mov	r5, r0
 8006ccc:	4639      	mov	r1, r7
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff fb18 	bl	8006304 <_malloc_r>
 8006cd4:	b948      	cbnz	r0, 8006cea <__smakebuf_r+0x46>
 8006cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cda:	059a      	lsls	r2, r3, #22
 8006cdc:	d4ee      	bmi.n	8006cbc <__smakebuf_r+0x18>
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	f043 0302 	orr.w	r3, r3, #2
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	e7e2      	b.n	8006cb0 <__smakebuf_r+0xc>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	6020      	str	r0, [r4, #0]
 8006cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	9b01      	ldr	r3, [sp, #4]
 8006cf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cfa:	b15b      	cbz	r3, 8006d14 <__smakebuf_r+0x70>
 8006cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 f81d 	bl	8006d40 <_isatty_r>
 8006d06:	b128      	cbz	r0, 8006d14 <__smakebuf_r+0x70>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	431d      	orrs	r5, r3
 8006d18:	81a5      	strh	r5, [r4, #12]
 8006d1a:	e7cf      	b.n	8006cbc <__smakebuf_r+0x18>

08006d1c <_fstat_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	@ (8006d3c <_fstat_r+0x20>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f7fa f82e 	bl	8000d8a <_fstat>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d102      	bne.n	8006d38 <_fstat_r+0x1c>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	b103      	cbz	r3, 8006d38 <_fstat_r+0x1c>
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200013f0 	.word	0x200013f0

08006d40 <_isatty_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d06      	ldr	r5, [pc, #24]	@ (8006d5c <_isatty_r+0x1c>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	f7fa f82d 	bl	8000daa <_isatty>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_isatty_r+0x1a>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_isatty_r+0x1a>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	200013f0 	.word	0x200013f0

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
